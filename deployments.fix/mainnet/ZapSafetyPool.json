{
  "address": "0xf0bb628e55a5092f4D21147B4591587D0F4b1deF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safetyPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_odos",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZaiTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "odos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safetyPool",
      "outputs": [
        {
          "internalType": "contract IERC4626",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zai",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPegStabilityModule",
          "name": "psm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "zapIntoSafetyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPegStabilityModule",
          "name": "psm",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "swapAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minShares",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "odosCallData",
          "type": "bytes"
        }
      ],
      "name": "zapIntoSafetyPoolWithOdos",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8083d0be37cae491f2042b413d15eb4564f932205e75515f0155591625f0e621",
  "receipt": {
    "to": null,
    "from": "0x1F09Ec21d7fd0A21879b919bf0f9C46e6b85CA8b",
    "contractAddress": "0xf0bb628e55a5092f4D21147B4591587D0F4b1deF",
    "transactionIndex": 42,
    "gasUsed": "953084",
    "logsBloom": "0x
    "blockHash": "0x9f6ab617a5a2ade95ef11ec41d605d74ab6ada44330f165142688c90dec411ba",
    "transactionHash": "0x8083d0be37cae491f2042b413d15eb4564f932205e75515f0155591625f0e621",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 21250465,
        "transactionHash": "0x8083d0be37cae491f2042b413d15eb4564f932205e75515f0155591625f0e621",
        "address": "0x69000dFD5025E82f48Eb28325A2B88a241182CEd",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000f0bb628e55a5092f4d21147b4591587d0f4b1def",
          "0x00000000000000000000000069000195d5e3201cf73c9ae4a1559244df38d47c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 126,
        "blockHash": "0x9f6ab617a5a2ade95ef11ec41d605d74ab6ada44330f165142688c90dec411ba"
      }
    ],
    "blockNumber": 21250465,
    "cumulativeGasUsed": "6754270",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x69000195D5e3201Cf73C9Ae4a1559244DF38D47C",
    "0x69000dFD5025E82f48Eb28325A2B88a241182CEd",
    "0xcf5540fffcdc3d510b18bfca6d2b9987b0772559"
  ],
  "numDeployments": 1,
  "solcInputHash": "eb2ee29b7cba94a6d72cb7d6d125d775",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safetyPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_odos\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZaiTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"odos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyPool\",\"outputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPegStabilityModule\",\"name\":\"psm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"zapIntoSafetyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPegStabilityModule\",\"name\":\"psm\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"swapAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minShares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"odosCallData\",\"type\":\"bytes\"}],\"name\":\"zapIntoSafetyPoolWithOdos\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to directly stake into the safety pool\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract with the required contracts\"},\"zapIntoSafetyPool(address,uint256)\":{\"params\":{\"amountIn\":\"The amount to zap\",\"psm\":\"The Peg Stability Module for the asset\"}}},\"stateVariables\":{\"me\":{\"details\":\"The address of this contract\"}},\"title\":\"ZapSafetyPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safetyPool()\":{\"notice\":\"The safety pool contract\"},\"zai()\":{\"notice\":\"The ZAI stablecoin\"},\"zapIntoSafetyPool(address,uint256)\":{\"notice\":\"Allows a user to zap into the safety pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/zaps/implementations/ethereum/ZapSafetyPool.sol\":\"ZapSafetyPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/interfaces/IStablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStablecoin is IERC20 {\\n  /**\\n   * @notice Used to mint ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to mint to\\n   * @param _amount The amount to mint\\n   */\\n  function mint(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Role for minting/burning ZAI\\n   */\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Used to burn ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to burn from\\n   * @param _amount The amount to burn\\n   */\\n  function burn(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Grants the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to grant the role to\\n   */\\n  function grantManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Revokes the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to revoke the role from\\n   */\\n  function revokeManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Checks if an address is an approved manager\\n   * @param _account The address to check\\n   * @return what True iff the address is a manager\\n   */\\n  function isManager(address _account) external view returns (bool what);\\n}\\n\",\"keccak256\":\"0xaadb3432557810d9cddef1be599f06bba520273011d8c0a80f833082fff964f0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/core/IPegStabilityModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IStablecoin} from \\\"../IStablecoin.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title Peg Stability Module\\n * @author maha.xyz\\n * @notice Used to mint ZAI with collateral at a pre-defined rate\\n */\\ninterface IPegStabilityModule {\\n  /**\\n   * @notice Returns the Zai stablecoin\\n   */\\n  function zai() external returns (IStablecoin);\\n\\n  /**\\n   * @notice Returns the collateral token\\n   */\\n  function collateral() external returns (IERC20);\\n\\n  /**\\n   * @notice Returns the supply cap\\n   */\\n  function supplyCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the debt cap\\n   */\\n  function debtCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current debt held in this vault\\n   */\\n  function debt() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current rate of ZAI/Collateral\\n   */\\n  function rate() external returns (uint256);\\n\\n  /**\\n   * @notice The mint fee in BPS\\n   */\\n  function mintFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The address where fees are sent\\n   */\\n  function feeDestination() external returns (address);\\n\\n  /**\\n   * @notice The redeem fee in BPS\\n   */\\n  function redeemFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The maximum fee that can be charged\\n   */\\n  function MAX_FEE_BPS() external returns (uint256);\\n\\n  /**\\n   * @notice Mints ZAI with collateral\\n   * @dev This contract calculates how much collateral should be taken\\n   * @param destination Where the minted ZAI will be sent\\n   * @param shares The amount of zai to mint\\n   */\\n  function mint(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Redeems ZAI for collateral\\n   * @dev This contract calculates how much collateral should be given\\n   * @param destination Where the collateral will be sent\\n   * @param shares The amount of zai to redeem\\n   */\\n  function redeem(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Updates the supply and debt caps\\n   * @dev Only callable by the admin\\n   * @param _supplyCap How much collateral can be taken\\n   * @param _debtCap How much debt can be held\\n   */\\n  function updateCaps(uint256 _supplyCap, uint256 _debtCap) external;\\n\\n  // /**\\n  //  * @notice Updates the rate of ZAI/Collateral\\n  //  * @dev Only callable by the admin\\n  //  * @param _newRate The new rate of ZAI/Collateral\\n  //  */\\n  // function updateRate(uint256 _newRate) external;\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral\\n   * @param _amount The amount of ZAI\\n   * @return collateralAmount The amount of collateral\\n   */\\n  function toCollateralAmount(uint256 _amount) external view returns (uint256 collateralAmount);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee added\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS + fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFee(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee removed\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS - fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFeeInverse(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be minted for a given amount of collateral\\n   * @param amountAssetsIn The amount of collateral\\n   */\\n  function mintAmountIn(uint256 amountAssetsIn) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be redeemed for a given amount of collateral\\n   * @param amountAssetsOut The amount of collateral\\n   */\\n  function redeemAmountOut(uint256 amountAssetsOut) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice How much fees has been collected by the protocol\\n   * @return fees The amount of fees collected in ZAI\\n   */\\n  function feesCollected() external view returns (uint256 fees);\\n\\n  /**\\n   * @notice Updates the mint and redeem fees\\n   * @param _mintFeeBps The new mint fee in BPS\\n   * @param _redeemFeeBps The new redeem fee in BPS\\n   */\\n  function updateFees(uint256 _mintFeeBps, uint256 _redeemFeeBps) external;\\n\\n  /**\\n   * @notice Updates the fee destination\\n   * @param _feeDestination The new fee destination\\n   * @dev Only callable by the admin\\n   */\\n  function updateFeeDestination(address _feeDestination) external;\\n\\n  // /**\\n  //  * @notice Initializes the contract\\n  //  * @param _zai The ZAI stablecoin\\n  //  * @param _collateral The collateral token\\n  //  * @param _governance Governance address\\n  //  * @param _newRate The new rate of ZAI/Collateral\\n  //  * @param _supplyCap The supply cap\\n  //  * @param _debtCap The debt cap\\n  //  * @param _mintFeeBps The mint fee in BPS\\n  //  * @param _redeemFeeBps The redeem fee in BPS\\n  //  * @param _feeDestination The address where fees are sent\\n  //  */\\n  // function initialize(\\n  //   address _zai,\\n  //   address _collateral,\\n  //   address _governance,\\n  //   uint256 _newRate,\\n  //   uint256 _supplyCap,\\n  //   uint256 _debtCap,\\n  //   uint256 _mintFeeBps,\\n  //   uint256 _redeemFeeBps,\\n  //   address _feeDestination\\n  // ) external;\\n}\\n\",\"keccak256\":\"0x2dbe99751d3ecc0a33d9d3d1a4895c8894741325013de98dabcabbe017d71b60\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/governance/ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/// @title ILocker Interface\\n/// @notice Interface for a contract that handles locking ERC20 tokens in exchange for NFT representations\\ninterface ILocker is IERC721Enumerable {\\n  /**\\n   * @notice Structure to store locked balance information\\n   * @param amount Amount of tokens locked\\n   * @param end End time of the lock period (timestamp)\\n   * @param start Start time of the lock period (timestamp)\\n   * @param power Additional parameter, potentially for governance or staking power\\n   */\\n  struct LockedBalance {\\n    uint256 amount;\\n    uint256 end;\\n    uint256 start;\\n    uint256 power;\\n  }\\n\\n  enum DepositType {\\n    DEPOSIT_FOR_TYPE,\\n    CREATE_LOCK_TYPE,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_UNLOCK_TIME,\\n    MERGE_TYPE\\n  }\\n\\n  /**\\n   * @notice Get the balance associated with an NFT\\n   * @param _tokenId The NFT ID\\n   * @return The balance of the NFT\\n   */\\n  function balanceOfNFT(uint256 _tokenId) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the underlying ERC20 token\\n   * @return The ERC20 token contract\\n   */\\n  function underlying() external view returns (IERC20);\\n\\n  /**\\n   * @notice Get the locked balance details of an NFT\\n   * @param _tokenId The NFT ID\\n   * @return The LockedBalance struct containing lock details\\n   */\\n  function locked(uint256 _tokenId) external view returns (LockedBalance memory);\\n\\n  /**\\n   * @notice Get the end time of the lock for a specific NFT\\n   * @param _tokenId The NFT ID\\n   * @return The end time of the lock period (timestamp)\\n   */\\n  function lockedEnd(uint256 _tokenId) external view returns (uint256);\\n\\n  /**\\n   * @notice Get the voting power of a specific address\\n   * @param _owner The address of the owner\\n   * @return _power The voting power of the owner\\n   */\\n  function votingPowerOf(address _owner) external view returns (uint256 _power);\\n\\n  /**\\n   * @notice Merge two NFTs into one\\n   * @param _from The ID of the NFT to merge from\\n   * @param _to The ID of the NFT to merge into\\n   */\\n  function merge(uint256 _from, uint256 _to) external;\\n\\n  /**\\n   * @notice Deposit tokens for a specific NFT\\n   * @param _tokenId The ID of the NFT\\n   * @param _value The amount of tokens to deposit\\n   */\\n  function depositFor(uint256 _tokenId, uint256 _value) external;\\n\\n  /**\\n   * @notice Create a lock for a specified amount and duration\\n   * @param _value The amount of tokens to lock\\n   * @param _lockDuration The lock duration in seconds\\n   * @param _stakeNFT Whether the NFT should be staked\\n   * @return The ID of the created NFT\\n   */\\n  function createLock(uint256 _value, uint256 _lockDuration, bool _stakeNFT) external returns (uint256);\\n\\n  /**\\n   * @notice Increase the amount of tokens locked in a specific NFT\\n   * @param _tokenId The ID of the NFT\\n   * @param _value The additional amount of tokens to lock\\n   */\\n  function increaseAmount(uint256 _tokenId, uint256 _value) external;\\n\\n  /**\\n   * @notice Extend the unlock time for an NFT\\n   * @param _lockDuration New number of seconds until tokens unlock\\n   */\\n  function increaseUnlockTime(uint256 _tokenId, uint256 _lockDuration) external;\\n\\n  /**\\n   * @notice Create a lock for a specified amount, duration, and recipient\\n   * @param _value The amount of tokens to lock\\n   * @param _lockDuration The lock duration in seconds\\n   * @param _to The address to receive the NFT\\n   * @param _stakeNFT Whether the NFT should be staked\\n   * @return The ID of the created NFT\\n   */\\n  function createLockFor(uint256 _value, uint256 _lockDuration, address _to, bool _stakeNFT) external returns (uint256);\\n\\n  /**\\n   * @notice Withdraw tokens from a specific NFT\\n   * @param _tokenId The ID of the NFT\\n   */\\n  function withdraw(uint256 _tokenId) external;\\n\\n  /**\\n   * @notice Withdraw tokens from multiple NFTs\\n   * @param _tokenIds An array of NFT IDs\\n   */\\n  function withdraw(uint256[] calldata _tokenIds) external;\\n\\n  /**\\n   * @notice Withdraw tokens for a specific user\\n   * @param _user The address of the user\\n   */\\n  function withdraw(address _user) external;\\n\\n  event Deposit(\\n    address indexed provider,\\n    uint256 tokenId,\\n    uint256 value,\\n    uint256 indexed locktime,\\n    DepositType deposit_type,\\n    uint256 ts\\n  );\\n\\n  event Withdraw(address indexed provider, uint256 tokenId, uint256 value, uint256 ts);\\n  event Supply(uint256 prevSupply, uint256 supply);\\n\\n  event LockUpdated(LockedBalance indexed lock, uint256 indexed tokenId, address caller);\\n  event TokenAddressSet(address indexed oldToken, address indexed newToken);\\n  event StakingAddressSet(address indexed oldStaking, address indexed newStaking);\\n  event StakingBonusAddressSet(address indexed oldStakingBonus, address indexed newStakingBonus);\\n}\\n\",\"keccak256\":\"0x1c66de6f0382c7a608e61e8dee6d4cc1fae47020efe245197d5fe556e614b4e0\",\"license\":\"GPL-3.0\"},\"contracts/periphery/zaps/implementations/ethereum/ZapSafetyPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IPegStabilityModule} from \\\"../../../../interfaces/core/IPegStabilityModule.sol\\\";\\nimport {ILocker} from \\\"../../../../interfaces/governance/ILocker.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title ZapSafetyPool\\n * @dev This contract allows users to directly stake into the safety pool\\n */\\ncontract ZapSafetyPool {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice The safety pool contract\\n  IERC4626 public safetyPool;\\n\\n  /// @notice The ZAI stablecoin\\n  IERC20 public zai;\\n\\n  /// @dev The address of this contract\\n  address private me;\\n\\n  address public odos;\\n\\n  error TokenTransferFailed();\\n  error ZaiTransferFailed();\\n\\n  /**\\n   * @dev Initializes the contract with the required contracts\\n   */\\n  constructor(address _safetyPool, address _zai, address _odos) {\\n    safetyPool = IERC4626(_safetyPool);\\n    zai = IERC20(_zai);\\n    me = address(this);\\n    odos = _odos;\\n    zai.approve(_safetyPool, type(uint256).max);\\n  }\\n\\n  /**\\n   * @notice Allows a user to zap into the safety pool\\n   * @param psm The Peg Stability Module for the asset\\n   * @param amountIn The amount to zap\\n   */\\n  function zapIntoSafetyPool(IPegStabilityModule psm, uint256 amountIn) external {\\n    uint256 zaiToMint = psm.mintAmountIn(amountIn);\\n    IERC20 asset = IERC20(psm.collateral());\\n\\n    asset.safeTransferFrom(msg.sender, me, amountIn);\\n    asset.approve(address(psm), amountIn);\\n    psm.mint(me, zaiToMint);\\n\\n    safetyPool.deposit(zaiToMint, msg.sender);\\n\\n    // sweep any dust\\n    sweep(asset);\\n  }\\n\\n  function zapIntoSafetyPoolWithOdos(\\n    IPegStabilityModule psm,\\n    IERC20 swapAsset,\\n    uint256 swapAmount,\\n    uint256 minShares,\\n    bytes memory odosCallData\\n  ) external payable {\\n    if (swapAsset != IERC20(address(0))) {\\n      swapAsset.safeTransferFrom(msg.sender, me, swapAmount);\\n    }\\n\\n    // swap on odos\\n    swapAsset.approve(odos, swapAmount);\\n    (bool success,) = odos.call{value: msg.value}(odosCallData);\\n    require(success, \\\"odos call failed\\\");\\n\\n    // mint ZAI\\n    IERC20 asset = IERC20(psm.collateral());\\n    uint256 zaiToMint = psm.mintAmountIn(asset.balanceOf(me));\\n    asset.approve(address(psm), type(uint256).max);\\n    psm.mint(me, zaiToMint);\\n\\n    // mint sZAI\\n    uint256 shares = safetyPool.deposit(zaiToMint, msg.sender);\\n    require(shares >= minShares, \\\"insufficient tokens minted\\\");\\n\\n    // sweep any dust\\n    sweep(asset);\\n  }\\n\\n  function sweep(IERC20 token) public {\\n    uint256 zaiB = zai.balanceOf(address(this));\\n    uint256 tokenB = token.balanceOf(address(this));\\n\\n    if (zaiB > 0 && !zai.transfer(msg.sender, zaiB)) {\\n      revert ZaiTransferFailed();\\n    }\\n\\n    if (tokenB > 0 && !token.transfer(msg.sender, tokenB)) {\\n      revert TokenTransferFailed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf16cbac176047b2549d45769f0018f8fffddb566db0f4374e9c645e70e953388\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162000f9438038062000f948339810160408190526100319161010b565b600080546001600160a01b03199081166001600160a01b038681169182179093556001805483168685169081179091556002805430908516179055600380549093169385169390931790915560405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af11580156100c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e6919061014e565b50505050610177565b80516001600160a01b038116811461010657600080fd5b919050565b60008060006060848603121561012057600080fd5b610129846100ef565b9250610137602085016100ef565b9150610145604085016100ef565b90509250925092565b60006020828403121561016057600080fd5b8151801515811461017057600080fd5b9392505050565b610e0d80620001876000396000f3fe6080604052600436106100555760003560e01c806301681a621461005a57806307140b341461007c5780631eba02ec146100b257806344aeac5f146100d257806354ff4865146100e5578063913e2c7914610105575b600080fd5b34801561006657600080fd5b5061007a610075366004610bda565b610125565b005b34801561008857600080fd5b5060015461009c906001600160a01b031681565b6040516100a99190610bf7565b60405180910390f35b3480156100be57600080fd5b5060035461009c906001600160a01b031681565b61007a6100e0366004610c21565b61034b565b3480156100f157600080fd5b5061007a610100366004610d0b565b610799565b34801561011157600080fd5b5060005461009c906001600160a01b031681565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610156903090600401610bf7565b602060405180830381865afa158015610173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101979190610d37565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016101c79190610bf7565b602060405180830381865afa1580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102089190610d37565b905060008211801561028c575060015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906102479033908690600401610d50565b6020604051808303816000875af1158015610266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028a9190610d69565b155b156102aa576040516361a6da1b60e01b815260040160405180910390fd5b600081118015610328575060405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906102e39033908590600401610d50565b6020604051808303816000875af1158015610302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103269190610d69565b155b156103465760405163022e258160e11b815260040160405180910390fd5b505050565b6001600160a01b0384161561037657600254610376906001600160a01b0386811691339116866109e9565b60035460405163095ea7b360e01b81526001600160a01b038681169263095ea7b3926103aa92909116908790600401610d50565b6020604051808303816000875af11580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed9190610d69565b506003546040516000916001600160a01b031690349061040e908590610d8b565b60006040518083038185875af1925050503d806000811461044b576040519150601f19603f3d011682016040523d82523d6000602084013e610450565b606091505b50509050806104995760405162461bcd60e51b815260206004820152601060248201526f1bd91bdcc818d85b1b0819985a5b195960821b60448201526064015b60405180910390fd5b6000866001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af11580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190610dba565b6002546040516370a0823160e01b81529192506000916001600160a01b03808b1692631f80b95a92828716926370a082319261054092911690600401610bf7565b602060405180830381865afa15801561055d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105819190610d37565b6040518263ffffffff1660e01b815260040161059f91815260200190565b602060405180830381865afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e09190610d37565b60405163095ea7b360e01b81529091506001600160a01b0383169063095ea7b390610613908b9060001990600401610d50565b6020604051808303816000875af1158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190610d69565b506002546040516340c10f1960e01b81526001600160a01b038a8116926340c10f199261068b92909116908590600401610d50565b600060405180830381600087803b1580156106a557600080fd5b505af11580156106b9573d6000803e3d6000fd5b505060008054604051636e553f6560e01b8152600481018690523360248201529193506001600160a01b03169150636e553f65906044016020604051808303816000875af115801561070f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107339190610d37565b9050858110156107855760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420746f6b656e73206d696e7465640000000000006044820152606401610490565b61078e83610125565b505050505050505050565b604051630fc05cad60e11b8152600481018290526000906001600160a01b03841690631f80b95a90602401602060405180830381865afa1580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190610d37565b90506000836001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190610dba565b60025490915061088c906001600160a01b0380841691339116866109e9565b60405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906108ba9087908790600401610d50565b6020604051808303816000875af11580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190610d69565b506002546040516340c10f1960e01b81526001600160a01b03868116926340c10f199261093292909116908690600401610d50565b600060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b5050600054604051636e553f6560e01b8152600481018690523360248201526001600160a01b039091169250636e553f6591506044016020604051808303816000875af11580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190610d37565b506109e381610125565b50505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092019092526020810180516001600160e01b03166323b872dd60e01b1790526109e391869190600090610a4f90841683610a94565b90508051600014158015610a74575080806020019051810190610a729190610d69565b155b156103465782604051635274afe760e01b81526004016104909190610bf7565b6060610aa283836000610aa9565b9392505050565b606081471015610ace573060405163cd78605960e01b81526004016104909190610bf7565b600080856001600160a01b03168486604051610aea9190610d8b565b60006040518083038185875af1925050503d8060008114610b27576040519150601f19603f3d011682016040523d82523d6000602084013e610b2c565b606091505b5091509150610b3c868383610b46565b9695505050505050565b606082610b5b57610b5682610b99565b610aa2565b8151158015610b7257506001600160a01b0384163b155b15610b925783604051639996b31560e01b81526004016104909190610bf7565b5080610aa2565b805115610ba95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b0381168114610bc257600080fd5b600060208284031215610bec57600080fd5b8135610aa281610bc5565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215610c3957600080fd5b8535610c4481610bc5565b94506020860135610c5481610bc5565b93506040860135925060608601359150608086013567ffffffffffffffff80821115610c7f57600080fd5b818801915088601f830112610c9357600080fd5b813581811115610ca557610ca5610c0b565b604051601f8201601f19908116603f01168101908382118183101715610ccd57610ccd610c0b565b816040528281528b6020848701011115610ce657600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b60008060408385031215610d1e57600080fd5b8235610d2981610bc5565b946020939093013593505050565b600060208284031215610d4957600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b600060208284031215610d7b57600080fd5b81518015158114610aa257600080fd5b6000825160005b81811015610dac5760208186018101518583015201610d92565b506000920191825250919050565b600060208284031215610dcc57600080fd5b8151610aa281610bc556fea2646970667358221220ff7c8baf415adfd773927dee29cc5cd0df5597314f20482fa8768dfd6a1d840f64736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c806301681a621461005a57806307140b341461007c5780631eba02ec146100b257806344aeac5f146100d257806354ff4865146100e5578063913e2c7914610105575b600080fd5b34801561006657600080fd5b5061007a610075366004610bda565b610125565b005b34801561008857600080fd5b5060015461009c906001600160a01b031681565b6040516100a99190610bf7565b60405180910390f35b3480156100be57600080fd5b5060035461009c906001600160a01b031681565b61007a6100e0366004610c21565b61034b565b3480156100f157600080fd5b5061007a610100366004610d0b565b610799565b34801561011157600080fd5b5060005461009c906001600160a01b031681565b6001546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610156903090600401610bf7565b602060405180830381865afa158015610173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101979190610d37565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016101c79190610bf7565b602060405180830381865afa1580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102089190610d37565b905060008211801561028c575060015460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906102479033908690600401610d50565b6020604051808303816000875af1158015610266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028a9190610d69565b155b156102aa576040516361a6da1b60e01b815260040160405180910390fd5b600081118015610328575060405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906102e39033908590600401610d50565b6020604051808303816000875af1158015610302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103269190610d69565b155b156103465760405163022e258160e11b815260040160405180910390fd5b505050565b6001600160a01b0384161561037657600254610376906001600160a01b0386811691339116866109e9565b60035460405163095ea7b360e01b81526001600160a01b038681169263095ea7b3926103aa92909116908790600401610d50565b6020604051808303816000875af11580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed9190610d69565b506003546040516000916001600160a01b031690349061040e908590610d8b565b60006040518083038185875af1925050503d806000811461044b576040519150601f19603f3d011682016040523d82523d6000602084013e610450565b606091505b50509050806104995760405162461bcd60e51b815260206004820152601060248201526f1bd91bdcc818d85b1b0819985a5b195960821b60448201526064015b60405180910390fd5b6000866001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af11580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190610dba565b6002546040516370a0823160e01b81529192506000916001600160a01b03808b1692631f80b95a92828716926370a082319261054092911690600401610bf7565b602060405180830381865afa15801561055d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105819190610d37565b6040518263ffffffff1660e01b815260040161059f91815260200190565b602060405180830381865afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e09190610d37565b60405163095ea7b360e01b81529091506001600160a01b0383169063095ea7b390610613908b9060001990600401610d50565b6020604051808303816000875af1158015610632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106569190610d69565b506002546040516340c10f1960e01b81526001600160a01b038a8116926340c10f199261068b92909116908590600401610d50565b600060405180830381600087803b1580156106a557600080fd5b505af11580156106b9573d6000803e3d6000fd5b505060008054604051636e553f6560e01b8152600481018690523360248201529193506001600160a01b03169150636e553f65906044016020604051808303816000875af115801561070f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107339190610d37565b9050858110156107855760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420746f6b656e73206d696e7465640000000000006044820152606401610490565b61078e83610125565b505050505050505050565b604051630fc05cad60e11b8152600481018290526000906001600160a01b03841690631f80b95a90602401602060405180830381865afa1580156107e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108059190610d37565b90506000836001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086d9190610dba565b60025490915061088c906001600160a01b0380841691339116866109e9565b60405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906108ba9087908790600401610d50565b6020604051808303816000875af11580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190610d69565b506002546040516340c10f1960e01b81526001600160a01b03868116926340c10f199261093292909116908690600401610d50565b600060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b5050600054604051636e553f6560e01b8152600481018690523360248201526001600160a01b039091169250636e553f6591506044016020604051808303816000875af11580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190610d37565b506109e381610125565b50505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092019092526020810180516001600160e01b03166323b872dd60e01b1790526109e391869190600090610a4f90841683610a94565b90508051600014158015610a74575080806020019051810190610a729190610d69565b155b156103465782604051635274afe760e01b81526004016104909190610bf7565b6060610aa283836000610aa9565b9392505050565b606081471015610ace573060405163cd78605960e01b81526004016104909190610bf7565b600080856001600160a01b03168486604051610aea9190610d8b565b60006040518083038185875af1925050503d8060008114610b27576040519150601f19603f3d011682016040523d82523d6000602084013e610b2c565b606091505b5091509150610b3c868383610b46565b9695505050505050565b606082610b5b57610b5682610b99565b610aa2565b8151158015610b7257506001600160a01b0384163b155b15610b925783604051639996b31560e01b81526004016104909190610bf7565b5080610aa2565b805115610ba95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b0381168114610bc257600080fd5b600060208284031215610bec57600080fd5b8135610aa281610bc5565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215610c3957600080fd5b8535610c4481610bc5565b94506020860135610c5481610bc5565b93506040860135925060608601359150608086013567ffffffffffffffff80821115610c7f57600080fd5b818801915088601f830112610c9357600080fd5b813581811115610ca557610ca5610c0b565b604051601f8201601f19908116603f01168101908382118183101715610ccd57610ccd610c0b565b816040528281528b6020848701011115610ce657600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b60008060408385031215610d1e57600080fd5b8235610d2981610bc5565b946020939093013593505050565b600060208284031215610d4957600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b600060208284031215610d7b57600080fd5b81518015158114610aa257600080fd5b6000825160005b81811015610dac5760208186018101518583015201610d92565b506000920191825250919050565b600060208284031215610dcc57600080fd5b8151610aa281610bc556fea2646970667358221220ff7c8baf415adfd773927dee29cc5cd0df5597314f20482fa8768dfd6a1d840f64736f6c63430008150033",
  "devdoc": {
    "details": "This contract allows users to directly stake into the safety pool",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Initializes the contract with the required contracts"
      },
      "zapIntoSafetyPool(address,uint256)": {
        "params": {
          "amountIn": "The amount to zap",
          "psm": "The Peg Stability Module for the asset"
        }
      }
    },
    "stateVariables": {
      "me": {
        "details": "The address of this contract"
      }
    },
    "title": "ZapSafetyPool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "safetyPool()": {
        "notice": "The safety pool contract"
      },
      "zai()": {
        "notice": "The ZAI stablecoin"
      },
      "zapIntoSafetyPool(address,uint256)": {
        "notice": "Allows a user to zap into the safety pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1445,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapSafetyPool.sol:ZapSafetyPool",
        "label": "safetyPool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC4626)173"
      },
      {
        "astId": 1449,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapSafetyPool.sol:ZapSafetyPool",
        "label": "zai",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)251"
      },
      {
        "astId": 1452,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapSafetyPool.sol:ZapSafetyPool",
        "label": "me",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1454,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapSafetyPool.sol:ZapSafetyPool",
        "label": "odos",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)251": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC4626)173": {
        "encoding": "inplace",
        "label": "contract IERC4626",
        "numberOfBytes": "20"
      }
    }
  }
}