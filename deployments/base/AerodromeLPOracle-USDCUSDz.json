{
  "address": "0x44263a0b9FF2A90f72deD1cf4865dA3457EA3b01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenBPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getPriceFor",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IAerodromePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAPriceFeed",
      "outputs": [
        {
          "internalType": "contract IAggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenBPriceFeed",
      "outputs": [
        {
          "internalType": "contract IAggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c3a0526d662787831326f184769e4311271362663a28f3fb19382ceb741ede3",
  "receipt": {
    "to": null,
    "from": "0x1F09Ec21d7fd0A21879b919bf0f9C46e6b85CA8b",
    "contractAddress": "0x44263a0b9FF2A90f72deD1cf4865dA3457EA3b01",
    "transactionIndex": 97,
    "gasUsed": "632038",
    "logsBloom": "0x
    "blockHash": "0xd1e71f8ba603fa115de29243ae7de1397acfd567ad3bd539848203eb0966710d",
    "transactionHash": "0x8c3a0526d662787831326f184769e4311271362663a28f3fb19382ceb741ede3",
    "logs": [],
    "blockNumber": 19141433,
    "cumulativeGasUsed": "19383140",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeAA79aaC2decf71F07c3208Df05B198d09c9F971",
    "0xeAA79aaC2decf71F07c3208Df05B198d09c9F971",
    "0x72d509aff75753aaad6a10d3eb98f2dbc58c480d"
  ],
  "numDeployments": 1,
  "solcInputHash": "f80f402f788da152a7e21cb6e9142409",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFor\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IAerodromePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAPriceFeed\",\"outputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBPriceFeed\",\"outputs\":[{\"internalType\":\"contract IAggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"maha.xyz\",\"details\":\"Reference from https://github.com/AlphaFinanceLab/alpha-homora-v2-contract/blob/master/contracts/oracle/UniswapV2Oracle.sol\",\"kind\":\"dev\",\"methods\":{\"getPrice()\":{\"details\":\"This function fetches reserves from the Nile AMM and uses a pre-defined price for tokens to calculate the LP token price.\",\"returns\":{\"price\":\"The price of the liquidity pool token.\"}}},\"title\":\"AerodromeLPOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPrice()\":{\"notice\":\"Gets the price of the liquidity pool token.\"}},\"notice\":\"A contract that returns a price of an LP token on Aerdrome.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/oracles/AerodromeLPOracle.sol\":\"AerodromeLPOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/governance/IAggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\ninterface IAggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external pure returns (string memory);\\n\\n  function getAnswer(uint256) external view returns (int256);\\n\\n  function getTimestamp(uint256) external view returns (uint256);\\n\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function version() external pure returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x2c6115e44408a3aa6f0e88efed771e91dc8e8ffc92872966e4124a9fd6e1999d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/dex/IAerodromePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\ninterface IAerodromePool {\\n  error DepositsNotEqual();\\n  error BelowMinimumK();\\n  error FactoryAlreadySet();\\n  error InsufficientLiquidity();\\n  error InsufficientLiquidityMinted();\\n  error InsufficientLiquidityBurned();\\n  error InsufficientOutputAmount();\\n  error InsufficientInputAmount();\\n  error IsPaused();\\n  error InvalidTo();\\n  error K();\\n  error NotEmergencyCouncil();\\n\\n  event Fees(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\n  event Swap(\\n    address indexed sender,\\n    address indexed to,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out\\n  );\\n  event Sync(uint256 reserve0, uint256 reserve1);\\n  event Claim(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1);\\n\\n  // Struct to capture time period obervations every 30 minutes, used for local oracles\\n  struct Observation {\\n    uint256 timestamp;\\n    uint256 reserve0Cumulative;\\n    uint256 reserve1Cumulative;\\n  }\\n\\n  /// @notice Returns the decimal (dec), reserves (r), stable (st), and tokens (t) of token0 and token1\\n  function metadata()\\n    external\\n    view\\n    returns (uint256 dec0, uint256 dec1, uint256 r0, uint256 r1, bool st, address t0, address t1);\\n\\n  /// @notice Claim accumulated but unclaimed fees (claimable0 and claimable1)\\n  function claimFees() external returns (uint256, uint256);\\n\\n  /// @notice Returns [token0, token1]\\n  function tokens() external view returns (address, address);\\n\\n  /// @notice Address of token in the pool with the lower address value\\n  function token0() external view returns (address);\\n\\n  /// @notice Address of token in the poool with the higher address value\\n  function token1() external view returns (address);\\n\\n  /// @notice Address of linked PoolFees.sol\\n  function poolFees() external view returns (address);\\n\\n  /// @notice Address of PoolFactory that created this contract\\n  function factory() external view returns (address);\\n\\n  /// @notice Capture oracle reading every 30 minutes (1800 seconds)\\n  function periodSize() external view returns (uint256);\\n\\n  /// @notice Amount of token0 in pool\\n  function reserve0() external view returns (uint256);\\n\\n  /// @notice Amount of token1 in pool\\n  function reserve1() external view returns (uint256);\\n\\n  /// @notice Timestamp of last update to pool\\n  function blockTimestampLast() external view returns (uint256);\\n\\n  /// @notice Cumulative of reserve0 factoring in time elapsed\\n  function reserve0CumulativeLast() external view returns (uint256);\\n\\n  /// @notice Cumulative of reserve1 factoring in time elapsed\\n  function reserve1CumulativeLast() external view returns (uint256);\\n\\n  /// @notice Accumulated fees of token0 (global)\\n  function index0() external view returns (uint256);\\n\\n  /// @notice Accumulated fees of token1 (global)\\n  function index1() external view returns (uint256);\\n\\n  /// @notice Get an LP's relative index0 to index0\\n  function supplyIndex0(address) external view returns (uint256);\\n\\n  /// @notice Get an LP's relative index1 to index1\\n  function supplyIndex1(address) external view returns (uint256);\\n\\n  /// @notice Amount of unclaimed, but claimable tokens from fees of token0 for an LP\\n  function claimable0(address) external view returns (uint256);\\n\\n  /// @notice Amount of unclaimed, but claimable tokens from fees of token1 for an LP\\n  function claimable1(address) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  /// @notice Returns the value of K in the Pool, based on its reserves.\\n  function getK() external returns (uint256);\\n\\n  /// @notice Set pool name\\n  ///         Only callable by Voter.emergencyCouncil()\\n  /// @param __name String of new name\\n  function setName(string calldata __name) external;\\n\\n  /// @notice Set pool symbol\\n  ///         Only callable by Voter.emergencyCouncil()\\n  /// @param __symbol String of new symbol\\n  function setSymbol(string calldata __symbol) external;\\n\\n  /// @notice Get the number of observations recorded\\n  function observationLength() external view returns (uint256);\\n\\n  /// @notice Get the value of the most recent observation\\n  function lastObservation() external view returns (Observation memory);\\n\\n  /// @notice True if pool is stable, false if volatile\\n  function stable() external view returns (bool);\\n\\n  /// @notice Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n  function currentCumulativePrices()\\n    external\\n    view\\n    returns (uint256 reserve0Cumulative, uint256 reserve1Cumulative, uint256 blockTimestamp);\\n\\n  /// @notice Provides twap price with user configured granularity, up to the full window size\\n  /// @param tokenIn .\\n  /// @param amountIn .\\n  /// @param granularity .\\n  /// @return amountOut .\\n  function quote(address tokenIn, uint256 amountIn, uint256 granularity) external view returns (uint256 amountOut);\\n\\n  /// @notice Returns a memory set of TWAP prices\\n  ///         Same as calling sample(tokenIn, amountIn, points, 1)\\n  /// @param tokenIn .\\n  /// @param amountIn .\\n  /// @param points Number of points to return\\n  /// @return Array of TWAP prices\\n  function prices(address tokenIn, uint256 amountIn, uint256 points) external view returns (uint256[] memory);\\n\\n  /// @notice Same as prices with with an additional window argument.\\n  ///         Window = 2 means 2 * 30min (or 1 hr) between observations\\n  /// @param tokenIn .\\n  /// @param amountIn .\\n  /// @param points .\\n  /// @param window .\\n  /// @return Array of TWAP prices\\n  function sample(\\n    address tokenIn,\\n    uint256 amountIn,\\n    uint256 points,\\n    uint256 window\\n  ) external view returns (uint256[] memory);\\n\\n  /// @notice This low-level function should be called from a contract which performs important safety checks\\n  /// @param amount0Out   Amount of token0 to send to `to`\\n  /// @param amount1Out   Amount of token1 to send to `to`\\n  /// @param to           Address to recieve the swapped output\\n  /// @param data         Additional calldata for flashloans\\n  function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n  /// @notice This low-level function should be called from a contract which performs important safety checks\\n  ///         standard uniswap v2 implementation\\n  /// @param to Address to receive token0 and token1 from burning the pool token\\n  /// @return amount0 Amount of token0 returned\\n  /// @return amount1 Amount of token1 returned\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  /// @notice This low-level function should be called by addLiquidity functions in Router.sol, which performs important\\n  /// safety checks\\n  ///         standard uniswap v2 implementation\\n  /// @param to           Address to receive the minted LP token\\n  /// @return liquidity   Amount of LP token minted\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  /// @notice Update reserves and, on the first call per block, price accumulators\\n  /// @return _reserve0 .\\n  /// @return _reserve1 .\\n  /// @return _blockTimestampLast .\\n  function getReserves() external view returns (uint256 _reserve0, uint256 _reserve1, uint256 _blockTimestampLast);\\n\\n  /// @notice Get the amount of tokenOut given the amount of tokenIn\\n  /// @param amountIn Amount of token in\\n  /// @param tokenIn  Address of token\\n  /// @return Amount out\\n  function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\n\\n  /// @notice Force balances to match reserves\\n  /// @param to Address to receive any skimmed rewards\\n  function skim(address to) external;\\n\\n  /// @notice Force reserves to match balances\\n  function sync() external;\\n\\n  /// @notice Called on pool creation by PoolFactory\\n  /// @param _token0 Address of token0\\n  /// @param _token1 Address of token1\\n  /// @param _stable True if stable, false if volatile\\n  function initialize(address _token0, address _token1, bool _stable) external;\\n}\\n\",\"keccak256\":\"0x33a1b19179d400dccc2a645dfd347d79de77e1a3d8a94bc8c9963a2292d57455\",\"license\":\"GPL-3.0\"},\"contracts/periphery/oracles/AerodromeLPOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IAggregatorV3Interface} from \\\"../../interfaces/governance/IAggregatorV3Interface.sol\\\";\\nimport {IAerodromePool} from \\\"../../interfaces/periphery/dex/IAerodromePool.sol\\\";\\n\\n/// @title AerodromeLPOracle\\n/// @author maha.xyz\\n/// @notice A contract that returns a price of an LP token on Aerdrome.\\n/// @dev Reference from\\n/// https://github.com/AlphaFinanceLab/alpha-homora-v2-contract/blob/master/contracts/oracle/UniswapV2Oracle.sol\\ncontract AerodromeLPOracle is IAggregatorV3Interface {\\n  uint8 public immutable decimals = 18;\\n\\n  IAerodromePool public immutable pool;\\n  IAggregatorV3Interface public immutable tokenAPriceFeed;\\n  IAggregatorV3Interface public immutable tokenBPriceFeed;\\n\\n  bool internal immutable stable;\\n  uint256 internal immutable decimals0;\\n  uint256 internal immutable decimals1;\\n\\n  constructor(address _tokenAPriceFeed, address _tokenBPriceFeed, address _pool) {\\n    tokenAPriceFeed = IAggregatorV3Interface(_tokenAPriceFeed);\\n    tokenBPriceFeed = IAggregatorV3Interface(_tokenBPriceFeed);\\n    pool = IAerodromePool(_pool);\\n    stable = pool.stable();\\n\\n    (uint256 dec0, uint256 dec1,,,,,) = pool.metadata();\\n    decimals0 = dec0;\\n    decimals1 = dec1;\\n  }\\n\\n  function description() public pure override returns (string memory) {\\n    return \\\"An oracle that prices the LP tokens of Aerodrome\\\";\\n  }\\n\\n  function getAnswer(uint256) public view override returns (int256) {\\n    return latestAnswer();\\n  }\\n\\n  function getTimestamp(uint256) public view override returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function latestAnswer() public view override returns (int256) {\\n    return int256(getPrice());\\n  }\\n\\n  function getPriceFor(uint256 amount) public view returns (int256) {\\n    return (latestAnswer() * int256(amount)) / 1e18;\\n  }\\n\\n  /// @notice Gets the price of the liquidity pool token.\\n  /// @dev This function fetches reserves from the Nile AMM and uses a pre-defined price for tokens to calculate the LP\\n  /// token price.\\n  /// @return price The price of the liquidity pool token.\\n  function getPrice() public view returns (uint256 price) {\\n    (uint256 reserve0, uint256 reserve1,) = pool.getReserves();\\n\\n    int256 px0 = tokenAPriceFeed.latestAnswer();\\n    int256 px1 = tokenBPriceFeed.latestAnswer();\\n\\n    require(px0 > 0 && px1 > 0, \\\"Invalid Price\\\");\\n\\n    uint256 sqrtK = (sqrt(_k(reserve0, reserve1)) * 1e18) / pool.totalSupply();\\n    price = (sqrtK * 2 * sqrt(uint256(px0 * px1))) / 1e2;\\n  }\\n\\n  /// @notice Computes the square root of a given number using the Babylonian method.\\n  /// @dev This function uses an iterative method to compute the square root of a number.\\n  /// @param x The number to compute the square root of.\\n  /// @return y The square root of the given number.\\n  function sqrt(uint256 x) internal pure returns (uint256 y) {\\n    if (x == 0) return 0; // Handle the edge case for 0\\n    uint256 z = (x + 1) / 2;\\n    y = x;\\n    while (z < y) {\\n      y = z;\\n      z = (x / z + z) / 2;\\n    }\\n  }\\n\\n  function _k(uint256 x, uint256 y) internal view returns (uint256) {\\n    if (stable) {\\n      uint256 _x = (x * 1e18) / decimals0;\\n      uint256 _y = (y * 1e18) / decimals1;\\n      uint256 _a = (_x * _y) / 1e18;\\n      uint256 _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n      return (_a * _b) / 1e18; // x3y+y3x >= k\\n    } else {\\n      return x * y; // xy >= k\\n    }\\n  }\\n\\n  function latestTimestamp() public view override returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  function version() public pure override returns (uint256) {\\n    return 1;\\n  }\\n\\n  function getRoundData(uint80)\\n    public\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return (0, latestAnswer(), block.timestamp, block.timestamp, 0);\\n  }\\n\\n  function latestRoundData()\\n    public\\n    view\\n    override\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\\n  {\\n    return getRoundData(0);\\n  }\\n}\\n\",\"keccak256\":\"0x89eadeee608f4d6c6354a395533e6b1a0dc6e41b50ee64cb51b25734a54f1a6a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61016060405260126080523480156200001757600080fd5b5060405162000cbd38038062000cbd8339810160408190526200003a9162000166565b6001600160a01b0380841660c05282811660e052811660a0819052604080516322be3de160e01b815290516322be3de1916004808201926020929091908290030181865afa15801562000091573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b79190620001c1565b15156101008115158152505060008060a0516001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa15801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d9190620001e6565b5050506101209390935250610140525062000257945050505050565b80516001600160a01b03811681146200016157600080fd5b919050565b6000806000606084860312156200017c57600080fd5b620001878462000149565b9250620001976020850162000149565b9150620001a76040850162000149565b90509250925092565b805180151581146200016157600080fd5b600060208284031215620001d457600080fd5b620001df82620001b0565b9392505050565b600080600080600080600060e0888a0312156200020257600080fd5b875196506020880151955060408801519450606088015193506200022960808901620001b0565b92506200023960a0890162000149565b91506200024960c0890162000149565b905092959891949750929550565b60805160a05160c05160e0516101005161012051610140516109f0620002cd600039600061069f0152600061065e0152600061063601526000818160f401526103f80152600081816101dd0152610372015260008181610138015281816102e901526104f80152600061015f01526109f06000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637f996b661161008c5780639a6fc8f5116100665780639a6fc8f51461020d578063b5ab58dc14610257578063b633620c1461026a578063feaf968c1461027d57600080fd5b80637f996b66146101d85780638205bf6a146101ff57806398d5fdca1461020557600080fd5b80634534cd9c116100c85780634534cd9c1461019357806350d25bcd146101b457806354fd4d50146101bc5780637284e416146101c357600080fd5b80630ee1232c146100ef57806316f0115b14610133578063313ce5671461015a575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101817f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161012a565b6101a66101a13660046107e8565b610285565b60405190815260200161012a565b6101a66102b3565b60016101a6565b6101cb6102c2565b60405161012a9190610801565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b426101a6565b6101a66102e2565b61022061021b36600461084f565b6105e0565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00161012a565b6101a66102653660046107e8565b610605565b6101a66102783660046107e8565b504290565b61022061060f565b6000670de0b6b3a7640000826102996102b3565b6102a39190610891565b6102ad91906108d7565b92915050565b60006102bd6102e2565b905090565b606060405180606001604052806030815260200161098b60309139905090565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103699190610905565b509150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190610933565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104789190610933565b905060008213801561048a5750600081135b6104f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420507269636500000000000000000000000000000000000000604482015260640160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190610933565b61058a6105858787610632565b61077e565b61059c90670de0b6b3a764000061094c565b6105a69190610963565b905060646105b76105858486610891565b6105c283600261094c565b6105cc919061094c565b6105d69190610963565b9550505050505090565b6000806000806000806105f16102b3565b909790965042955085945060009350915050565b60006102ad6102b3565b600080600080600061062160006105e0565b945094509450945094509091929394565b60007f00000000000000000000000000000000000000000000000000000000000000001561076d5760007f000000000000000000000000000000000000000000000000000000000000000061068f85670de0b6b3a764000061094c565b6106999190610963565b905060007f00000000000000000000000000000000000000000000000000000000000000006106d085670de0b6b3a764000061094c565b6106da9190610963565b90506000670de0b6b3a76400006106f1838561094c565b6106fb9190610963565b90506000670de0b6b3a7640000610712848061094c565b61071c9190610963565b670de0b6b3a764000061072f868061094c565b6107399190610963565b6107439190610977565b9050670de0b6b3a7640000610758828461094c565b6107629190610963565b9450505050506102ad565b610777828461094c565b9392505050565b60008160000361079057506000919050565b6000600261079f846001610977565b6107a99190610963565b90508291505b818110156107e2579050806002816107c78186610963565b6107d19190610977565b6107db9190610963565b90506107af565b50919050565b6000602082840312156107fa57600080fd5b5035919050565b600060208083528351808285015260005b8181101561082e57858101830151858201604001528201610812565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561086157600080fd5b813569ffffffffffffffffffff8116811461077757600080fd5b634e487b7160e01b600052601160045260246000fd5b80820260008212600160ff1b841416156108ad576108ad61087b565b81810583148215176102ad576102ad61087b565b634e487b7160e01b600052601260045260246000fd5b6000826108e6576108e66108c1565b600160ff1b8214600019841416156109005761090061087b565b500590565b60008060006060848603121561091a57600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561094557600080fd5b5051919050565b80820281158282048414176102ad576102ad61087b565b600082610972576109726108c1565b500490565b808201808211156102ad576102ad61087b56fe416e206f7261636c6520746861742070726963657320746865204c5020746f6b656e73206f66204165726f64726f6d65a2646970667358221220ffa6de90d8cd7cc782cf60129e08a75c0d68e2e45e5543d2c4fd7c25fe29057e64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637f996b661161008c5780639a6fc8f5116100665780639a6fc8f51461020d578063b5ab58dc14610257578063b633620c1461026a578063feaf968c1461027d57600080fd5b80637f996b66146101d85780638205bf6a146101ff57806398d5fdca1461020557600080fd5b80634534cd9c116100c85780634534cd9c1461019357806350d25bcd146101b457806354fd4d50146101bc5780637284e416146101c357600080fd5b80630ee1232c146100ef57806316f0115b14610133578063313ce5671461015a575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101817f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161012a565b6101a66101a13660046107e8565b610285565b60405190815260200161012a565b6101a66102b3565b60016101a6565b6101cb6102c2565b60405161012a9190610801565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b426101a6565b6101a66102e2565b61022061021b36600461084f565b6105e0565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00161012a565b6101a66102653660046107e8565b610605565b6101a66102783660046107e8565b504290565b61022061060f565b6000670de0b6b3a7640000826102996102b3565b6102a39190610891565b6102ad91906108d7565b92915050565b60006102bd6102e2565b905090565b606060405180606001604052806030815260200161098b60309139905090565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103699190610905565b509150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190610933565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104789190610933565b905060008213801561048a5750600081135b6104f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420507269636500000000000000000000000000000000000000604482015260640160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190610933565b61058a6105858787610632565b61077e565b61059c90670de0b6b3a764000061094c565b6105a69190610963565b905060646105b76105858486610891565b6105c283600261094c565b6105cc919061094c565b6105d69190610963565b9550505050505090565b6000806000806000806105f16102b3565b909790965042955085945060009350915050565b60006102ad6102b3565b600080600080600061062160006105e0565b945094509450945094509091929394565b60007f00000000000000000000000000000000000000000000000000000000000000001561076d5760007f000000000000000000000000000000000000000000000000000000000000000061068f85670de0b6b3a764000061094c565b6106999190610963565b905060007f00000000000000000000000000000000000000000000000000000000000000006106d085670de0b6b3a764000061094c565b6106da9190610963565b90506000670de0b6b3a76400006106f1838561094c565b6106fb9190610963565b90506000670de0b6b3a7640000610712848061094c565b61071c9190610963565b670de0b6b3a764000061072f868061094c565b6107399190610963565b6107439190610977565b9050670de0b6b3a7640000610758828461094c565b6107629190610963565b9450505050506102ad565b610777828461094c565b9392505050565b60008160000361079057506000919050565b6000600261079f846001610977565b6107a99190610963565b90508291505b818110156107e2579050806002816107c78186610963565b6107d19190610977565b6107db9190610963565b90506107af565b50919050565b6000602082840312156107fa57600080fd5b5035919050565b600060208083528351808285015260005b8181101561082e57858101830151858201604001528201610812565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561086157600080fd5b813569ffffffffffffffffffff8116811461077757600080fd5b634e487b7160e01b600052601160045260246000fd5b80820260008212600160ff1b841416156108ad576108ad61087b565b81810583148215176102ad576102ad61087b565b634e487b7160e01b600052601260045260246000fd5b6000826108e6576108e66108c1565b600160ff1b8214600019841416156109005761090061087b565b500590565b60008060006060848603121561091a57600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561094557600080fd5b5051919050565b80820281158282048414176102ad576102ad61087b565b600082610972576109726108c1565b500490565b808201808211156102ad576102ad61087b56fe416e206f7261636c6520746861742070726963657320746865204c5020746f6b656e73206f66204165726f64726f6d65a2646970667358221220ffa6de90d8cd7cc782cf60129e08a75c0d68e2e45e5543d2c4fd7c25fe29057e64736f6c63430008150033",
  "devdoc": {
    "author": "maha.xyz",
    "details": "Reference from https://github.com/AlphaFinanceLab/alpha-homora-v2-contract/blob/master/contracts/oracle/UniswapV2Oracle.sol",
    "kind": "dev",
    "methods": {
      "getPrice()": {
        "details": "This function fetches reserves from the Nile AMM and uses a pre-defined price for tokens to calculate the LP token price.",
        "returns": {
          "price": "The price of the liquidity pool token."
        }
      }
    },
    "title": "AerodromeLPOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPrice()": {
        "notice": "Gets the price of the liquidity pool token."
      }
    },
    "notice": "A contract that returns a price of an LP token on Aerdrome.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}