{
  "address": "0x04831F84dE757444fB577245faC1D1D0d7AE12eb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientOutputAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        }
      ],
      "name": "InvalidBridgeFeeShare",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchSize",
          "type": "uint256"
        }
      ],
      "name": "InvalidSweepBatchSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroOutput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedBridgeSweeper",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBridgeFeeShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBridgeFeeShare",
          "type": "uint256"
        }
      ],
      "name": "BridgeFeeShareUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sweeper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "BridgeSweeperAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destinationTarget",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeSwept",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        }
      ],
      "name": "RateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSweepBatchSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSweepBatchSize",
          "type": "uint256"
        }
      ],
      "name": "SweepBatchSizeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sweeper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeCollected",
          "type": "uint256"
        }
      ],
      "name": "SweeperBridgeFeeCollected",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXPECTED_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_BASIS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedBridgeSweepers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeDestinationDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeFeeCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeFeeShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeRouterFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeTargetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnext",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "getBridgeFeeShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_xZAI",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract IConnext",
          "name": "_connext",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_swapKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_bridgeDestinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_bridgeTargetAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sweepBatchSize",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "recoverNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sweeper",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "setAllowedBridgeSweeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweepBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newShare",
          "type": "uint256"
        }
      ],
      "name": "updateBridgeFeeShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBatchSize",
          "type": "uint256"
        }
      ],
      "name": "updateSweepBatchSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xZAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe23fa872655def7439b52ee6370a686d7cadc9e721434d7c46afda3f7a32479e",
  "receipt": {
    "to": null,
    "from": "0x1F09Ec21d7fd0A21879b919bf0f9C46e6b85CA8b",
    "contractAddress": "0x04831F84dE757444fB577245faC1D1D0d7AE12eb",
    "transactionIndex": 72,
    "gasUsed": "1564767",
    "logsBloom": "0x
    "blockHash": "0x55538ed2c6059bd7be61d44e9147f28fe5662fddc7d6a8bcea9e7d78337f3e18",
    "transactionHash": "0xe23fa872655def7439b52ee6370a686d7cadc9e721434d7c46afda3f7a32479e",
    "logs": [],
    "blockNumber": 18440725,
    "cumulativeGasUsed": "12918055",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c4fb4aaec74c18f2bebce380202e5f46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"InvalidBridgeFeeShare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"InvalidSweepBatchSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroOutput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedBridgeSweeper\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBridgeFeeShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBridgeFeeShare\",\"type\":\"uint256\"}],\"name\":\"BridgeFeeShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sweeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"BridgeSweeperAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeSwept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSweepBatchSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSweepBatchSize\",\"type\":\"uint256\"}],\"name\":\"SweepBatchSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sweeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeCollected\",\"type\":\"uint256\"}],\"name\":\"SweeperBridgeFeeCollected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXPECTED_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BASIS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedBridgeSweepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeDestinationDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFeeShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeRouterFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeTargetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getBridgeFeeShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_xZAI\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IConnext\",\"name\":\"_connext\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_swapKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_bridgeDestinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_bridgeTargetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sweepBatchSize\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recoverNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sweeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedBridgeSweeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newShare\",\"type\":\"uint256\"}],\"name\":\"updateBridgeFeeShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBatchSize\",\"type\":\"uint256\"}],\"name\":\"updateSweepBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xZAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"maha.xyz\",\"details\":\"Tokens are sent to this contract via deposit, xZAI is minted for the user,          and funds are batched and bridged down to the L1 for depositing into the maha protocol.          Any ZAI minted on the L1 will be locked in the lockbox for unwrapping at a later time with xZAI.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InsufficientOutputAmount()\":[{\"details\":\"Error when trade does not meet minimum output amount\"}],\"InvalidBridgeFeeShare(uint256)\":[{\"details\":\"Error for invalid bridge fee share configuration\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidSweepBatchSize(uint256)\":[{\"details\":\"Error for invalid sweep batch size\"}],\"InvalidZeroInput()\":[{\"details\":\"Error for 0x0 address inputs\"}],\"InvalidZeroOutput()\":[{\"details\":\"error when function returns 0 amount\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UnauthorizedBridgeSweeper()\":[{\"details\":\"Error when an unauthorized address tries to call the bridge function on the L2\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"deposit(uint256,uint256,uint256)\":{\"details\":\"This funcion allows anyone to call and deposit collateral for xZAI          ZAI will be immediately minted based on the current price          Funds will be held until sweep() is called.          User calling this function should first approve the tokens to be pulled via transferFrom\",\"params\":{\"_amountIn\":\"Amount of tokens to deposit\",\"_deadline\":\"latest timestamp to accept this transaction\",\"_minOut\":\"Minimum number of xZAI to accept to ensure slippage minimums\"},\"returns\":{\"_0\":\"uint256  Amount of xZAI minted to calling account\"}},\"getBridgeFeeShare(uint256)\":{\"params\":{\"_amountIn\":\"deposit amount in terms of ETH\"}},\"initialize(address,address,address,address,bytes32,uint32,address,address,uint256,uint256)\":{\"details\":\"All tokens are expected to have 18 decimals\",\"params\":{\"_collateralToken\":\"nextUSDC on L2\",\"_connext\":\"Connext contract\",\"_depositToken\":\"WETH on L2\",\"_swapKey\":\"Swap key for the connext contract swap from WETH to nextUSDC\",\"_xZAI\":\"L2 ZAI token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverERC20(address,uint256,address)\":{\"details\":\"Restricted to be called by the Owner only.\",\"params\":{\"_amount\":\"amount of ERC20 token\",\"_to\":\"destination address\",\"_token\":\"address of the ERC20 token\"}},\"recoverNative(uint256,address)\":{\"details\":\"Restricted to be called by the Owner only.\",\"params\":{\"_amount\":\"amount of native asset\",\"_to\":\"destination address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAllowedBridgeSweeper(address,bool)\":{\"params\":{\"_allowed\":\"bool to allow or disallow the address\",\"_sweeper\":\"Address of the proposed sweeping account\"}},\"setRate(uint256)\":{\"params\":{\"_rate\":\"The new rate for the deposit\"}},\"sweep()\":{\"details\":\"The L1 contract will unwrap, deposit in maha, and lock up the ZAI in the lockbox on L1          This function should only be callable by permissioned accounts          The caller will estimate and pay the gas for the bridge call\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBridgeFeeShare(uint256)\":{\"details\":\"This should be a permissioned call (onlyOnwer)\",\"params\":{\"_newShare\":\"new Bridge fee share in basis points where 100 basis points = 1%\"}},\"updateSweepBatchSize(uint256)\":{\"details\":\"This should be a permissioned call (onlyOwner)\",\"params\":{\"_newBatchSize\":\"new batch size for sweeping\"}}},\"stateVariables\":{\"EXPECTED_DECIMALS\":{\"details\":\"- This contract expects all tokens to have 18 decimals for pricing\"},\"FEE_BASIS\":{\"details\":\"- Fee basis point, 100 basis point = 1 %\"}},\"title\":\"L2DepositCollateral Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowedBridgeSweepers(address)\":{\"notice\":\"The mapping of allowed addresses that can trigger the bridge function\"},\"bridgeDestinationDomain()\":{\"notice\":\"The bridge destination domain - mainnet ETH connext domain\"},\"bridgeRouterFeeBps()\":{\"notice\":\"The bridge router fee basis points - 100 basis points = 1%\"},\"bridgeTargetAddress()\":{\"notice\":\"The contract address where the bridge call should be sent on mainnet ETH\"},\"collateralToken()\":{\"notice\":\"The collateral token address - this is what the deposit token will be swapped into and bridged to L1\"},\"connext()\":{\"notice\":\"The address of the main Connext contract\"},\"deposit(uint256,uint256,uint256)\":{\"notice\":\"Accepts deposit for the user in depositToken and mints xZAI\"},\"depositToken()\":{\"notice\":\"The deposit token address - this is what users will deposit to mint xZAI\"},\"getBridgeFeeShare(uint256)\":{\"notice\":\"Function returns bridge fee share for deposit\"},\"initialize(address,address,address,address,bytes32,uint32,address,address,uint256,uint256)\":{\"notice\":\"Initializes the contract with initial vars\"},\"recoverERC20(address,uint256,address)\":{\"notice\":\"Sweeps accidental ERC20 value sent to the contract\"},\"recoverNative(uint256,address)\":{\"notice\":\"Sweeps accidental ETH value sent to the contract\"},\"setAllowedBridgeSweeper(address,bool)\":{\"notice\":\"Allows the owner to set addresses that are allowed to call the bridge() function\"},\"setRate(uint256)\":{\"notice\":\"This function updates the rate for the deposit\"},\"swapKey()\":{\"notice\":\"The swap ID for the connext token swap\"},\"sweep()\":{\"notice\":\"This function will take the balance of nextUSDC in the contract and bridge it down to the L1\"},\"updateBridgeFeeShare(uint256)\":{\"notice\":\"This function updates the BridgeFeeShare for depositors (must be <= 1% i.e. 100 bps)\"},\"updateSweepBatchSize(uint256)\":{\"notice\":\"This function updates the Sweep Batch Size\"},\"xZAI()\":{\"notice\":\"The xZAI token address\"}},\"notice\":\"Allows L2 minting of xZAI tokens in exchange for deposited assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/restaking/connext/L2DepositCollateral.sol\":\"L2DepositCollateral\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/interfaces/errors/ConnextErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nlibrary ConnextErrors {\\n  /// @dev Error for 0x0 address inputs\\n  error InvalidZeroInput();\\n\\n  /// @dev error when function returns 0 amount\\n  error InvalidZeroOutput();\\n\\n  /// @dev Error when the sender is not expected\\n  error InvalidSender(address expectedSender, address actualSender);\\n\\n  /// @dev Error when the token received over the bridge is not the one expected\\n  error InvalidTokenReceived();\\n\\n  /// @dev Error for invalid bridge fee share configuration\\n  error InvalidBridgeFeeShare(uint256 bridgeFee);\\n\\n  /// @dev Error for invalid sweep batch size\\n  error InvalidSweepBatchSize(uint256 batchSize);\\n\\n  /// @dev Error when sending ETH fails\\n  error TransferFailed();\\n\\n  /// @dev Error when an unauthorized address tries to call the bridge function on the L2\\n  error UnauthorizedBridgeSweeper();\\n\\n  /// @dev Error when trade does not meet minimum output amount\\n  error InsufficientOutputAmount();\\n}\\n\",\"keccak256\":\"0xaaca6063b1f68417b56e502d1716dde0e684b459535b33d0d287f4a7d8ca4e2e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/events/ConnextEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nlibrary ConnextEvents {\\n  /// @dev Event emitted when bridge triggers mint\\n  event ZaiMinted(bytes32 transferId, uint256 amountDeposited, uint32 origin, address originSender, uint256 minted);\\n\\n  /// @dev Event emitted when a message is sent to another chain.\\n  // The chain selector of the destination chain.\\n  // The address of the receiver on the destination chain.\\n  // The exchange rate sent.\\n  // the token address used to pay CCIP fees.\\n  // The fees paid for sending the CCIP message.\\n  // The unique ID of the CCIP message.\\n  event MessageSent(\\n    bytes32 indexed messageId,\\n    uint64 indexed destinationChainSelector,\\n    address receiver,\\n    uint256 exchangeRate,\\n    address feeToken,\\n    uint256 fees\\n  );\\n\\n  event ConnextMessageSent(uint32 indexed destinationChainDomain, address receiver, uint256 exchangeRate, uint256 fees);\\n\\n  event Deposit(address indexed user, uint256 amountIn, uint256 amountOut);\\n  event BridgeSweeperAddressUpdated(address sweeper, bool allowed);\\n  event BridgeSwept(uint32 destinationDomain, address destinationTarget, address delegate, uint256 amount);\\n  event RateUpdated(uint256 newRate, uint256 oldRate);\\n  event ReceiverPriceFeedUpdated(address newReceiver, address oldReceiver);\\n  event SweeperBridgeFeeCollected(address sweeper, uint256 feeCollected);\\n  event BridgeFeeShareUpdated(uint256 oldBridgeFeeShare, uint256 newBridgeFeeShare);\\n  event SweepBatchSizeUpdated(uint256 oldSweepBatchSize, uint256 newSweepBatchSize);\\n}\\n\",\"keccak256\":\"0xff650c9cfd51b7c107cd470cbe2a9a2ce504112a3bc6fa1fe7a0275f1f56107a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/IL2Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IConnext} from \\\"./connext/IConnext.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IL2Deposit {\\n  /**\\n   * @notice  Initializes the contract with initial vars\\n   * @dev     All tokens are expected to have 18 decimals\\n   * @param   _xZAI  L2 ZAI token\\n   * @param   _depositToken  WETH on L2\\n   * @param   _collateralToken  nextUSDC on L2\\n   * @param   _connext  Connext contract\\n   * @param   _swapKey  Swap key for the connext contract swap from WETH to nextUSDC\\n   */\\n  function initialize(\\n    IERC20 _xZAI,\\n    IERC20 _depositToken,\\n    IERC20 _collateralToken,\\n    IConnext _connext,\\n    bytes32 _swapKey,\\n    uint32 _bridgeDestinationDomain,\\n    address _bridgeTargetAddress,\\n    address _owner,\\n    uint256 _rate,\\n    uint256 _sweepBatchSize\\n  ) external;\\n\\n  /**\\n   * @notice  Accepts deposit for the user in depositToken and mints xZAI\\n   * @dev     This funcion allows anyone to call and deposit collateral for xZAI\\n   *          ZAI will be immediately minted based on the current price\\n   *          Funds will be held until sweep() is called.\\n   *          User calling this function should first approve the tokens to be pulled via transferFrom\\n   * @param   _amountIn  Amount of tokens to deposit\\n   * @param   _minOut  Minimum number of xZAI to accept to ensure slippage minimums\\n   * @param   _deadline  latest timestamp to accept this transaction\\n   * @return  uint256  Amount of xZAI minted to calling account\\n   */\\n  function deposit(uint256 _amountIn, uint256 _minOut, uint256 _deadline) external returns (uint256);\\n\\n  /**\\n   * @notice Function returns bridge fee share for deposit\\n   * @param _amountIn deposit amount in terms of ETH\\n   */\\n  function getBridgeFeeShare(uint256 _amountIn) external view returns (uint256);\\n\\n  /**\\n   * @notice  This function will take the balance of nextUSDC in the contract and bridge it down to the L1\\n   * @dev     The L1 contract will unwrap, deposit in maha, and lock up the ZAI in the lockbox on L1\\n   *          This function should only be callable by permissioned accounts\\n   *          The caller will estimate and pay the gas for the bridge call\\n   */\\n  function sweep() external payable;\\n\\n  /**\\n   * @notice  Allows the owner to set addresses that are allowed to call the bridge() function\\n   * @param   _sweeper  Address of the proposed sweeping account\\n   * @param   _allowed  bool to allow or disallow the address\\n   */\\n  function setAllowedBridgeSweeper(address _sweeper, bool _allowed) external;\\n\\n  /**\\n   * @notice  Sweeps accidental ETH value sent to the contract\\n   * @dev     Restricted to be called by the Owner only.\\n   * @param   _amount  amount of native asset\\n   * @param   _to  destination address\\n   */\\n  function recoverNative(uint256 _amount, address _to) external;\\n\\n  /**\\n   * @notice  Sweeps accidental ERC20 value sent to the contract\\n   * @dev     Restricted to be called by the Owner only.\\n   * @param   _token  address of the ERC20 token\\n   * @param   _amount  amount of ERC20 token\\n   * @param   _to  destination address\\n   */\\n  function recoverERC20(address _token, uint256 _amount, address _to) external;\\n\\n  /**\\n   * @notice This function updates the rate for the deposit\\n   * @param _rate The new rate for the deposit\\n   */\\n  function setRate(uint256 _rate) external;\\n\\n  /**\\n   * @notice This function updates the BridgeFeeShare for depositors (must be <= 1% i.e. 100 bps)\\n   * @dev This should be a permissioned call (onlyOnwer)\\n   * @param _newShare new Bridge fee share in basis points where 100 basis points = 1%\\n   */\\n  function updateBridgeFeeShare(uint256 _newShare) external;\\n\\n  /**\\n   * @notice This function updates the Sweep Batch Size\\n   * @dev This should be a permissioned call (onlyOwner)\\n   * @param _newBatchSize new batch size for sweeping\\n   */\\n  function updateSweepBatchSize(uint256 _newBatchSize) external;\\n}\\n\",\"keccak256\":\"0x7c59d0d8607284d8b64c8d615167e23453b1437e3d63d2e1c3babb84e2e1fa3b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/connext/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\ninterface IConnext {\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData,\\n    uint256 _relayerFee\\n  ) external returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  // used by the smart contract to swap tokens\\n  function swapExact(\\n    bytes32 canonicalId,\\n    uint256 amountIn,\\n    address assetIn,\\n    address assetOut,\\n    uint256 minAmountOut,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x7fbcffb6a19b3e70b91e11a94daa4a0b4a83d60f5f7902ccc365305901e15a97\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/connext/IXERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IXERC20 is IERC20 {\\n  /**\\n   * @notice Emits when a lockbox is set\\n   *\\n   * @param _lockbox The address of the lockbox\\n   */\\n  event LockboxSet(address _lockbox);\\n\\n  /**\\n   * @notice Emits when a limit is set\\n   *\\n   * @param _mintingLimit The updated minting limit we are setting to the bridge\\n   * @param _burningLimit The updated burning limit we are setting to the bridge\\n   * @param _bridge The address of the bridge we are setting the limit too\\n   */\\n  event BridgeLimitsSet(uint256 _mintingLimit, uint256 _burningLimit, address indexed _bridge);\\n\\n  /**\\n   * @notice Reverts when a user with too low of a limit tries to call mint/burn\\n   */\\n  error IXERC20_NotHighEnoughLimits();\\n\\n  /**\\n   * @notice Reverts when limits are too high\\n   */\\n  error IXERC20_LimitsTooHigh();\\n\\n  /**\\n   * @notice Contains the full minting and burning data for a particular bridge\\n   *\\n   * @param minterParams The minting parameters for the bridge\\n   * @param burnerParams The burning parameters for the bridge\\n   */\\n  struct Bridge {\\n    BridgeParameters minterParams;\\n    BridgeParameters burnerParams;\\n  }\\n\\n  /**\\n   * @notice Contains the mint or burn parameters for a bridge\\n   *\\n   * @param timestamp The timestamp of the last mint/burn\\n   * @param ratePerSecond The rate per second of the bridge\\n   * @param maxLimit The max limit of the bridge\\n   * @param currentLimit The current limit of the bridge\\n   */\\n  struct BridgeParameters {\\n    uint256 timestamp;\\n    uint256 ratePerSecond;\\n    uint256 maxLimit;\\n    uint256 currentLimit;\\n  }\\n\\n  /**\\n   * @notice Sets the lockbox address\\n   *\\n   * @param _lockbox The address of the lockbox\\n   */\\n  function setLockbox(address _lockbox) external;\\n\\n  /**\\n   * @notice Updates the limits of any bridge\\n   * @dev Can only be called by the owner\\n   * @param _mintingLimit The updated minting limit we are setting to the bridge\\n   * @param _burningLimit The updated burning limit we are setting to the bridge\\n   * @param _bridge The address of the bridge we are setting the limits too\\n   */\\n  function setLimits(address _bridge, uint256 _mintingLimit, uint256 _burningLimit) external;\\n\\n  /**\\n   * @notice Returns the max limit of a minter\\n   *\\n   * @param _minter The minter we are viewing the limits of\\n   *  @return _limit The limit the minter has\\n   */\\n  function mintingMaxLimitOf(address _minter) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Returns the max limit of a bridge\\n   *\\n   * @param _bridge the bridge we are viewing the limits of\\n   * @return _limit The limit the bridge has\\n   */\\n  function burningMaxLimitOf(address _bridge) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Returns the current limit of a minter\\n   *\\n   * @param _minter The minter we are viewing the limits of\\n   * @return _limit The limit the minter has\\n   */\\n  function mintingCurrentLimitOf(address _minter) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Returns the current limit of a bridge\\n   *\\n   * @param _bridge the bridge we are viewing the limits of\\n   * @return _limit The limit the bridge has\\n   */\\n  function burningCurrentLimitOf(address _bridge) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Mints tokens for a user\\n   * @dev Can only be called by a minter\\n   * @param _user The address of the user who needs tokens minted\\n   * @param _amount The amount of tokens being minted\\n   */\\n  function mint(address _user, uint256 _amount) external;\\n\\n  /**\\n   * @notice Burns tokens for a user\\n   * @dev Can only be called by a minter\\n   * @param _user The address of the user who needs tokens burned\\n   * @param _amount The amount of tokens being burned\\n   */\\n  function burn(address _user, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x3c1fde09e5f7b0233bae1513236cb423475ecf5029f75849fd627aae72e0f884\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/connext/IXERC20Lockbox.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\ninterface IXERC20Lockbox {\\n  /**\\n   * @notice Emitted when tokens are deposited into the lockbox\\n   *\\n   * @param _sender The address of the user who deposited\\n   * @param _amount The amount of tokens deposited\\n   */\\n  event Deposit(address _sender, uint256 _amount);\\n\\n  /**\\n   * @notice Emitted when tokens are withdrawn from the lockbox\\n   *\\n   * @param _sender The address of the user who withdrew\\n   * @param _amount The amount of tokens withdrawn\\n   */\\n  event Withdraw(address _sender, uint256 _amount);\\n\\n  /**\\n   * @notice Reverts when a user tries to deposit native tokens on a non-native lockbox\\n   */\\n  error IXERC20Lockbox_NotNative();\\n\\n  /**\\n   * @notice Reverts when a user tries to deposit non-native tokens on a native lockbox\\n   */\\n  error IXERC20Lockbox_Native();\\n\\n  /**\\n   * @notice Reverts when a user tries to withdraw and the call fails\\n   */\\n  error IXERC20Lockbox_WithdrawFailed();\\n\\n  /**\\n   * @notice Deposit ERC20 tokens into the lockbox\\n   *\\n   * @param _amount The amount of tokens to deposit\\n   */\\n  function deposit(uint256 _amount) external;\\n\\n  /**\\n   * @notice Deposit ERC20 tokens into the lockbox, and send the XERC20 to a user\\n   *\\n   * @param _user The user to send the XERC20 to\\n   * @param _amount The amount of tokens to deposit\\n   */\\n  function depositTo(address _user, uint256 _amount) external;\\n\\n  /**\\n   * @notice Deposit the native asset into the lockbox, and send the XERC20 to a user\\n   *\\n   * @param _user The user to send the XERC20 to\\n   */\\n  function depositNativeTo(address _user) external payable;\\n\\n  /**\\n   * @notice Withdraw ERC20 tokens from the lockbox\\n   *\\n   * @param _amount The amount of tokens to withdraw\\n   */\\n  function withdraw(uint256 _amount) external;\\n\\n  /**\\n   * @notice Withdraw ERC20 tokens from the lockbox\\n   *\\n   * @param _user The user to withdraw to\\n   * @param _amount The amount of tokens to withdraw\\n   */\\n  function withdrawTo(address _user, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb60b9ad51fca3a8cf970e10c250ef2626f73149a6545e3771dcecf2affad5aeb\",\"license\":\"GPL-3.0\"},\"contracts/periphery/restaking/connext/L2DepositCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {ConnextErrors} from \\\"../../../interfaces/errors/ConnextErrors.sol\\\";\\nimport {ConnextEvents} from \\\"../../../interfaces/events/ConnextEvents.sol\\\";\\nimport {IConnext, IL2Deposit} from \\\"../../../interfaces/periphery/IL2Deposit.sol\\\";\\nimport {IXERC20} from \\\"../../../interfaces/periphery/connext/IXERC20.sol\\\";\\nimport {IXERC20Lockbox} from \\\"../../../interfaces/periphery/connext/IXERC20Lockbox.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @author  maha.xyz\\n * @title   L2DepositCollateral Contract\\n * @dev     Tokens are sent to this contract via deposit, xZAI is minted for the user,\\n *          and funds are batched and bridged down to the L1 for depositing into the maha protocol.\\n *          Any ZAI minted on the L1 will be locked in the lockbox for unwrapping at a later time with xZAI.\\n * @notice  Allows L2 minting of xZAI tokens in exchange for deposited assets\\n */\\ncontract L2DepositCollateral is OwnableUpgradeable, ReentrancyGuardUpgradeable, IL2Deposit {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public rate;\\n\\n  /// @notice The xZAI token address\\n  IERC20 public xZAI;\\n\\n  /// @notice The deposit token address - this is what users will deposit to mint xZAI\\n  IERC20 public depositToken;\\n\\n  /// @notice The collateral token address - this is what the deposit token will be swapped into and bridged to L1\\n  IERC20 public collateralToken;\\n\\n  /// @notice The address of the main Connext contract\\n  IConnext public connext;\\n\\n  /// @notice The swap ID for the connext token swap\\n  bytes32 public swapKey;\\n\\n  /// @notice The bridge router fee basis points - 100 basis points = 1%\\n  uint256 public bridgeRouterFeeBps;\\n\\n  /// @notice The bridge destination domain - mainnet ETH connext domain\\n  uint32 public bridgeDestinationDomain;\\n\\n  /// @notice The contract address where the bridge call should be sent on mainnet ETH\\n  address public bridgeTargetAddress;\\n\\n  /// @notice The mapping of allowed addresses that can trigger the bridge function\\n  mapping(address => bool) public allowedBridgeSweepers;\\n\\n  /// @dev - This contract expects all tokens to have 18 decimals for pricing\\n  uint8 public constant EXPECTED_DECIMALS = 18;\\n\\n  /// @dev - Fee basis point, 100 basis point = 1 %\\n  uint32 public constant FEE_BASIS = 10_000;\\n\\n  // bridge fee in basis points 100 basis points = 1%\\n  uint256 public bridgeFeeShare;\\n\\n  // Batch size for sweeping\\n  uint256 public sweepBatchSize;\\n\\n  // Total bridge fee collected for current batch\\n  uint256 public bridgeFeeCollected;\\n\\n  /// @inheritdoc IL2Deposit\\n  function initialize(\\n    IERC20 _xZAI,\\n    IERC20 _depositToken,\\n    IERC20 _collateralToken,\\n    IConnext _connext,\\n    bytes32 _swapKey,\\n    uint32 _bridgeDestinationDomain,\\n    address _bridgeTargetAddress,\\n    address _owner,\\n    uint256 _rate,\\n    uint256 _sweepBatchSize\\n  ) public initializer {\\n    // Initialize inherited classes\\n    __Ownable_init(_owner);\\n\\n    // Verify valid non zero values\\n    if (\\n      address(_xZAI) == address(0) || address(_depositToken) == address(0) || address(_collateralToken) == address(0)\\n        || address(_connext) == address(0) || _bridgeDestinationDomain == 0 || _bridgeTargetAddress == address(0)\\n    ) {\\n      revert ConnextErrors.InvalidZeroInput();\\n    }\\n\\n    xZAI = _xZAI;\\n    depositToken = _depositToken;\\n    collateralToken = _collateralToken;\\n    connext = _connext;\\n    swapKey = _swapKey;\\n    bridgeRouterFeeBps = 5;\\n    bridgeDestinationDomain = _bridgeDestinationDomain;\\n    bridgeTargetAddress = _bridgeTargetAddress;\\n    rate = _rate;\\n    bridgeFeeShare = 5;\\n    sweepBatchSize = _sweepBatchSize;\\n  }\\n\\n  /// @inheritdoc IL2Deposit\\n  function deposit(uint256 _amountIn, uint256 _minOut, uint256 _deadline) external nonReentrant returns (uint256) {\\n    if (_amountIn == 0) {\\n      revert ConnextErrors.InvalidZeroInput();\\n    }\\n    depositToken.safeTransferFrom(msg.sender, address(this), _amountIn);\\n    return _deposit(_amountIn, _minOut, _deadline);\\n  }\\n\\n  /// @inheritdoc IL2Deposit\\n  function getBridgeFeeShare(uint256 _amountIn) public view returns (uint256) {\\n    // deduct bridge Fee share\\n    if (_amountIn < sweepBatchSize) {\\n      return (_amountIn * bridgeFeeShare) / FEE_BASIS;\\n    }\\n    return (sweepBatchSize * bridgeFeeShare) / FEE_BASIS;\\n  }\\n\\n  /// @inheritdoc IL2Deposit\\n  function sweep() public payable nonReentrant {\\n    // Verify the caller is whitelisted\\n    if (!allowedBridgeSweepers[msg.sender]) {\\n      revert ConnextErrors.UnauthorizedBridgeSweeper();\\n    }\\n\\n    // Get the balance of nextUSDC in the contract\\n    uint256 balance = collateralToken.balanceOf(address(this));\\n\\n    // If there is no balance, return\\n    if (balance == 0) {\\n      revert ConnextErrors.InvalidZeroOutput();\\n    }\\n\\n    // Approve it to the connext contract\\n    collateralToken.safeIncreaseAllowance(address(connext), balance);\\n\\n    // Need to send some calldata so it triggers xReceive on the target\\n    bytes memory bridgeCallData = abi.encode(balance);\\n\\n    connext.xcall{value: msg.value}(\\n      bridgeDestinationDomain,\\n      bridgeTargetAddress,\\n      address(collateralToken),\\n      msg.sender,\\n      balance,\\n      0, // Asset is already nextUSDC, so no slippage will be incurred\\n      bridgeCallData\\n    );\\n\\n    // send collected bridge fee to owner\\n    _recoverBridgeFee();\\n\\n    // Emit the event\\n    emit ConnextEvents.BridgeSwept(bridgeDestinationDomain, bridgeTargetAddress, msg.sender, balance);\\n  }\\n\\n  /// @inheritdoc IL2Deposit\\n  function setAllowedBridgeSweeper(address _sweeper, bool _allowed) external onlyOwner {\\n    allowedBridgeSweepers[_sweeper] = _allowed;\\n    emit ConnextEvents.BridgeSweeperAddressUpdated(_sweeper, _allowed);\\n  }\\n\\n  /// @inheritdoc IL2Deposit\\n  function recoverNative(uint256 _amount, address _to) external onlyOwner {\\n    payable(_to).transfer(_amount);\\n  }\\n\\n  /// @inheritdoc IL2Deposit\\n  function recoverERC20(address _token, uint256 _amount, address _to) external onlyOwner {\\n    IERC20(_token).safeTransfer(_to, _amount);\\n  }\\n\\n  /// @inheritdoc IL2Deposit\\n  function setRate(uint256 _rate) external onlyOwner {\\n    emit ConnextEvents.RateUpdated(rate, _rate);\\n    rate = _rate;\\n  }\\n\\n  /// @inheritdoc IL2Deposit\\n  function updateBridgeFeeShare(uint256 _newShare) external onlyOwner {\\n    if (_newShare > 100) revert ConnextErrors.InvalidBridgeFeeShare(_newShare);\\n    emit ConnextEvents.BridgeFeeShareUpdated(bridgeFeeShare, _newShare);\\n    bridgeFeeShare = _newShare;\\n  }\\n\\n  /// @inheritdoc IL2Deposit\\n  function updateSweepBatchSize(uint256 _newBatchSize) external onlyOwner {\\n    if (_newBatchSize < 1e6) revert ConnextErrors.InvalidSweepBatchSize(_newBatchSize);\\n    emit ConnextEvents.SweepBatchSizeUpdated(sweepBatchSize, _newBatchSize);\\n    sweepBatchSize = _newBatchSize;\\n  }\\n\\n  /**\\n   * @notice  Internal function to trade deposit tokens for nextUSDC and mint xZAI\\n   * @dev     Deposit Tokens should be available in the contract before calling this function\\n   * @param   _amountIn  Amount of tokens deposited\\n   * @param   _minOut  Minimum number of xZAI to accept to ensure slippage minimums\\n   * @param   _deadline  latest timestamp to accept this transaction\\n   * @return  uint256  Amount of xZAI minted to calling account\\n   */\\n  function _deposit(uint256 _amountIn, uint256 _minOut, uint256 _deadline) internal returns (uint256) {\\n    // calculate bridgeFee for deposit amount\\n    uint256 bridgeFee = getBridgeFeeShare(_amountIn);\\n\\n    // subtract from _amountIn and add to bridgeFeeCollected\\n    _amountIn -= bridgeFee;\\n    bridgeFeeCollected += bridgeFee;\\n\\n    // Trade deposit tokens for nextUSDC\\n    uint256 amountOut = _trade(_amountIn, _deadline);\\n    if (amountOut == 0) {\\n      revert ConnextErrors.InvalidZeroOutput();\\n    }\\n\\n    // Calculate the amount of xZAI to mint\\n    uint256 xZAIAmount = (1e18 * amountOut) / rate;\\n\\n    // Check that the user will get the minimum amount of xZAI\\n    if (xZAIAmount < _minOut) {\\n      revert ConnextErrors.InsufficientOutputAmount();\\n    }\\n\\n    // Mint xZAI to the user\\n    IXERC20(address(xZAI)).mint(msg.sender, xZAIAmount);\\n\\n    // Emit the event and return amount minted\\n    emit ConnextEvents.Deposit(msg.sender, _amountIn, xZAIAmount);\\n    return xZAIAmount;\\n  }\\n\\n  /**\\n   * @notice  Trades deposit asset for nextUSDC\\n   * @dev     Note that min out is not enforced here since the asset will be priced to ZAI by the calling function\\n   * @param   _amountIn  Amount of deposit tokens to trade for collateral asset\\n   * @return  _deadline Deadline for the trade to prevent stale requests\\n   */\\n  function _trade(uint256 _amountIn, uint256 _deadline) internal returns (uint256) {\\n    // Approve the deposit asset to the connext contract\\n    depositToken.safeIncreaseAllowance(address(connext), _amountIn);\\n\\n    // We will accept any amount of tokens out here... The caller of this function should verify the amount meets\\n    // minimums\\n    uint256 minOut = 0;\\n\\n    // Swap the tokens\\n    uint256 amountNextUSDC =\\n      connext.swapExact(swapKey, _amountIn, address(depositToken), address(collateralToken), minOut, _deadline);\\n\\n    // Subtract the bridge router fee\\n    if (bridgeRouterFeeBps > 0) {\\n      uint256 fee = (amountNextUSDC * bridgeRouterFeeBps) / 10_000;\\n      amountNextUSDC -= fee;\\n    }\\n\\n    return amountNextUSDC;\\n  }\\n\\n  /**\\n   * @notice This function transfer the bridge fee to the owner\\n   */\\n  function _recoverBridgeFee() internal {\\n    uint256 feeCollected = bridgeFeeCollected;\\n    bridgeFeeCollected = 0;\\n    // transfer collected fee to owner\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    IERC20(address(depositToken)).safeTransfer(owner(), feeCollected);\\n    emit ConnextEvents.SweeperBridgeFeeCollected(owner(), feeCollected);\\n  }\\n}\\n\",\"keccak256\":\"0x79264d9ce9a1f704c570eba58c774ecbaf8972564f6c4d77757d4d41d522846b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b77806100206000396000f3fe6080604052600436106101b65760003560e01c80638da5cb5b116100ec578063cd3a6c1b1161008a578063de4b054811610064578063de4b0548146104dd578063e2d50bdb146104fd578063ec66b4b81461051d578063f2fde38b1461053d57600080fd5b8063cd3a6c1b14610467578063d327d91414610487578063da5feae8146104c757600080fd5b8063b4521453116100c6578063b4521453146103f4578063b51609b414610411578063c24de53414610431578063c89039c51461044757600080fd5b80638da5cb5b146103815780639c3fef2e146103be578063b2016bd4146103d457600080fd5b806334fcf437116101595780636976d357116101335780636976d3571461030b578063715018a6146103215780637f5a3b59146103365780638686ebcc1461035657600080fd5b806334fcf437146102c357806335faa416146102e357806346025067146102eb57600080fd5b806319ddc3bb1161019557806319ddc3bb146102375780631d97693914610277578063227dc0a6146102975780632c4e722e146102ad57600080fd5b8062aeef8a146101bb5780630fb5b166146101ee5780631404969814610210575b600080fd5b3480156101c757600080fd5b506101db6101d63660046117f1565b61055d565b6040519081526020015b60405180910390f35b3480156101fa57600080fd5b5061020e610209366004611842565b6105dd565b005b34801561021c57600080fd5b50610225601281565b60405160ff90911681526020016101e5565b34801561024357600080fd5b5060075461025f9064010000000090046001600160a01b031681565b6040516001600160a01b0390911681526020016101e5565b34801561028357600080fd5b5060015461025f906001600160a01b031681565b3480156102a357600080fd5b506101db60065481565b3480156102b957600080fd5b506101db60005481565b3480156102cf57600080fd5b5061020e6102de366004611872565b610620565b61020e610669565b3480156102f757600080fd5b506101db610306366004611872565b6108ec565b34801561031757600080fd5b506101db600a5481565b34801561032d57600080fd5b5061020e61092c565b34801561034257600080fd5b5061020e61035136600461188b565b61093e565b34801561036257600080fd5b5061036c61271081565b60405163ffffffff90911681526020016101e5565b34801561038d57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661025f565b3480156103ca57600080fd5b506101db60055481565b3480156103e057600080fd5b5060035461025f906001600160a01b031681565b34801561040057600080fd5b5060075461036c9063ffffffff1681565b34801561041d57600080fd5b5061020e61042c366004611945565b610c0d565b34801561043d57600080fd5b506101db60095481565b34801561045357600080fd5b5060025461025f906001600160a01b031681565b34801561047357600080fd5b5061020e610482366004611872565b610c29565b34801561049357600080fd5b506104b76104a2366004611987565b60086020526000908152604090205460ff1681565b60405190151581526020016101e5565b3480156104d357600080fd5b506101db600b5481565b3480156104e957600080fd5b5060045461025f906001600160a01b031681565b34801561050957600080fd5b5061020e610518366004611872565b610cb7565b34801561052957600080fd5b5061020e6105383660046119b2565b610d3e565b34801561054957600080fd5b5061020e610558366004611987565b610daa565b6000610567610e01565b836000036105885760405163862a606760e01b815260040160405180910390fd5b6002546105a0906001600160a01b0316333087610e64565b6105ab848484610ee6565b90506105d660017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b9392505050565b6105e5611065565b6040516001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561061b573d6000803e3d6000fd5b505050565b610628611065565b60005460408051918252602082018390527fb38780ddde1f073d91c150de2696f3f7085883648ba21cc5ef01029cb21d1916910160405180910390a1600055565b610671610e01565b3360009081526008602052604090205460ff166106ba576040517f3071e39800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074091906119e0565b90508060000361076357604051637c68a38760e11b815260040160405180910390fd5b600454600354610780916001600160a01b039182169116836110d9565b60008160405160200161079591815260200190565b60408051601f1981840301815290829052600480546007546003547f8aac16ba0000000000000000000000000000000000000000000000000000000086529395506001600160a01b0391821694638aac16ba9434946108139463ffffffff851694640100000000900481169392169133918b916000918c9101611a1d565b60206040518083038185885af1158015610831573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061085691906119e0565b5061085f61117c565b6007546040805163ffffffff831681526401000000009092046001600160a01b031660208301523390820152606081018390527fd59481003d0f413b61453e5385db7c29ec60c845da5143bccd88741ef8fc80bb9060800160405180910390a150506108ea60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b565b6000600a5482101561091957600954612710906109099084611aa9565b6109139190611ac0565b92915050565b600954600a546127109161090991611aa9565b610934611065565b6108ea600061123d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156109895750825b905060008267ffffffffffffffff1660011480156109a65750303b155b9050811580156109b4575080155b156109eb576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610a1f57845468ff00000000000000001916680100000000000000001785555b610a28886112c6565b6001600160a01b038f161580610a4557506001600160a01b038e16155b80610a5757506001600160a01b038d16155b80610a6957506001600160a01b038c16155b80610a78575063ffffffff8a16155b80610a8a57506001600160a01b038916155b15610aa85760405163862a606760e01b815260040160405180910390fd5b8e600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508d600260006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c600360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b600460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600581905550600560068190555089600760006101000a81548163ffffffff021916908363ffffffff16021790555088600760046101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600081905550600560098190555085600a819055508315610bfc57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050505050505050565b610c15611065565b61061b6001600160a01b03841682846112d7565b610c31611065565b620f4240811015610c76576040517fe1612813000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b600a5460408051918252602082018390527f637c5126c97274794a6fea58b3806e566782fd7cce9ea7fcfce67e0ac9df5d28910160405180910390a1600a55565b610cbf611065565b6064811115610cfd576040517f587a70c800000000000000000000000000000000000000000000000000000000815260048101829052602401610c6d565b60095460408051918252602082018390527f079f42df2569d6e6cd52e9b9dbd84ad9b974146635b4ca662d5dcd8578e0e9eb910160405180910390a1600955565b610d46611065565b6001600160a01b038216600081815260086020908152604091829020805460ff19168515159081179091558251938452908301527f1b405df331b4fc1e3490c26e4d05ddb58025026dade18cbd64908bc508b9e0c891015b60405180910390a15050565b610db2611065565b6001600160a01b038116610df5576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610c6d565b610dfe8161123d565b50565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610e5e576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6040516001600160a01b038481166024830152838116604483015260648201839052610ee09186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611308565b50505050565b600080610ef2856108ec565b9050610efe8186611ae2565b945080600b6000828254610f129190611af5565b9091555060009050610f248685611384565b905080600003610f4757604051637c68a38760e11b815260040160405180910390fd5b60008054610f5d83670de0b6b3a7640000611aa9565b610f679190611ac0565b905085811015610fa3576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561100857600080fd5b505af115801561101c573d6000803e3d6000fd5b5050604080518a8152602081018590523393507f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1592500160405180910390a29695505050505050565b336110977f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146108ea576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610c6d565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116691906119e0565b9050610ee084846111778585611af5565b6114a1565b600b80546000909155466111cd6111ba7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6002546001600160a01b031690846112d7565b7fca03b891f4bea499accf537052ad4ff8b6106e2208bfb51bd3b1222d51f9c59b61121f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b604080516001600160a01b0390921682526020820185905201610d9e565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080547fffffffffffffffffffffffff000000000000000000000000000000000000000081166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6112ce61155f565b610dfe816115c6565b6040516001600160a01b0383811660248301526044820183905261061b91859182169063a9059cbb90606401610e99565b600061131d6001600160a01b038416836115ce565b905080516000141580156113425750808060200190518101906113409190611b08565b155b1561061b576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610c6d565b6004546002546000916113a4916001600160a01b039081169116856110d9565b600480546005546002546003546040517f80b297e800000000000000000000000000000000000000000000000000000000815294850192909252602484018790526001600160a01b039081166044850152908116606484015260006084840181905260a4840186905292839291909116906380b297e89060c4016020604051808303816000875af115801561143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146191906119e0565b600654909150156114995760006127106006548361147f9190611aa9565b6114899190611ac0565b90506114958183611ae2565b9150505b949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261152084826115dc565b610ee0576040516001600160a01b0384811660248301526000604483015261155591869182169063095ea7b390606401610e99565b610ee08482611308565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166108ea576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610db261155f565b60606105d683836000611684565b6000806000846001600160a01b0316846040516115f99190611b25565b6000604051808303816000865af19150503d8060008114611636576040519150601f19603f3d011682016040523d82523d6000602084013e61163b565b606091505b50915091508180156116655750805115806116655750808060200190518101906116659190611b08565b801561167b57506000856001600160a01b03163b115b95945050505050565b6060814710156116c2576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610c6d565b600080856001600160a01b031684866040516116de9190611b25565b60006040518083038185875af1925050503d806000811461171b576040519150601f19603f3d011682016040523d82523d6000602084013e611720565b606091505b509150915061173086838361173a565b9695505050505050565b60608261174f5761174a826117af565b6105d6565b815115801561176657506001600160a01b0384163b155b156117a8576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610c6d565b50806105d6565b8051156117bf5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060006060848603121561180657600080fd5b505081359360208301359350604090920135919050565b6001600160a01b0381168114610dfe57600080fd5b803561183d8161181d565b919050565b6000806040838503121561185557600080fd5b8235915060208301356118678161181d565b809150509250929050565b60006020828403121561188457600080fd5b5035919050565b6000806000806000806000806000806101408b8d0312156118ab57600080fd5b8a356118b68161181d565b995060208b01356118c68161181d565b985060408b01356118d68161181d565b975060608b01356118e68161181d565b965060808b0135955060a08b013563ffffffff8116811461190657600080fd5b945060c08b01356119168161181d565b935061192460e08c01611832565b92506101008b013591506101208b013590509295989b9194979a5092959850565b60008060006060848603121561195a57600080fd5b83356119658161181d565b925060208401359150604084013561197c8161181d565b809150509250925092565b60006020828403121561199957600080fd5b81356105d68161181d565b8015158114610dfe57600080fd5b600080604083850312156119c557600080fd5b82356119d08161181d565b91506020830135611867816119a4565b6000602082840312156119f257600080fd5b5051919050565b60005b83811015611a145781810151838201526020016119fc565b50506000910152565b63ffffffff8816815260006001600160a01b03808916602084015280881660408401528087166060840152508460808301528360a083015260e060c083015282518060e0840152610100611a7782828601602088016119f9565b80601f19601f8401168501019250505098975050505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761091357610913611a93565b600082611add57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561091357610913611a93565b8082018082111561091357610913611a93565b600060208284031215611b1a57600080fd5b81516105d6816119a4565b60008251611b378184602087016119f9565b919091019291505056fea2646970667358221220178e15d976387da821c3ef8338e5f5d2c97daceb515d16ea6393408fd38fd08364736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106101b65760003560e01c80638da5cb5b116100ec578063cd3a6c1b1161008a578063de4b054811610064578063de4b0548146104dd578063e2d50bdb146104fd578063ec66b4b81461051d578063f2fde38b1461053d57600080fd5b8063cd3a6c1b14610467578063d327d91414610487578063da5feae8146104c757600080fd5b8063b4521453116100c6578063b4521453146103f4578063b51609b414610411578063c24de53414610431578063c89039c51461044757600080fd5b80638da5cb5b146103815780639c3fef2e146103be578063b2016bd4146103d457600080fd5b806334fcf437116101595780636976d357116101335780636976d3571461030b578063715018a6146103215780637f5a3b59146103365780638686ebcc1461035657600080fd5b806334fcf437146102c357806335faa416146102e357806346025067146102eb57600080fd5b806319ddc3bb1161019557806319ddc3bb146102375780631d97693914610277578063227dc0a6146102975780632c4e722e146102ad57600080fd5b8062aeef8a146101bb5780630fb5b166146101ee5780631404969814610210575b600080fd5b3480156101c757600080fd5b506101db6101d63660046117f1565b61055d565b6040519081526020015b60405180910390f35b3480156101fa57600080fd5b5061020e610209366004611842565b6105dd565b005b34801561021c57600080fd5b50610225601281565b60405160ff90911681526020016101e5565b34801561024357600080fd5b5060075461025f9064010000000090046001600160a01b031681565b6040516001600160a01b0390911681526020016101e5565b34801561028357600080fd5b5060015461025f906001600160a01b031681565b3480156102a357600080fd5b506101db60065481565b3480156102b957600080fd5b506101db60005481565b3480156102cf57600080fd5b5061020e6102de366004611872565b610620565b61020e610669565b3480156102f757600080fd5b506101db610306366004611872565b6108ec565b34801561031757600080fd5b506101db600a5481565b34801561032d57600080fd5b5061020e61092c565b34801561034257600080fd5b5061020e61035136600461188b565b61093e565b34801561036257600080fd5b5061036c61271081565b60405163ffffffff90911681526020016101e5565b34801561038d57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661025f565b3480156103ca57600080fd5b506101db60055481565b3480156103e057600080fd5b5060035461025f906001600160a01b031681565b34801561040057600080fd5b5060075461036c9063ffffffff1681565b34801561041d57600080fd5b5061020e61042c366004611945565b610c0d565b34801561043d57600080fd5b506101db60095481565b34801561045357600080fd5b5060025461025f906001600160a01b031681565b34801561047357600080fd5b5061020e610482366004611872565b610c29565b34801561049357600080fd5b506104b76104a2366004611987565b60086020526000908152604090205460ff1681565b60405190151581526020016101e5565b3480156104d357600080fd5b506101db600b5481565b3480156104e957600080fd5b5060045461025f906001600160a01b031681565b34801561050957600080fd5b5061020e610518366004611872565b610cb7565b34801561052957600080fd5b5061020e6105383660046119b2565b610d3e565b34801561054957600080fd5b5061020e610558366004611987565b610daa565b6000610567610e01565b836000036105885760405163862a606760e01b815260040160405180910390fd5b6002546105a0906001600160a01b0316333087610e64565b6105ab848484610ee6565b90506105d660017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b9392505050565b6105e5611065565b6040516001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561061b573d6000803e3d6000fd5b505050565b610628611065565b60005460408051918252602082018390527fb38780ddde1f073d91c150de2696f3f7085883648ba21cc5ef01029cb21d1916910160405180910390a1600055565b610671610e01565b3360009081526008602052604090205460ff166106ba576040517f3071e39800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074091906119e0565b90508060000361076357604051637c68a38760e11b815260040160405180910390fd5b600454600354610780916001600160a01b039182169116836110d9565b60008160405160200161079591815260200190565b60408051601f1981840301815290829052600480546007546003547f8aac16ba0000000000000000000000000000000000000000000000000000000086529395506001600160a01b0391821694638aac16ba9434946108139463ffffffff851694640100000000900481169392169133918b916000918c9101611a1d565b60206040518083038185885af1158015610831573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061085691906119e0565b5061085f61117c565b6007546040805163ffffffff831681526401000000009092046001600160a01b031660208301523390820152606081018390527fd59481003d0f413b61453e5385db7c29ec60c845da5143bccd88741ef8fc80bb9060800160405180910390a150506108ea60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b565b6000600a5482101561091957600954612710906109099084611aa9565b6109139190611ac0565b92915050565b600954600a546127109161090991611aa9565b610934611065565b6108ea600061123d565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156109895750825b905060008267ffffffffffffffff1660011480156109a65750303b155b9050811580156109b4575080155b156109eb576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610a1f57845468ff00000000000000001916680100000000000000001785555b610a28886112c6565b6001600160a01b038f161580610a4557506001600160a01b038e16155b80610a5757506001600160a01b038d16155b80610a6957506001600160a01b038c16155b80610a78575063ffffffff8a16155b80610a8a57506001600160a01b038916155b15610aa85760405163862a606760e01b815260040160405180910390fd5b8e600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508d600260006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c600360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b600460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600581905550600560068190555089600760006101000a81548163ffffffff021916908363ffffffff16021790555088600760046101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600081905550600560098190555085600a819055508315610bfc57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050505050505050565b610c15611065565b61061b6001600160a01b03841682846112d7565b610c31611065565b620f4240811015610c76576040517fe1612813000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b600a5460408051918252602082018390527f637c5126c97274794a6fea58b3806e566782fd7cce9ea7fcfce67e0ac9df5d28910160405180910390a1600a55565b610cbf611065565b6064811115610cfd576040517f587a70c800000000000000000000000000000000000000000000000000000000815260048101829052602401610c6d565b60095460408051918252602082018390527f079f42df2569d6e6cd52e9b9dbd84ad9b974146635b4ca662d5dcd8578e0e9eb910160405180910390a1600955565b610d46611065565b6001600160a01b038216600081815260086020908152604091829020805460ff19168515159081179091558251938452908301527f1b405df331b4fc1e3490c26e4d05ddb58025026dade18cbd64908bc508b9e0c891015b60405180910390a15050565b610db2611065565b6001600160a01b038116610df5576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610c6d565b610dfe8161123d565b50565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610e5e576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6040516001600160a01b038481166024830152838116604483015260648201839052610ee09186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611308565b50505050565b600080610ef2856108ec565b9050610efe8186611ae2565b945080600b6000828254610f129190611af5565b9091555060009050610f248685611384565b905080600003610f4757604051637c68a38760e11b815260040160405180910390fd5b60008054610f5d83670de0b6b3a7640000611aa9565b610f679190611ac0565b905085811015610fa3576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561100857600080fd5b505af115801561101c573d6000803e3d6000fd5b5050604080518a8152602081018590523393507f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1592500160405180910390a29695505050505050565b336110977f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146108ea576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610c6d565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611142573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116691906119e0565b9050610ee084846111778585611af5565b6114a1565b600b80546000909155466111cd6111ba7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6002546001600160a01b031690846112d7565b7fca03b891f4bea499accf537052ad4ff8b6106e2208bfb51bd3b1222d51f9c59b61121f7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b604080516001600160a01b0390921682526020820185905201610d9e565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080547fffffffffffffffffffffffff000000000000000000000000000000000000000081166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6112ce61155f565b610dfe816115c6565b6040516001600160a01b0383811660248301526044820183905261061b91859182169063a9059cbb90606401610e99565b600061131d6001600160a01b038416836115ce565b905080516000141580156113425750808060200190518101906113409190611b08565b155b1561061b576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610c6d565b6004546002546000916113a4916001600160a01b039081169116856110d9565b600480546005546002546003546040517f80b297e800000000000000000000000000000000000000000000000000000000815294850192909252602484018790526001600160a01b039081166044850152908116606484015260006084840181905260a4840186905292839291909116906380b297e89060c4016020604051808303816000875af115801561143d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146191906119e0565b600654909150156114995760006127106006548361147f9190611aa9565b6114899190611ac0565b90506114958183611ae2565b9150505b949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261152084826115dc565b610ee0576040516001600160a01b0384811660248301526000604483015261155591869182169063095ea7b390606401610e99565b610ee08482611308565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166108ea576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610db261155f565b60606105d683836000611684565b6000806000846001600160a01b0316846040516115f99190611b25565b6000604051808303816000865af19150503d8060008114611636576040519150601f19603f3d011682016040523d82523d6000602084013e61163b565b606091505b50915091508180156116655750805115806116655750808060200190518101906116659190611b08565b801561167b57506000856001600160a01b03163b115b95945050505050565b6060814710156116c2576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610c6d565b600080856001600160a01b031684866040516116de9190611b25565b60006040518083038185875af1925050503d806000811461171b576040519150601f19603f3d011682016040523d82523d6000602084013e611720565b606091505b509150915061173086838361173a565b9695505050505050565b60608261174f5761174a826117af565b6105d6565b815115801561176657506001600160a01b0384163b155b156117a8576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610c6d565b50806105d6565b8051156117bf5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060006060848603121561180657600080fd5b505081359360208301359350604090920135919050565b6001600160a01b0381168114610dfe57600080fd5b803561183d8161181d565b919050565b6000806040838503121561185557600080fd5b8235915060208301356118678161181d565b809150509250929050565b60006020828403121561188457600080fd5b5035919050565b6000806000806000806000806000806101408b8d0312156118ab57600080fd5b8a356118b68161181d565b995060208b01356118c68161181d565b985060408b01356118d68161181d565b975060608b01356118e68161181d565b965060808b0135955060a08b013563ffffffff8116811461190657600080fd5b945060c08b01356119168161181d565b935061192460e08c01611832565b92506101008b013591506101208b013590509295989b9194979a5092959850565b60008060006060848603121561195a57600080fd5b83356119658161181d565b925060208401359150604084013561197c8161181d565b809150509250925092565b60006020828403121561199957600080fd5b81356105d68161181d565b8015158114610dfe57600080fd5b600080604083850312156119c557600080fd5b82356119d08161181d565b91506020830135611867816119a4565b6000602082840312156119f257600080fd5b5051919050565b60005b83811015611a145781810151838201526020016119fc565b50506000910152565b63ffffffff8816815260006001600160a01b03808916602084015280881660408401528087166060840152508460808301528360a083015260e060c083015282518060e0840152610100611a7782828601602088016119f9565b80601f19601f8401168501019250505098975050505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761091357610913611a93565b600082611add57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561091357610913611a93565b8082018082111561091357610913611a93565b600060208284031215611b1a57600080fd5b81516105d6816119a4565b60008251611b378184602087016119f9565b919091019291505056fea2646970667358221220178e15d976387da821c3ef8338e5f5d2c97daceb515d16ea6393408fd38fd08364736f6c63430008150033",
  "devdoc": {
    "author": "maha.xyz",
    "details": "Tokens are sent to this contract via deposit, xZAI is minted for the user,          and funds are batched and bridged down to the L1 for depositing into the maha protocol.          Any ZAI minted on the L1 will be locked in the lockbox for unwrapping at a later time with xZAI.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InsufficientOutputAmount()": [
        {
          "details": "Error when trade does not meet minimum output amount"
        }
      ],
      "InvalidBridgeFeeShare(uint256)": [
        {
          "details": "Error for invalid bridge fee share configuration"
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidSweepBatchSize(uint256)": [
        {
          "details": "Error for invalid sweep batch size"
        }
      ],
      "InvalidZeroInput()": [
        {
          "details": "Error for 0x0 address inputs"
        }
      ],
      "InvalidZeroOutput()": [
        {
          "details": "error when function returns 0 amount"
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UnauthorizedBridgeSweeper()": [
        {
          "details": "Error when an unauthorized address tries to call the bridge function on the L2"
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "deposit(uint256,uint256,uint256)": {
        "details": "This funcion allows anyone to call and deposit collateral for xZAI          ZAI will be immediately minted based on the current price          Funds will be held until sweep() is called.          User calling this function should first approve the tokens to be pulled via transferFrom",
        "params": {
          "_amountIn": "Amount of tokens to deposit",
          "_deadline": "latest timestamp to accept this transaction",
          "_minOut": "Minimum number of xZAI to accept to ensure slippage minimums"
        },
        "returns": {
          "_0": "uint256  Amount of xZAI minted to calling account"
        }
      },
      "getBridgeFeeShare(uint256)": {
        "params": {
          "_amountIn": "deposit amount in terms of ETH"
        }
      },
      "initialize(address,address,address,address,bytes32,uint32,address,address,uint256,uint256)": {
        "details": "All tokens are expected to have 18 decimals",
        "params": {
          "_collateralToken": "nextUSDC on L2",
          "_connext": "Connext contract",
          "_depositToken": "WETH on L2",
          "_swapKey": "Swap key for the connext contract swap from WETH to nextUSDC",
          "_xZAI": "L2 ZAI token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverERC20(address,uint256,address)": {
        "details": "Restricted to be called by the Owner only.",
        "params": {
          "_amount": "amount of ERC20 token",
          "_to": "destination address",
          "_token": "address of the ERC20 token"
        }
      },
      "recoverNative(uint256,address)": {
        "details": "Restricted to be called by the Owner only.",
        "params": {
          "_amount": "amount of native asset",
          "_to": "destination address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAllowedBridgeSweeper(address,bool)": {
        "params": {
          "_allowed": "bool to allow or disallow the address",
          "_sweeper": "Address of the proposed sweeping account"
        }
      },
      "setRate(uint256)": {
        "params": {
          "_rate": "The new rate for the deposit"
        }
      },
      "sweep()": {
        "details": "The L1 contract will unwrap, deposit in maha, and lock up the ZAI in the lockbox on L1          This function should only be callable by permissioned accounts          The caller will estimate and pay the gas for the bridge call"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBridgeFeeShare(uint256)": {
        "details": "This should be a permissioned call (onlyOnwer)",
        "params": {
          "_newShare": "new Bridge fee share in basis points where 100 basis points = 1%"
        }
      },
      "updateSweepBatchSize(uint256)": {
        "details": "This should be a permissioned call (onlyOwner)",
        "params": {
          "_newBatchSize": "new batch size for sweeping"
        }
      }
    },
    "stateVariables": {
      "EXPECTED_DECIMALS": {
        "details": "- This contract expects all tokens to have 18 decimals for pricing"
      },
      "FEE_BASIS": {
        "details": "- Fee basis point, 100 basis point = 1 %"
      }
    },
    "title": "L2DepositCollateral Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowedBridgeSweepers(address)": {
        "notice": "The mapping of allowed addresses that can trigger the bridge function"
      },
      "bridgeDestinationDomain()": {
        "notice": "The bridge destination domain - mainnet ETH connext domain"
      },
      "bridgeRouterFeeBps()": {
        "notice": "The bridge router fee basis points - 100 basis points = 1%"
      },
      "bridgeTargetAddress()": {
        "notice": "The contract address where the bridge call should be sent on mainnet ETH"
      },
      "collateralToken()": {
        "notice": "The collateral token address - this is what the deposit token will be swapped into and bridged to L1"
      },
      "connext()": {
        "notice": "The address of the main Connext contract"
      },
      "deposit(uint256,uint256,uint256)": {
        "notice": "Accepts deposit for the user in depositToken and mints xZAI"
      },
      "depositToken()": {
        "notice": "The deposit token address - this is what users will deposit to mint xZAI"
      },
      "getBridgeFeeShare(uint256)": {
        "notice": "Function returns bridge fee share for deposit"
      },
      "initialize(address,address,address,address,bytes32,uint32,address,address,uint256,uint256)": {
        "notice": "Initializes the contract with initial vars"
      },
      "recoverERC20(address,uint256,address)": {
        "notice": "Sweeps accidental ERC20 value sent to the contract"
      },
      "recoverNative(uint256,address)": {
        "notice": "Sweeps accidental ETH value sent to the contract"
      },
      "setAllowedBridgeSweeper(address,bool)": {
        "notice": "Allows the owner to set addresses that are allowed to call the bridge() function"
      },
      "setRate(uint256)": {
        "notice": "This function updates the rate for the deposit"
      },
      "swapKey()": {
        "notice": "The swap ID for the connext token swap"
      },
      "sweep()": {
        "notice": "This function will take the balance of nextUSDC in the contract and bridge it down to the L1"
      },
      "updateBridgeFeeShare(uint256)": {
        "notice": "This function updates the BridgeFeeShare for depositors (must be <= 1% i.e. 100 bps)"
      },
      "updateSweepBatchSize(uint256)": {
        "notice": "This function updates the Sweep Batch Size"
      },
      "xZAI()": {
        "notice": "The xZAI token address"
      }
    },
    "notice": "Allows L2 minting of xZAI tokens in exchange for deposited assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31223,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "rate",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 31227,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "xZAI",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)10535"
      },
      {
        "astId": 31231,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "depositToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)10535"
      },
      {
        "astId": 31235,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "collateralToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)10535"
      },
      {
        "astId": 31239,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "connext",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IConnext)28483"
      },
      {
        "astId": 31242,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "swapKey",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 31245,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "bridgeRouterFeeBps",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 31248,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "bridgeDestinationDomain",
        "offset": 0,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 31251,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "bridgeTargetAddress",
        "offset": 4,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 31256,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "allowedBridgeSweepers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 31266,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "bridgeFeeShare",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 31268,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "sweepBatchSize",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 31270,
        "contract": "contracts/periphery/restaking/connext/L2DepositCollateral.sol:L2DepositCollateral",
        "label": "bridgeFeeCollected",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConnext)28483": {
        "encoding": "inplace",
        "label": "contract IConnext",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)10535": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
