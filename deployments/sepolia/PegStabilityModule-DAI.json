{
  "address": "0xe0fF88fd14234Ac1AA180d1833Ab5e85E11C4909",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtCapReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotZeroValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SupplyCapReached",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newFeeDestination",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldFeeDestination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "FeeDestinationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newMintFeeBps",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newRedeemFeeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMintFeeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldRedeemFeeBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "FeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplyCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplyCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newSupplyCap",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newDebtCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldSupplyCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldDebtCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SupplyCapUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDestination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesCollected",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_zai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_supplyCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintFeeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAssetsIn",
          "type": "uint256"
        }
      ],
      "name": "mintAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountAssetsOut",
          "type": "uint256"
        }
      ],
      "name": "redeemAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweepFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "toCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "toCollateralAmountWithFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "toCollateralAmountWithFeeInverse",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_supplyCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_debtCap",
          "type": "uint256"
        }
      ],
      "name": "updateCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDestination",
          "type": "address"
        }
      ],
      "name": "updateFeeDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintFeeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "updateFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRate",
          "type": "uint256"
        }
      ],
      "name": "updateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zai",
      "outputs": [
        {
          "internalType": "contract IStablecoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x075bb71919572a62d87e75b22bad4f904d9f50065e9f8f6c6952a5ad07de2822",
  "receipt": {
    "to": null,
    "from": "0x1F09Ec21d7fd0A21879b919bf0f9C46e6b85CA8b",
    "contractAddress": "0xe0fF88fd14234Ac1AA180d1833Ab5e85E11C4909",
    "transactionIndex": 10,
    "gasUsed": "1214430",
    "logsBloom": "0x
    "blockHash": "0x3782d311ca9de405e7db709c468ebb48d7382f31b23c87cc8cfaabf8d932bddb",
    "transactionHash": "0x075bb71919572a62d87e75b22bad4f904d9f50065e9f8f6c6952a5ad07de2822",
    "logs": [],
    "blockNumber": 6410139,
    "cumulativeGasUsed": "2117915",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "bf587503504f04f1a1890cac65205583",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtCapReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZeroValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplyCapReached\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newFeeDestination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldFeeDestination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"FeeDestinationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newMintFeeBps\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newRedeemFeeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMintFeeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldRedeemFeeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newSupplyCap\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newDebtCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldSupplyCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldDebtCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SupplyCapUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supplyCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAssetsIn\",\"type\":\"uint256\"}],\"name\":\"mintAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAssetsOut\",\"type\":\"uint256\"}],\"name\":\"redeemAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"toCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"toCollateralAmountWithFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"toCollateralAmountWithFeeInverse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supplyCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtCap\",\"type\":\"uint256\"}],\"name\":\"updateCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"updateFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zai\",\"outputs\":[{\"internalType\":\"contract IStablecoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"maha.xyz\",\"details\":\"https://docs.maha.xyz/mechanics/peg-mechanics/peg-stablility-module-psm\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"FeeDestinationUpdated(address,address,address)\":{\"params\":{\"_newFeeDestination\":\"The new fee destination\",\"_oldFeeDestination\":\"The old fee destination\",\"sender\":\"The address that called the update function\"}},\"FeesUpdated(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_newMintFeeBps\":\"The new mint fee\",\"_newRedeemFeeBps\":\"The new redeem fee\",\"_oldMintFeeBps\":\"The old mint fee\",\"_oldRedeemFeeBps\":\"The old redeem fee\",\"sender\":\"The address that called the update function\"}},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Mint(address,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"amount\":\"The amount of collateral taken\",\"destination\":\"Where the minted ZAI will be sent\",\"newDebt\":\"The current new debt of the PSM module\",\"sender\":\"The address that called the mint function\",\"shares\":\"The amount of ZAI minted\",\"supplyCap\":\"The current supply cap of the PSM module\"}},\"RateUpdated(uint256,uint256,address)\":{\"details\":\"Called by the admin\",\"params\":{\"newRate\":\"The new rate of ZAI/Collateral\",\"oldRate\":\"The old rate of ZAI/Collateral\",\"sender\":\"The address that called the update function\"}},\"Redeem(address,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"amount\":\"The amount of collateral taken out\",\"destination\":\"Where the collateral will be sent\",\"newDebt\":\"The current new debt of the PSM module\",\"sender\":\"The address that called the redeem function\",\"shares\":\"The amount of ZAI burnt\",\"supplyCap\":\"The current supply cap of the PSM module\"}},\"SupplyCapUpdated(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_newDebtCap\":\"The new debt cap\",\"_newSupplyCap\":\"The new supply cap\",\"_oldDebtCap\":\"The old debt cap\",\"_oldSupplyCap\":\"The old supply cap\",\"sender\":\"The address that called the update function\"}}},\"kind\":\"dev\",\"methods\":{\"feesCollected()\":{\"returns\":{\"_0\":\"The amount of fees collected in ZAI\"}},\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_collateral\":\"The collateral token\",\"_debtCap\":\"The debt cap\",\"_feeDestination\":\"The address where fees are sent\",\"_governance\":\"Governance address\",\"_mintFeeBps\":\"The mint fee in BPS\",\"_newRate\":\"The new rate of ZAI/Collateral\",\"_redeemFeeBps\":\"The redeem fee in BPS\",\"_supplyCap\":\"The supply cap\",\"_zai\":\"The ZAI stablecoin\"}},\"mint(address,uint256)\":{\"details\":\"This contract calculates how much collateral should be taken\",\"params\":{\"destination\":\"Where the minted ZAI will be sent\",\"shares\":\"The amount of zai to mint\"}},\"mintAmountIn(uint256)\":{\"params\":{\"amountAssetsIn\":\"The amount of collateral\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(address,uint256)\":{\"details\":\"This contract calculates how much collateral should be given\",\"params\":{\"destination\":\"Where the collateral will be sent\",\"shares\":\"The amount of zai to redeem\"}},\"redeemAmountOut(uint256)\":{\"params\":{\"amountAssetsOut\":\"The amount of collateral\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"toCollateralAmount(uint256)\":{\"params\":{\"_amount\":\"The amount of ZAI\"},\"returns\":{\"_0\":\"The amount of collateral\"}},\"toCollateralAmountWithFee(uint256,uint256)\":{\"details\":\"Fee is calculated as (amount * (MAX_FEE_BPS + fee)) / MAX_FEE_BPS\",\"params\":{\"_amount\":\"The amount of ZAI\",\"_fee\":\"The fee to be charged in BPS\"}},\"toCollateralAmountWithFeeInverse(uint256,uint256)\":{\"details\":\"Fee is calculated as (amount * (MAX_FEE_BPS - fee)) / MAX_FEE_BPS\",\"params\":{\"_amount\":\"The amount of ZAI\",\"_fee\":\"The fee to be charged in BPS\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCaps(uint256,uint256)\":{\"details\":\"Only callable by the admin\",\"params\":{\"_debtCap\":\"How much debt can be held\",\"_supplyCap\":\"How much collateral can be taken\"}},\"updateFeeDestination(address)\":{\"details\":\"Only callable by the admin\",\"params\":{\"_feeDestination\":\"The new fee destination\"}},\"updateFees(uint256,uint256)\":{\"params\":{\"_mintFeeBps\":\"The new mint fee in BPS\",\"_redeemFeeBps\":\"The new redeem fee in BPS\"}},\"updateRate(uint256)\":{\"details\":\"Only callable by the admin\",\"params\":{\"_newRate\":\"The new rate of ZAI/Collateral\"}}},\"title\":\"Peg Stability Module\",\"version\":1},\"userdoc\":{\"errors\":{\"DebtCapReached()\":[{\"notice\":\"Error when debt cap is reached\"}],\"NotZeroAddress()\":[{\"notice\":\"Error when address is not set\"}],\"NotZeroValue()\":[{\"notice\":\"Error when value is zero\"}],\"SupplyCapReached()\":[{\"notice\":\"Error when supply cap is reached\"}]},\"events\":{\"FeeDestinationUpdated(address,address,address)\":{\"notice\":\"Emitted when the fee destination is updated\"},\"FeesUpdated(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Emitted when the fees are updated\"},\"Mint(address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Emitted when a user mints ZAI\"},\"RateUpdated(uint256,uint256,address)\":{\"notice\":\"Emitted when the rate is updated\"},\"Redeem(address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Emitted when a user redeems ZAI\"},\"SupplyCapUpdated(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Emitted when the supply cap is updated\"}},\"kind\":\"user\",\"methods\":{\"MAX_FEE_BPS()\":{\"notice\":\"The maximum fee that can be charged\"},\"collateral()\":{\"notice\":\"Returns the collateral token\"},\"debt()\":{\"notice\":\"Returns the current debt held in this vault\"},\"debtCap()\":{\"notice\":\"Returns the debt cap\"},\"feeDestination()\":{\"notice\":\"The address where fees are sent\"},\"feesCollected()\":{\"notice\":\"How much fees has been collected by the protocol\"},\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes the contract\"},\"mint(address,uint256)\":{\"notice\":\"Mints ZAI with collateral\"},\"mintAmountIn(uint256)\":{\"notice\":\"Calculates how much ZAI should be minted for a given amount of collateral\"},\"mintFeeBps()\":{\"notice\":\"The mint fee in BPS\"},\"rate()\":{\"notice\":\"Returns the current rate of ZAI/Collateral\"},\"redeem(address,uint256)\":{\"notice\":\"Redeems ZAI for collateral\"},\"redeemAmountOut(uint256)\":{\"notice\":\"Calculates how much ZAI should be redeemed for a given amount of collateral\"},\"redeemFeeBps()\":{\"notice\":\"The redeem fee in BPS\"},\"supplyCap()\":{\"notice\":\"Returns the supply cap\"},\"toCollateralAmount(uint256)\":{\"notice\":\"Converts ZAI amount to collateral\"},\"toCollateralAmountWithFee(uint256,uint256)\":{\"notice\":\"Converts ZAI amount to collateral with fee added\"},\"toCollateralAmountWithFeeInverse(uint256,uint256)\":{\"notice\":\"Converts ZAI amount to collateral with fee removed\"},\"updateCaps(uint256,uint256)\":{\"notice\":\"Updates the supply and debt caps\"},\"updateFeeDestination(address)\":{\"notice\":\"Updates the fee destination\"},\"updateFees(uint256,uint256)\":{\"notice\":\"Updates the mint and redeem fees\"},\"updateRate(uint256)\":{\"notice\":\"Updates the rate of ZAI/Collateral\"},\"zai()\":{\"notice\":\"Returns the Zai stablecoin\"}},\"notice\":\"Used to mint ZAI with collateral at a pre-defined rate\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/psm/PegStabilityModule.sol\":\"PegStabilityModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/core/psm/PegStabilityModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IStablecoin} from \\\"../../interfaces/IStablecoin.sol\\\";\\nimport {IPegStabilityModule} from \\\"../../interfaces/core/IPegStabilityModule.sol\\\";\\n\\nimport {PSMErrors} from \\\"../../interfaces/errors/PSMErrors.sol\\\";\\nimport {PSMEventsLib} from \\\"../../interfaces/events/PSMEventsLib.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Peg Stability Module\\n * @author maha.xyz\\n * @notice Used to mint ZAI with collateral at a pre-defined rate\\n * @dev https://docs.maha.xyz/mechanics/peg-mechanics/peg-stablility-module-psm\\n */\\ncontract PegStabilityModule is OwnableUpgradeable, ReentrancyGuardUpgradeable, IPegStabilityModule {\\n  using SafeERC20 for IERC20;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  IStablecoin public zai;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  IERC20 public collateral;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  uint256 public supplyCap;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  uint256 public debtCap;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  uint256 public debt;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  uint256 public rate;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  uint256 public mintFeeBps;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  uint256 public redeemFeeBps;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  address public feeDestination;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  uint256 public immutable MAX_FEE_BPS = 10_000;\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function initialize(\\n    address _zai,\\n    address _collateral,\\n    address _governance,\\n    uint256 _newRate,\\n    uint256 _supplyCap,\\n    uint256 _debtCap,\\n    uint256 _mintFeeBps,\\n    uint256 _redeemFeeBps,\\n    address _feeDestination\\n  ) external reinitializer(2) {\\n    zai = IStablecoin(_zai);\\n    collateral = IERC20(_collateral);\\n\\n    if (_zai == address(0) || _collateral == address(0) || _governance == address(0) || _feeDestination == address(0)) {\\n      revert PSMErrors.NotZeroAddress();\\n    }\\n\\n    if (_newRate == 0 || _supplyCap == 0 || _debtCap == 0) {\\n      revert PSMErrors.NotZeroValue();\\n    }\\n\\n    __Ownable_init(_governance);\\n    __ReentrancyGuard_init();\\n\\n    _updateFees(_mintFeeBps, _redeemFeeBps);\\n    _updateCaps(_supplyCap, _debtCap);\\n    _updateRate(_newRate);\\n    _updateFeeDestination(_feeDestination);\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function mint(address dest, uint256 shares) external nonReentrant {\\n    uint256 amount = toCollateralAmountWithFee(shares, mintFeeBps);\\n\\n    if (amount == 0) revert PSMErrors.NotZeroValue();\\n    if (shares == 0) revert PSMErrors.NotZeroValue();\\n\\n    if (collateral.balanceOf(address(this)) + amount > supplyCap) revert PSMErrors.SupplyCapReached();\\n    if (debt + shares > debtCap) revert PSMErrors.DebtCapReached();\\n\\n    collateral.safeTransferFrom(msg.sender, address(this), amount);\\n    zai.mint(dest, shares);\\n\\n    debt += shares;\\n    emit PSMEventsLib.Mint(dest, shares, amount, debt, supplyCap, msg.sender);\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function redeem(address dest, uint256 shares) external nonReentrant {\\n    uint256 amount = toCollateralAmountWithFeeInverse(shares, redeemFeeBps);\\n\\n    if (amount == 0) revert PSMErrors.NotZeroValue();\\n    if (shares == 0) revert PSMErrors.NotZeroValue();\\n\\n    zai.transferFrom(msg.sender, address(this), shares);\\n    zai.burn(address(this), shares);\\n    collateral.safeTransfer(dest, amount);\\n\\n    debt -= shares;\\n    emit PSMEventsLib.Redeem(dest, shares, amount, debt, supplyCap, msg.sender);\\n  }\\n\\n  function sweepFees() external {\\n    collateral.safeTransfer(feeDestination, feesCollected());\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function updateCaps(uint256 _supplyCap, uint256 _debtCap) external onlyOwner {\\n    _updateCaps(_supplyCap, _debtCap);\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function updateRate(uint256 _newRate) external onlyOwner {\\n    _updateRate(_newRate);\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function updateFees(uint256 _mintFeeBps, uint256 _redeemFeeBps) external onlyOwner {\\n    _updateFees(_mintFeeBps, _redeemFeeBps);\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function updateFeeDestination(address _feeDestination) external onlyOwner {\\n    _updateFeeDestination(_feeDestination);\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function toCollateralAmount(uint256 _amount) public view returns (uint256) {\\n    return (_amount * rate) / 1e18;\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function toCollateralAmountWithFee(uint256 _amount, uint256 _fee) public view returns (uint256) {\\n    return (toCollateralAmount(_amount) * (MAX_FEE_BPS + _fee)) / MAX_FEE_BPS;\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function toCollateralAmountWithFeeInverse(uint256 _amount, uint256 _fee) public view returns (uint256) {\\n    return (toCollateralAmount(_amount) * (MAX_FEE_BPS - _fee)) / MAX_FEE_BPS;\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function mintAmountIn(uint256 amountAssetsIn) external view returns (uint256 shares) {\\n    shares = (amountAssetsIn * 1e18 * MAX_FEE_BPS) / (MAX_FEE_BPS + mintFeeBps) / rate;\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function redeemAmountOut(uint256 amountAssetsOut) external view returns (uint256 shares) {\\n    shares = (amountAssetsOut * 1e18 * MAX_FEE_BPS) / (MAX_FEE_BPS - redeemFeeBps) / rate;\\n  }\\n\\n  /// @inheritdoc IPegStabilityModule\\n  function feesCollected() public view returns (uint256) {\\n    return collateral.balanceOf(address(this)) - toCollateralAmount(debt);\\n  }\\n\\n  function _updateCaps(uint256 _supplyCap, uint256 _debtCap) internal {\\n    uint256 oldSupplyCap = supplyCap;\\n    uint256 olsDebtCap = debtCap;\\n\\n    supplyCap = _supplyCap;\\n    debtCap = _debtCap;\\n\\n    emit PSMEventsLib.SupplyCapUpdated(_supplyCap, _debtCap, oldSupplyCap, olsDebtCap, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Updates the rate of ZAI/Collateral\\n   * @param _rate the new rate of ZAI/Collateral\\n   */\\n  function _updateRate(uint256 _rate) internal {\\n    uint256 oldRate = rate;\\n    rate = _rate;\\n    emit PSMEventsLib.RateUpdated(oldRate, _rate, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Updates the fee destination\\n   * @param _feeDestination the new fee destination\\n   */\\n  function _updateFeeDestination(address _feeDestination) internal {\\n    address oldFeeDestination = feeDestination;\\n    feeDestination = _feeDestination;\\n    emit PSMEventsLib.FeeDestinationUpdated(_feeDestination, oldFeeDestination, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Updates the mint and redeem fees\\n   * @param _mintFeeBps the new mint fee in BPS\\n   * @param _redeemFeeBps the new redeem fee in BPS\\n   */\\n  function _updateFees(uint256 _mintFeeBps, uint256 _redeemFeeBps) internal {\\n    uint256 oldMintFeeBps = mintFeeBps;\\n    uint256 oldRedeemFeeBps = redeemFeeBps;\\n    mintFeeBps = _mintFeeBps;\\n    redeemFeeBps = _redeemFeeBps;\\n    emit PSMEventsLib.FeesUpdated(_mintFeeBps, _redeemFeeBps, oldMintFeeBps, oldRedeemFeeBps, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0x049f17ae279c627727bdc5781caf7954402c81c48016d168b4da9613a91bb876\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStablecoin is IERC20 {\\n  /**\\n   * @notice Used to mint ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to mint to\\n   * @param _amount The amount to mint\\n   */\\n  function mint(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Role for minting/burning ZAI\\n   */\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Used to burn ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to burn from\\n   * @param _amount The amount to burn\\n   */\\n  function burn(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Grants the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to grant the role to\\n   */\\n  function grantManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Revokes the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to revoke the role from\\n   */\\n  function revokeManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Checks if an address is an approved manager\\n   * @param _account The address to check\\n   * @return what True iff the address is a manager\\n   */\\n  function isManager(address _account) external view returns (bool what);\\n}\\n\",\"keccak256\":\"0xaadb3432557810d9cddef1be599f06bba520273011d8c0a80f833082fff964f0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/core/IPegStabilityModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IStablecoin} from \\\"../IStablecoin.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title Peg Stability Module\\n * @author maha.xyz\\n * @notice Used to mint ZAI with collateral at a pre-defined rate\\n */\\ninterface IPegStabilityModule {\\n  /**\\n   * @notice Returns the Zai stablecoin\\n   */\\n  function zai() external returns (IStablecoin);\\n\\n  /**\\n   * @notice Returns the collateral token\\n   */\\n  function collateral() external returns (IERC20);\\n\\n  /**\\n   * @notice Returns the supply cap\\n   */\\n  function supplyCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the debt cap\\n   */\\n  function debtCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current debt held in this vault\\n   */\\n  function debt() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current rate of ZAI/Collateral\\n   */\\n  function rate() external returns (uint256);\\n\\n  /**\\n   * @notice The mint fee in BPS\\n   */\\n  function mintFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The address where fees are sent\\n   */\\n  function feeDestination() external returns (address);\\n\\n  /**\\n   * @notice The redeem fee in BPS\\n   */\\n  function redeemFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The maximum fee that can be charged\\n   */\\n  function MAX_FEE_BPS() external returns (uint256);\\n\\n  /**\\n   * @notice Mints ZAI with collateral\\n   * @dev This contract calculates how much collateral should be taken\\n   * @param destination Where the minted ZAI will be sent\\n   * @param shares The amount of zai to mint\\n   */\\n  function mint(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Redeems ZAI for collateral\\n   * @dev This contract calculates how much collateral should be given\\n   * @param destination Where the collateral will be sent\\n   * @param shares The amount of zai to redeem\\n   */\\n  function redeem(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Updates the supply and debt caps\\n   * @dev Only callable by the admin\\n   * @param _supplyCap How much collateral can be taken\\n   * @param _debtCap How much debt can be held\\n   */\\n  function updateCaps(uint256 _supplyCap, uint256 _debtCap) external;\\n\\n  /**\\n   * @notice Updates the rate of ZAI/Collateral\\n   * @dev Only callable by the admin\\n   * @param _newRate The new rate of ZAI/Collateral\\n   */\\n  function updateRate(uint256 _newRate) external;\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral\\n   * @param _amount The amount of ZAI\\n   * @return collateralAmount The amount of collateral\\n   */\\n  function toCollateralAmount(uint256 _amount) external view returns (uint256 collateralAmount);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee added\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS + fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFee(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee removed\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS - fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFeeInverse(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be minted for a given amount of collateral\\n   * @param amountAssetsIn The amount of collateral\\n   */\\n  function mintAmountIn(uint256 amountAssetsIn) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be redeemed for a given amount of collateral\\n   * @param amountAssetsOut The amount of collateral\\n   */\\n  function redeemAmountOut(uint256 amountAssetsOut) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice How much fees has been collected by the protocol\\n   * @return fees The amount of fees collected in ZAI\\n   */\\n  function feesCollected() external view returns (uint256 fees);\\n\\n  /**\\n   * @notice Updates the mint and redeem fees\\n   * @param _mintFeeBps The new mint fee in BPS\\n   * @param _redeemFeeBps The new redeem fee in BPS\\n   */\\n  function updateFees(uint256 _mintFeeBps, uint256 _redeemFeeBps) external;\\n\\n  /**\\n   * @notice Updates the fee destination\\n   * @param _feeDestination The new fee destination\\n   * @dev Only callable by the admin\\n   */\\n  function updateFeeDestination(address _feeDestination) external;\\n\\n  /**\\n   * @notice Initializes the contract\\n   * @param _zai The ZAI stablecoin\\n   * @param _collateral The collateral token\\n   * @param _governance Governance address\\n   * @param _newRate The new rate of ZAI/Collateral\\n   * @param _supplyCap The supply cap\\n   * @param _debtCap The debt cap\\n   * @param _mintFeeBps The mint fee in BPS\\n   * @param _redeemFeeBps The redeem fee in BPS\\n   * @param _feeDestination The address where fees are sent\\n   */\\n  function initialize(\\n    address _zai,\\n    address _collateral,\\n    address _governance,\\n    uint256 _newRate,\\n    uint256 _supplyCap,\\n    uint256 _debtCap,\\n    uint256 _mintFeeBps,\\n    uint256 _redeemFeeBps,\\n    address _feeDestination\\n  ) external;\\n}\\n\",\"keccak256\":\"0x67738e38566b982a71c6364c11176342f2a358922f165e1c68a5618ea95321a0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/errors/PSMErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title PSMErrors\\n * @author maha.xyz\\n * @notice This library defines errors for the PSM contract\\n */\\nlibrary PSMErrors {\\n  /// @notice Error when supply cap is reached\\n  error SupplyCapReached();\\n\\n  /// @notice Error when debt cap is reached\\n  error DebtCapReached();\\n\\n  /// @notice Error when address is not set\\n  error NotZeroAddress();\\n\\n  /// @notice Error when value is zero\\n  error NotZeroValue();\\n}\\n\",\"keccak256\":\"0xa36295ad9d7638133f71a42b52183fb1cceafce32acf85a16ec78aa174c4f9cd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/events/PSMEventsLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title PSMEventsLib\\n * @author maha.xyz\\n * @notice This library defines events for the PSM contract\\n */\\nlibrary PSMEventsLib {\\n  /**\\n   * @notice Emitted when a user mints ZAI\\n   * @param destination Where the minted ZAI will be sent\\n   * @param shares The amount of ZAI minted\\n   * @param amount The amount of collateral taken\\n   * @param newDebt The current new debt of the PSM module\\n   * @param supplyCap The current supply cap of the PSM module\\n   * @param sender The address that called the mint function\\n   */\\n  event Mint(\\n    address indexed destination,\\n    uint256 indexed shares,\\n    uint256 indexed amount,\\n    uint256 newDebt,\\n    uint256 supplyCap,\\n    address sender\\n  );\\n\\n  /**\\n   * @notice Emitted when the rate is updated\\n   * @dev Called by the admin\\n   * @param oldRate The old rate of ZAI/Collateral\\n   * @param newRate The new rate of ZAI/Collateral\\n   * @param sender The address that called the update function\\n   */\\n  event RateUpdated(uint256 indexed oldRate, uint256 indexed newRate, address sender);\\n\\n  /**\\n   * @notice Emitted when a user redeems ZAI\\n   * @param destination Where the collateral will be sent\\n   * @param shares The amount of ZAI burnt\\n   * @param amount The amount of collateral taken out\\n   * @param newDebt The current new debt of the PSM module\\n   * @param supplyCap The current supply cap of the PSM module\\n   * @param sender The address that called the redeem function\\n   */\\n  event Redeem(\\n    address indexed destination,\\n    uint256 indexed shares,\\n    uint256 indexed amount,\\n    uint256 newDebt,\\n    uint256 supplyCap,\\n    address sender\\n  );\\n\\n  /**\\n   * @notice Emitted when the supply cap is updated\\n   * @param _newSupplyCap The new supply cap\\n   * @param _newDebtCap The new debt cap\\n   * @param _oldSupplyCap The old supply cap\\n   * @param _oldDebtCap The old debt cap\\n   * @param sender The address that called the update function\\n   */\\n  event SupplyCapUpdated(\\n    uint256 indexed _newSupplyCap,\\n    uint256 indexed _newDebtCap,\\n    uint256 _oldSupplyCap,\\n    uint256 _oldDebtCap,\\n    address sender\\n  );\\n\\n  /**\\n   * @notice Emitted when the fees are updated\\n   * @param _newMintFeeBps The new mint fee\\n   * @param _newRedeemFeeBps The new redeem fee\\n   * @param _oldMintFeeBps The old mint fee\\n   * @param _oldRedeemFeeBps The old redeem fee\\n   * @param sender The address that called the update function\\n   */\\n  event FeesUpdated(\\n    uint256 indexed _newMintFeeBps,\\n    uint256 indexed _newRedeemFeeBps,\\n    uint256 _oldMintFeeBps,\\n    uint256 _oldRedeemFeeBps,\\n    address sender\\n  );\\n\\n  /**\\n   * @notice Emitted when the fee destination is updated\\n   * @param _newFeeDestination The new fee destination\\n   * @param _oldFeeDestination The old fee destination\\n   * @param sender The address that called the update function\\n   */\\n  event FeeDestinationUpdated(address indexed _newFeeDestination, address indexed _oldFeeDestination, address sender);\\n}\\n\",\"keccak256\":\"0x7ff5d14f35f0b9b9578ed24018401c9d8dd1dc971c8df5c6f5fb1bba504d1ec0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405261271060805234801561001657600080fd5b5060805161151c61005560003960008181610337015281816105fc0152818161062701528181610b5801528181610bb00152610ce2015261151c6000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c8063715018a6116100f9578063d55be8c611610097578063de53fcd511610071578063de53fcd51461037f578063f071db5a14610392578063f2fde38b1461039a578063f5320fd8146103ad57600080fd5b8063d55be8c614610332578063d8dfeb4514610359578063dd62aefb1461036c57600080fd5b806397c8bcc1116100d357806397c8bcc1146102fb578063a371149814610304578063bb5dc18914610317578063d113b95c1461032a57600080fd5b8063715018a6146102ba5780638da5cb5b146102c25780638f770ad0146102f257600080fd5b80632c4e722e116101665780635dc2e5d1116101405780635dc2e5d11461026e57806366bea2281461028157806369ea1771146102945780636db79437146102a757600080fd5b80632c4e722e1461024957806331486c061461025257806340c10f191461025b57600080fd5b80630eb26499116101975780630eb264991461020e5780631e9a6950146102235780631f80b95a1461023657600080fd5b806307140b34146101be57806309f6442c146101ee5780630dca59c114610205575b600080fd5b6000546101d1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f760075481565b6040519081526020016101e5565b6101f760045481565b61022161021c3660046112e6565b6103c0565b005b610221610231366004611324565b6103d6565b6101f761024436600461134e565b6105f2565b6101f760055481565b6101f760035481565b610221610269366004611324565b61067c565b61022161027c366004611367565b6108d1565b6101f761028f36600461134e565b6108e5565b6102216102a236600461134e565b6108fe565b6102216102b53660046112e6565b61090f565b610221610921565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166101d1565b6101f760025481565b6101f760065481565b610221610312366004611382565b610935565b6101f761032536600461134e565b610b4e565b610221610b81565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6001546101d1906001600160a01b031681565b6101f761037a3660046112e6565b610bac565b6008546101d1906001600160a01b031681565b6101f7610bfd565b6102216103a8366004611367565b610c85565b6101f76103bb3660046112e6565b610cde565b6103c8610d0b565b6103d28282610d7f565b5050565b6103de610ddf565b60006103ec82600754610cde565b90508060000361040f57604051633fad6f3960e11b815260040160405180910390fd5b8160000361043057604051633fad6f3960e11b815260040160405180910390fd5b6000546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190611407565b506000546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152306004820152602481018490526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561052a57600080fd5b505af115801561053e573d6000803e3d6000fd5b505060015461055a92506001600160a01b031690508483610e42565b816004600082825461056c919061143f565b90915550506004546002546040805192835260208301919091523390820152819083906001600160a01b038616907f936e31ed75b936652e58e831fe69a161b06bc628b8b02e9dc63bc89fe578a6e1906060015b60405180910390a4506103d260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b60006005546006547f00000000000000000000000000000000000000000000000000000000000000006106259190611452565b7f000000000000000000000000000000000000000000000000000000000000000061065885670de0b6b3a7640000611465565b6106629190611465565b61066c919061147c565b610676919061147c565b92915050565b610684610ddf565b600061069282600654610bac565b9050806000036106b557604051633fad6f3960e11b815260040160405180910390fd5b816000036106d657604051633fad6f3960e11b815260040160405180910390fd5b6002546001546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610745919061149e565b61074f9190611452565b1115610787576040517fa9b65aba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600354826004546107989190611452565b11156107d0576040517f3b60212900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546107e8906001600160a01b0316333084610ee1565b6000546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b5050505081600460008282546108799190611452565b90915550506004546002546040805192835260208301919091523390820152819083906001600160a01b038616907f265ee4cff6cdf714e68c02e61a7864cf66bc04e372a41b6cc425acbb737cd395906060016105c0565b6108d9610d0b565b6108e281610f20565b50565b6000670de0b6b3a76400006005548361066c9190611465565b610906610d0b565b6108e281610f89565b610917610d0b565b6103d28282610fc5565b610929610d0b565b610933600061101b565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0080546002919068010000000000000000900460ff16806109845750805467ffffffffffffffff808416911610155b156109bb576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805468ffffffffffffffffff191667ffffffffffffffff83161768010000000000000000178155600080546001600160a01b03808e1673ffffffffffffffffffffffffffffffffffffffff19928316811790935560018054918e16919092161790551580610a3057506001600160a01b038a16155b80610a4257506001600160a01b038916155b80610a5457506001600160a01b038316155b15610a8b576040517f66385fa300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b871580610a96575086155b80610a9f575085155b15610abd57604051633fad6f3960e11b815260040160405180910390fd5b610ac689611099565b610ace6110aa565b610ad88585610fc5565b610ae28787610d7f565b610aeb88610f89565b610af483610f20565b805468ff00000000000000001916815560405167ffffffffffffffff831681527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15050505050505050505050565b60006005546007547f0000000000000000000000000000000000000000000000000000000000000000610625919061143f565b600854610933906001600160a01b0316610b99610bfd565b6001546001600160a01b03169190610e42565b60007f0000000000000000000000000000000000000000000000000000000000000000610bd98382611452565b610be2856108e5565b610bec9190611465565b610bf6919061147c565b9392505050565b6000610c0a6004546108e5565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c76919061149e565b610c80919061143f565b905090565b610c8d610d0b565b6001600160a01b038116610cd5576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6108e28161101b565b60007f0000000000000000000000000000000000000000000000000000000000000000610bd9838261143f565b33610d3d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610933576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610ccc565b60028054600380549285905583905560408051828152602081018490523391810191909152909190839085907fae75d5c2e3024e6e661c4709fec706270aa58d8eb07547e3d6fc4ba44b76ab23906060015b60405180910390a350505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610e3c576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6040516001600160a01b03838116602483015260448201839052610eb691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110ba565b505050565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6040516001600160a01b038481166024830152838116604483015260648201839052610f1a9186918216906323b872dd90608401610e6f565b50505050565b600880546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff198316811790935560405133815291169182917f77152a8590285dd4dae2386ed85a5514f2a5fd13ae6969df03169aea7ebb88a8906020015b60405180910390a35050565b6005805490829055604051338152829082907f7a285533a6415d496859eec7fa426d85c813c8ed12602b764e6f47e97dfa42a290602001610f7d565b60068054600780549285905583905560408051828152602081018490523391810191909152909190839085907f040ad6c94afb3c31033baf750e5271ef1190b75380494159c0be334e92c069c790606001610dd1565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6110a1611136565b6108e28161119d565b6110b2611136565b6109336111a5565b60006110cf6001600160a01b038416836111ad565b905080516000141580156110f45750808060200190518101906110f29190611407565b155b15610eb6576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610ccc565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16610933576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c8d611136565b610ebb611136565b6060610bf68383600084600080856001600160a01b031684866040516111d391906114b7565b60006040518083038185875af1925050503d8060008114611210576040519150601f19603f3d011682016040523d82523d6000602084013e611215565b606091505b509150915061122586838361122f565b9695505050505050565b6060826112445761123f826112a4565b610bf6565b815115801561125b57506001600160a01b0384163b155b1561129d576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610ccc565b5080610bf6565b8051156112b45780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080604083850312156112f957600080fd5b50508035926020909101359150565b80356001600160a01b038116811461131f57600080fd5b919050565b6000806040838503121561133757600080fd5b61134083611308565b946020939093013593505050565b60006020828403121561136057600080fd5b5035919050565b60006020828403121561137957600080fd5b610bf682611308565b60008060008060008060008060006101208a8c0312156113a157600080fd5b6113aa8a611308565b98506113b860208b01611308565b97506113c660408b01611308565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013591506113f86101008b01611308565b90509295985092959850929598565b60006020828403121561141957600080fd5b81518015158114610bf657600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561067657610676611429565b8082018082111561067657610676611429565b808202811582820484141761067657610676611429565b60008261149957634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156114b057600080fd5b5051919050565b6000825160005b818110156114d857602081860181015185830152016114be565b50600092019182525091905056fea2646970667358221220c99fbe758c38cb316d01cfe41459e2b2c129290b08b2e78b4e10dc518e400c2864736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c8063715018a6116100f9578063d55be8c611610097578063de53fcd511610071578063de53fcd51461037f578063f071db5a14610392578063f2fde38b1461039a578063f5320fd8146103ad57600080fd5b8063d55be8c614610332578063d8dfeb4514610359578063dd62aefb1461036c57600080fd5b806397c8bcc1116100d357806397c8bcc1146102fb578063a371149814610304578063bb5dc18914610317578063d113b95c1461032a57600080fd5b8063715018a6146102ba5780638da5cb5b146102c25780638f770ad0146102f257600080fd5b80632c4e722e116101665780635dc2e5d1116101405780635dc2e5d11461026e57806366bea2281461028157806369ea1771146102945780636db79437146102a757600080fd5b80632c4e722e1461024957806331486c061461025257806340c10f191461025b57600080fd5b80630eb26499116101975780630eb264991461020e5780631e9a6950146102235780631f80b95a1461023657600080fd5b806307140b34146101be57806309f6442c146101ee5780630dca59c114610205575b600080fd5b6000546101d1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101f760075481565b6040519081526020016101e5565b6101f760045481565b61022161021c3660046112e6565b6103c0565b005b610221610231366004611324565b6103d6565b6101f761024436600461134e565b6105f2565b6101f760055481565b6101f760035481565b610221610269366004611324565b61067c565b61022161027c366004611367565b6108d1565b6101f761028f36600461134e565b6108e5565b6102216102a236600461134e565b6108fe565b6102216102b53660046112e6565b61090f565b610221610921565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166101d1565b6101f760025481565b6101f760065481565b610221610312366004611382565b610935565b6101f761032536600461134e565b610b4e565b610221610b81565b6101f77f000000000000000000000000000000000000000000000000000000000000000081565b6001546101d1906001600160a01b031681565b6101f761037a3660046112e6565b610bac565b6008546101d1906001600160a01b031681565b6101f7610bfd565b6102216103a8366004611367565b610c85565b6101f76103bb3660046112e6565b610cde565b6103c8610d0b565b6103d28282610d7f565b5050565b6103de610ddf565b60006103ec82600754610cde565b90508060000361040f57604051633fad6f3960e11b815260040160405180910390fd5b8160000361043057604051633fad6f3960e11b815260040160405180910390fd5b6000546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190611407565b506000546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152306004820152602481018490526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561052a57600080fd5b505af115801561053e573d6000803e3d6000fd5b505060015461055a92506001600160a01b031690508483610e42565b816004600082825461056c919061143f565b90915550506004546002546040805192835260208301919091523390820152819083906001600160a01b038616907f936e31ed75b936652e58e831fe69a161b06bc628b8b02e9dc63bc89fe578a6e1906060015b60405180910390a4506103d260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b60006005546006547f00000000000000000000000000000000000000000000000000000000000000006106259190611452565b7f000000000000000000000000000000000000000000000000000000000000000061065885670de0b6b3a7640000611465565b6106629190611465565b61066c919061147c565b610676919061147c565b92915050565b610684610ddf565b600061069282600654610bac565b9050806000036106b557604051633fad6f3960e11b815260040160405180910390fd5b816000036106d657604051633fad6f3960e11b815260040160405180910390fd5b6002546001546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610745919061149e565b61074f9190611452565b1115610787576040517fa9b65aba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600354826004546107989190611452565b11156107d0576040517f3b60212900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546107e8906001600160a01b0316333084610ee1565b6000546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b5050505081600460008282546108799190611452565b90915550506004546002546040805192835260208301919091523390820152819083906001600160a01b038616907f265ee4cff6cdf714e68c02e61a7864cf66bc04e372a41b6cc425acbb737cd395906060016105c0565b6108d9610d0b565b6108e281610f20565b50565b6000670de0b6b3a76400006005548361066c9190611465565b610906610d0b565b6108e281610f89565b610917610d0b565b6103d28282610fc5565b610929610d0b565b610933600061101b565b565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0080546002919068010000000000000000900460ff16806109845750805467ffffffffffffffff808416911610155b156109bb576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805468ffffffffffffffffff191667ffffffffffffffff83161768010000000000000000178155600080546001600160a01b03808e1673ffffffffffffffffffffffffffffffffffffffff19928316811790935560018054918e16919092161790551580610a3057506001600160a01b038a16155b80610a4257506001600160a01b038916155b80610a5457506001600160a01b038316155b15610a8b576040517f66385fa300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b871580610a96575086155b80610a9f575085155b15610abd57604051633fad6f3960e11b815260040160405180910390fd5b610ac689611099565b610ace6110aa565b610ad88585610fc5565b610ae28787610d7f565b610aeb88610f89565b610af483610f20565b805468ff00000000000000001916815560405167ffffffffffffffff831681527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15050505050505050505050565b60006005546007547f0000000000000000000000000000000000000000000000000000000000000000610625919061143f565b600854610933906001600160a01b0316610b99610bfd565b6001546001600160a01b03169190610e42565b60007f0000000000000000000000000000000000000000000000000000000000000000610bd98382611452565b610be2856108e5565b610bec9190611465565b610bf6919061147c565b9392505050565b6000610c0a6004546108e5565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c76919061149e565b610c80919061143f565b905090565b610c8d610d0b565b6001600160a01b038116610cd5576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b6108e28161101b565b60007f0000000000000000000000000000000000000000000000000000000000000000610bd9838261143f565b33610d3d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610933576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610ccc565b60028054600380549285905583905560408051828152602081018490523391810191909152909190839085907fae75d5c2e3024e6e661c4709fec706270aa58d8eb07547e3d6fc4ba44b76ab23906060015b60405180910390a350505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610e3c576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6040516001600160a01b03838116602483015260448201839052610eb691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506110ba565b505050565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6040516001600160a01b038481166024830152838116604483015260648201839052610f1a9186918216906323b872dd90608401610e6f565b50505050565b600880546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff198316811790935560405133815291169182917f77152a8590285dd4dae2386ed85a5514f2a5fd13ae6969df03169aea7ebb88a8906020015b60405180910390a35050565b6005805490829055604051338152829082907f7a285533a6415d496859eec7fa426d85c813c8ed12602b764e6f47e97dfa42a290602001610f7d565b60068054600780549285905583905560408051828152602081018490523391810191909152909190839085907f040ad6c94afb3c31033baf750e5271ef1190b75380494159c0be334e92c069c790606001610dd1565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300805473ffffffffffffffffffffffffffffffffffffffff1981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6110a1611136565b6108e28161119d565b6110b2611136565b6109336111a5565b60006110cf6001600160a01b038416836111ad565b905080516000141580156110f45750808060200190518101906110f29190611407565b155b15610eb6576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610ccc565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff16610933576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c8d611136565b610ebb611136565b6060610bf68383600084600080856001600160a01b031684866040516111d391906114b7565b60006040518083038185875af1925050503d8060008114611210576040519150601f19603f3d011682016040523d82523d6000602084013e611215565b606091505b509150915061122586838361122f565b9695505050505050565b6060826112445761123f826112a4565b610bf6565b815115801561125b57506001600160a01b0384163b155b1561129d576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610ccc565b5080610bf6565b8051156112b45780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080604083850312156112f957600080fd5b50508035926020909101359150565b80356001600160a01b038116811461131f57600080fd5b919050565b6000806040838503121561133757600080fd5b61134083611308565b946020939093013593505050565b60006020828403121561136057600080fd5b5035919050565b60006020828403121561137957600080fd5b610bf682611308565b60008060008060008060008060006101208a8c0312156113a157600080fd5b6113aa8a611308565b98506113b860208b01611308565b97506113c660408b01611308565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013591506113f86101008b01611308565b90509295985092959850929598565b60006020828403121561141957600080fd5b81518015158114610bf657600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561067657610676611429565b8082018082111561067657610676611429565b808202811582820484141761067657610676611429565b60008261149957634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156114b057600080fd5b5051919050565b6000825160005b818110156114d857602081860181015185830152016114be565b50600092019182525091905056fea2646970667358221220c99fbe758c38cb316d01cfe41459e2b2c129290b08b2e78b4e10dc518e400c2864736f6c63430008150033",
  "devdoc": {
    "author": "maha.xyz",
    "details": "https://docs.maha.xyz/mechanics/peg-mechanics/peg-stablility-module-psm",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "FeeDestinationUpdated(address,address,address)": {
        "params": {
          "_newFeeDestination": "The new fee destination",
          "_oldFeeDestination": "The old fee destination",
          "sender": "The address that called the update function"
        }
      },
      "FeesUpdated(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_newMintFeeBps": "The new mint fee",
          "_newRedeemFeeBps": "The new redeem fee",
          "_oldMintFeeBps": "The old mint fee",
          "_oldRedeemFeeBps": "The old redeem fee",
          "sender": "The address that called the update function"
        }
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Mint(address,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "amount": "The amount of collateral taken",
          "destination": "Where the minted ZAI will be sent",
          "newDebt": "The current new debt of the PSM module",
          "sender": "The address that called the mint function",
          "shares": "The amount of ZAI minted",
          "supplyCap": "The current supply cap of the PSM module"
        }
      },
      "RateUpdated(uint256,uint256,address)": {
        "details": "Called by the admin",
        "params": {
          "newRate": "The new rate of ZAI/Collateral",
          "oldRate": "The old rate of ZAI/Collateral",
          "sender": "The address that called the update function"
        }
      },
      "Redeem(address,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "amount": "The amount of collateral taken out",
          "destination": "Where the collateral will be sent",
          "newDebt": "The current new debt of the PSM module",
          "sender": "The address that called the redeem function",
          "shares": "The amount of ZAI burnt",
          "supplyCap": "The current supply cap of the PSM module"
        }
      },
      "SupplyCapUpdated(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_newDebtCap": "The new debt cap",
          "_newSupplyCap": "The new supply cap",
          "_oldDebtCap": "The old debt cap",
          "_oldSupplyCap": "The old supply cap",
          "sender": "The address that called the update function"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "feesCollected()": {
        "returns": {
          "_0": "The amount of fees collected in ZAI"
        }
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_collateral": "The collateral token",
          "_debtCap": "The debt cap",
          "_feeDestination": "The address where fees are sent",
          "_governance": "Governance address",
          "_mintFeeBps": "The mint fee in BPS",
          "_newRate": "The new rate of ZAI/Collateral",
          "_redeemFeeBps": "The redeem fee in BPS",
          "_supplyCap": "The supply cap",
          "_zai": "The ZAI stablecoin"
        }
      },
      "mint(address,uint256)": {
        "details": "This contract calculates how much collateral should be taken",
        "params": {
          "destination": "Where the minted ZAI will be sent",
          "shares": "The amount of zai to mint"
        }
      },
      "mintAmountIn(uint256)": {
        "params": {
          "amountAssetsIn": "The amount of collateral"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(address,uint256)": {
        "details": "This contract calculates how much collateral should be given",
        "params": {
          "destination": "Where the collateral will be sent",
          "shares": "The amount of zai to redeem"
        }
      },
      "redeemAmountOut(uint256)": {
        "params": {
          "amountAssetsOut": "The amount of collateral"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "toCollateralAmount(uint256)": {
        "params": {
          "_amount": "The amount of ZAI"
        },
        "returns": {
          "_0": "The amount of collateral"
        }
      },
      "toCollateralAmountWithFee(uint256,uint256)": {
        "details": "Fee is calculated as (amount * (MAX_FEE_BPS + fee)) / MAX_FEE_BPS",
        "params": {
          "_amount": "The amount of ZAI",
          "_fee": "The fee to be charged in BPS"
        }
      },
      "toCollateralAmountWithFeeInverse(uint256,uint256)": {
        "details": "Fee is calculated as (amount * (MAX_FEE_BPS - fee)) / MAX_FEE_BPS",
        "params": {
          "_amount": "The amount of ZAI",
          "_fee": "The fee to be charged in BPS"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCaps(uint256,uint256)": {
        "details": "Only callable by the admin",
        "params": {
          "_debtCap": "How much debt can be held",
          "_supplyCap": "How much collateral can be taken"
        }
      },
      "updateFeeDestination(address)": {
        "details": "Only callable by the admin",
        "params": {
          "_feeDestination": "The new fee destination"
        }
      },
      "updateFees(uint256,uint256)": {
        "params": {
          "_mintFeeBps": "The new mint fee in BPS",
          "_redeemFeeBps": "The new redeem fee in BPS"
        }
      },
      "updateRate(uint256)": {
        "details": "Only callable by the admin",
        "params": {
          "_newRate": "The new rate of ZAI/Collateral"
        }
      }
    },
    "title": "Peg Stability Module",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DebtCapReached()": [
        {
          "notice": "Error when debt cap is reached"
        }
      ],
      "NotZeroAddress()": [
        {
          "notice": "Error when address is not set"
        }
      ],
      "NotZeroValue()": [
        {
          "notice": "Error when value is zero"
        }
      ],
      "SupplyCapReached()": [
        {
          "notice": "Error when supply cap is reached"
        }
      ]
    },
    "events": {
      "FeeDestinationUpdated(address,address,address)": {
        "notice": "Emitted when the fee destination is updated"
      },
      "FeesUpdated(uint256,uint256,uint256,uint256,address)": {
        "notice": "Emitted when the fees are updated"
      },
      "Mint(address,uint256,uint256,uint256,uint256,address)": {
        "notice": "Emitted when a user mints ZAI"
      },
      "RateUpdated(uint256,uint256,address)": {
        "notice": "Emitted when the rate is updated"
      },
      "Redeem(address,uint256,uint256,uint256,uint256,address)": {
        "notice": "Emitted when a user redeems ZAI"
      },
      "SupplyCapUpdated(uint256,uint256,uint256,uint256,address)": {
        "notice": "Emitted when the supply cap is updated"
      }
    },
    "kind": "user",
    "methods": {
      "MAX_FEE_BPS()": {
        "notice": "The maximum fee that can be charged"
      },
      "collateral()": {
        "notice": "Returns the collateral token"
      },
      "debt()": {
        "notice": "Returns the current debt held in this vault"
      },
      "debtCap()": {
        "notice": "Returns the debt cap"
      },
      "feeDestination()": {
        "notice": "The address where fees are sent"
      },
      "feesCollected()": {
        "notice": "How much fees has been collected by the protocol"
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,address)": {
        "notice": "Initializes the contract"
      },
      "mint(address,uint256)": {
        "notice": "Mints ZAI with collateral"
      },
      "mintAmountIn(uint256)": {
        "notice": "Calculates how much ZAI should be minted for a given amount of collateral"
      },
      "mintFeeBps()": {
        "notice": "The mint fee in BPS"
      },
      "rate()": {
        "notice": "Returns the current rate of ZAI/Collateral"
      },
      "redeem(address,uint256)": {
        "notice": "Redeems ZAI for collateral"
      },
      "redeemAmountOut(uint256)": {
        "notice": "Calculates how much ZAI should be redeemed for a given amount of collateral"
      },
      "redeemFeeBps()": {
        "notice": "The redeem fee in BPS"
      },
      "supplyCap()": {
        "notice": "Returns the supply cap"
      },
      "toCollateralAmount(uint256)": {
        "notice": "Converts ZAI amount to collateral"
      },
      "toCollateralAmountWithFee(uint256,uint256)": {
        "notice": "Converts ZAI amount to collateral with fee added"
      },
      "toCollateralAmountWithFeeInverse(uint256,uint256)": {
        "notice": "Converts ZAI amount to collateral with fee removed"
      },
      "updateCaps(uint256,uint256)": {
        "notice": "Updates the supply and debt caps"
      },
      "updateFeeDestination(address)": {
        "notice": "Updates the fee destination"
      },
      "updateFees(uint256,uint256)": {
        "notice": "Updates the mint and redeem fees"
      },
      "updateRate(uint256)": {
        "notice": "Updates the rate of ZAI/Collateral"
      },
      "zai()": {
        "notice": "Returns the Zai stablecoin"
      }
    },
    "notice": "Used to mint ZAI with collateral at a pre-defined rate",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20360,
        "contract": "contracts/core/psm/PegStabilityModule.sol:PegStabilityModule",
        "label": "zai",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IStablecoin)26477"
      },
      {
        "astId": 20364,
        "contract": "contracts/core/psm/PegStabilityModule.sol:PegStabilityModule",
        "label": "collateral",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)10366"
      },
      {
        "astId": 20367,
        "contract": "contracts/core/psm/PegStabilityModule.sol:PegStabilityModule",
        "label": "supplyCap",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 20370,
        "contract": "contracts/core/psm/PegStabilityModule.sol:PegStabilityModule",
        "label": "debtCap",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 20373,
        "contract": "contracts/core/psm/PegStabilityModule.sol:PegStabilityModule",
        "label": "debt",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 20376,
        "contract": "contracts/core/psm/PegStabilityModule.sol:PegStabilityModule",
        "label": "rate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 20379,
        "contract": "contracts/core/psm/PegStabilityModule.sol:PegStabilityModule",
        "label": "mintFeeBps",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 20382,
        "contract": "contracts/core/psm/PegStabilityModule.sol:PegStabilityModule",
        "label": "redeemFeeBps",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 20385,
        "contract": "contracts/core/psm/PegStabilityModule.sol:PegStabilityModule",
        "label": "feeDestination",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)10366": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStablecoin)26477": {
        "encoding": "inplace",
        "label": "contract IStablecoin",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}