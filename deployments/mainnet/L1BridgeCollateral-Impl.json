{
  "address": "0x43630aB966Bbd4db219f44aB9487858d08f54cb2",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expectedSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actualSender",
          "type": "address"
        }
      ],
      "name": "InvalidSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenReceived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountDeposited",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "origin",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "originSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        }
      ],
      "name": "ZaiMinted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_zai",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_xZai",
          "type": "address"
        },
        {
          "internalType": "contract IPegStabilityModule",
          "name": "_psm",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "contract IXERC20Lockbox",
          "name": "_lockbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockbox",
      "outputs": [
        {
          "internalType": "contract IXERC20Lockbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "psm",
      "outputs": [
        {
          "internalType": "contract IPegStabilityModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xZAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zai",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4170f739cf32f4ccbd2ab28266afc50523ba1148b18254af59e3a676fa60a34",
  "receipt": {
    "to": null,
    "from": "0x1F09Ec21d7fd0A21879b919bf0f9C46e6b85CA8b",
    "contractAddress": "0x43630aB966Bbd4db219f44aB9487858d08f54cb2",
    "transactionIndex": 187,
    "gasUsed": "778862",
    "logsBloom": "0x
    "blockHash": "0x03cf265b36e48655b6ee2bdb776f3e076921ca683c8cb91ef2510de118f99c08",
    "transactionHash": "0xd4170f739cf32f4ccbd2ab28266afc50523ba1148b18254af59e3a676fa60a34",
    "logs": [],
    "blockNumber": 20435781,
    "cumulativeGasUsed": "20650795",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5e5b74a0eae3989730f63272dfc04123",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualSender\",\"type\":\"address\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"name\":\"ZaiMinted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_zai\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_xZai\",\"type\":\"address\"},{\"internalType\":\"contract IPegStabilityModule\",\"name\":\"_psm\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"contract IXERC20Lockbox\",\"name\":\"_lockbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockbox\",\"outputs\":[{\"internalType\":\"contract IXERC20Lockbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psm\",\"outputs\":[{\"internalType\":\"contract IPegStabilityModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xZAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidSender(address,address)\":[{\"details\":\"Error when the sender is not expected\"}],\"InvalidTokenReceived()\":[{\"details\":\"Error when the token received over the bridge is not the one expected\"}],\"InvalidZeroInput()\":[{\"details\":\"Error for 0x0 address inputs\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"ZaiMinted(bytes32,uint256,uint32,address,uint256)\":{\"details\":\"Event emitted when bridge triggers mint\"}},\"kind\":\"dev\",\"methods\":{\"initialize(address,address,address,address,address,address)\":{\"details\":\"Initializes the contract with initial vars\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"details\":\"This function will take all collateral and deposit it into maha          The ZAI from the deposit will be sent to the lockbox to be wrapped into xZAI          The xZAI will be burned so that the xZAI on the L2 can be unwrapped for ZAI later\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collateral()\":{\"notice\":\"The wETH token address - will be sent via bridge from L2\"},\"connext()\":{\"notice\":\"The address of the main Connext contract\"},\"lockbox()\":{\"notice\":\"The lockbox contract for ZAI - minted ZAI is sent here\"},\"psm()\":{\"notice\":\"The RestakeManager contract - deposits into the protocol are restaked here\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"notice\":\"Accepts collateral from the bridge\"},\"xZAI()\":{\"notice\":\"The xZAI token address\"},\"zai()\":{\"notice\":\"The zai token address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/connext/L1BridgeCollateralConnext.sol\":\"L1BridgeCollateralConnext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/interfaces/IStablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStablecoin is IERC20 {\\n  /**\\n   * @notice Used to mint ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to mint to\\n   * @param _amount The amount to mint\\n   */\\n  function mint(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Role for minting/burning ZAI\\n   */\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Used to burn ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to burn from\\n   * @param _amount The amount to burn\\n   */\\n  function burn(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Grants the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to grant the role to\\n   */\\n  function grantManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Revokes the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to revoke the role from\\n   */\\n  function revokeManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Checks if an address is an approved manager\\n   * @param _account The address to check\\n   * @return what True iff the address is a manager\\n   */\\n  function isManager(address _account) external view returns (bool what);\\n}\\n\",\"keccak256\":\"0xaadb3432557810d9cddef1be599f06bba520273011d8c0a80f833082fff964f0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/core/IPegStabilityModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IStablecoin} from \\\"../IStablecoin.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title Peg Stability Module\\n * @author maha.xyz\\n * @notice Used to mint ZAI with collateral at a pre-defined rate\\n */\\ninterface IPegStabilityModule {\\n  /**\\n   * @notice Returns the Zai stablecoin\\n   */\\n  function zai() external returns (IStablecoin);\\n\\n  /**\\n   * @notice Returns the collateral token\\n   */\\n  function collateral() external returns (IERC20);\\n\\n  /**\\n   * @notice Returns the supply cap\\n   */\\n  function supplyCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the debt cap\\n   */\\n  function debtCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current debt held in this vault\\n   */\\n  function debt() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current rate of ZAI/Collateral\\n   */\\n  function rate() external returns (uint256);\\n\\n  /**\\n   * @notice The mint fee in BPS\\n   */\\n  function mintFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The address where fees are sent\\n   */\\n  function feeDestination() external returns (address);\\n\\n  /**\\n   * @notice The redeem fee in BPS\\n   */\\n  function redeemFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The maximum fee that can be charged\\n   */\\n  function MAX_FEE_BPS() external returns (uint256);\\n\\n  /**\\n   * @notice Mints ZAI with collateral\\n   * @dev This contract calculates how much collateral should be taken\\n   * @param destination Where the minted ZAI will be sent\\n   * @param shares The amount of zai to mint\\n   */\\n  function mint(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Redeems ZAI for collateral\\n   * @dev This contract calculates how much collateral should be given\\n   * @param destination Where the collateral will be sent\\n   * @param shares The amount of zai to redeem\\n   */\\n  function redeem(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Updates the supply and debt caps\\n   * @dev Only callable by the admin\\n   * @param _supplyCap How much collateral can be taken\\n   * @param _debtCap How much debt can be held\\n   */\\n  function updateCaps(uint256 _supplyCap, uint256 _debtCap) external;\\n\\n  /**\\n   * @notice Updates the rate of ZAI/Collateral\\n   * @dev Only callable by the admin\\n   * @param _newRate The new rate of ZAI/Collateral\\n   */\\n  function updateRate(uint256 _newRate) external;\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral\\n   * @param _amount The amount of ZAI\\n   * @return collateralAmount The amount of collateral\\n   */\\n  function toCollateralAmount(uint256 _amount) external view returns (uint256 collateralAmount);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee added\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS + fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFee(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee removed\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS - fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFeeInverse(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be minted for a given amount of collateral\\n   * @param amountAssetsIn The amount of collateral\\n   */\\n  function mintAmountIn(uint256 amountAssetsIn) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be redeemed for a given amount of collateral\\n   * @param amountAssetsOut The amount of collateral\\n   */\\n  function redeemAmountOut(uint256 amountAssetsOut) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice How much fees has been collected by the protocol\\n   * @return fees The amount of fees collected in ZAI\\n   */\\n  function feesCollected() external view returns (uint256 fees);\\n\\n  /**\\n   * @notice Updates the mint and redeem fees\\n   * @param _mintFeeBps The new mint fee in BPS\\n   * @param _redeemFeeBps The new redeem fee in BPS\\n   */\\n  function updateFees(uint256 _mintFeeBps, uint256 _redeemFeeBps) external;\\n\\n  /**\\n   * @notice Updates the fee destination\\n   * @param _feeDestination The new fee destination\\n   * @dev Only callable by the admin\\n   */\\n  function updateFeeDestination(address _feeDestination) external;\\n\\n  /**\\n   * @notice Initializes the contract\\n   * @param _zai The ZAI stablecoin\\n   * @param _collateral The collateral token\\n   * @param _governance Governance address\\n   * @param _newRate The new rate of ZAI/Collateral\\n   * @param _supplyCap The supply cap\\n   * @param _debtCap The debt cap\\n   * @param _mintFeeBps The mint fee in BPS\\n   * @param _redeemFeeBps The redeem fee in BPS\\n   * @param _feeDestination The address where fees are sent\\n   */\\n  function initialize(\\n    address _zai,\\n    address _collateral,\\n    address _governance,\\n    uint256 _newRate,\\n    uint256 _supplyCap,\\n    uint256 _debtCap,\\n    uint256 _mintFeeBps,\\n    uint256 _redeemFeeBps,\\n    address _feeDestination\\n  ) external;\\n}\\n\",\"keccak256\":\"0x67738e38566b982a71c6364c11176342f2a358922f165e1c68a5618ea95321a0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/errors/ConnextErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nlibrary ConnextErrors {\\n  /// @dev Error for 0x0 address inputs\\n  error InvalidZeroInput();\\n\\n  /// @dev error when function returns 0 amount\\n  error InvalidZeroOutput();\\n\\n  /// @dev Error when the sender is not expected\\n  error InvalidSender(address expectedSender, address actualSender);\\n\\n  /// @dev Error when the token received over the bridge is not the one expected\\n  error InvalidTokenReceived();\\n\\n  /// @dev Error for invalid bridge fee share configuration\\n  error InvalidBridgeFeeShare(uint256 bridgeFee);\\n\\n  /// @dev Error for invalid sweep batch size\\n  error InvalidSweepBatchSize(uint256 batchSize);\\n\\n  /// @dev Error when sending ETH fails\\n  error TransferFailed();\\n\\n  /// @dev Error when an unauthorized address tries to call the bridge function on the L2\\n  error UnauthorizedBridgeSweeper();\\n\\n  /// @dev Error when trade does not meet minimum output amount\\n  error InsufficientOutputAmount();\\n}\\n\",\"keccak256\":\"0xaaca6063b1f68417b56e502d1716dde0e684b459535b33d0d287f4a7d8ca4e2e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/events/ConnextEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nlibrary ConnextEvents {\\n  /// @dev Event emitted when bridge triggers mint\\n  event ZaiMinted(bytes32 transferId, uint256 amountDeposited, uint32 origin, address originSender, uint256 minted);\\n\\n  /// @dev Event emitted when a message is sent to another chain.\\n  // The chain selector of the destination chain.\\n  // The address of the receiver on the destination chain.\\n  // The exchange rate sent.\\n  // the token address used to pay CCIP fees.\\n  // The fees paid for sending the CCIP message.\\n  // The unique ID of the CCIP message.\\n  event MessageSent(\\n    bytes32 indexed messageId,\\n    uint64 indexed destinationChainSelector,\\n    address receiver,\\n    uint256 exchangeRate,\\n    address feeToken,\\n    uint256 fees\\n  );\\n\\n  event ConnextMessageSent(uint32 indexed destinationChainDomain, address receiver, uint256 exchangeRate, uint256 fees);\\n\\n  event Deposit(address indexed user, uint256 amountIn, uint256 amountOut);\\n  event BridgeSweeperAddressUpdated(address sweeper, bool allowed);\\n  event BridgeSwept(uint32 destinationDomain, address destinationTarget, address delegate, uint256 amount);\\n  event RateUpdated(uint256 newRate, uint256 oldRate);\\n  event ReceiverPriceFeedUpdated(address newReceiver, address oldReceiver);\\n  event SweeperBridgeFeeCollected(address sweeper, uint256 feeCollected);\\n  event BridgeFeeShareUpdated(uint256 oldBridgeFeeShare, uint256 newBridgeFeeShare);\\n  event SweepBatchSizeUpdated(uint256 oldSweepBatchSize, uint256 newSweepBatchSize);\\n}\\n\",\"keccak256\":\"0xff650c9cfd51b7c107cd470cbe2a9a2ce504112a3bc6fa1fe7a0275f1f56107a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/IL1Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\ninterface IL1Bridge {\\n  /**\\n   * @notice  Accepts collateral from the bridge\\n   * @dev     This function will take all collateral and deposit it into maha\\n   *          The ZAI from the deposit will be sent to the lockbox to be wrapped into xZAI\\n   *          The xZAI will be burned so that the xZAI on the L2 can be unwrapped for ZAI later\\n   */\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xdbab8b4fd13d76256f9fe30dd2ca57137a723790a4124591239ce824b4444a74\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/connext/IXERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IXERC20 is IERC20 {\\n  /**\\n   * @notice Emits when a lockbox is set\\n   *\\n   * @param _lockbox The address of the lockbox\\n   */\\n  event LockboxSet(address _lockbox);\\n\\n  /**\\n   * @notice Emits when a limit is set\\n   *\\n   * @param _mintingLimit The updated minting limit we are setting to the bridge\\n   * @param _burningLimit The updated burning limit we are setting to the bridge\\n   * @param _bridge The address of the bridge we are setting the limit too\\n   */\\n  event BridgeLimitsSet(uint256 _mintingLimit, uint256 _burningLimit, address indexed _bridge);\\n\\n  /**\\n   * @notice Reverts when a user with too low of a limit tries to call mint/burn\\n   */\\n  error IXERC20_NotHighEnoughLimits();\\n\\n  /**\\n   * @notice Reverts when caller is not the factory\\n   */\\n  error IXERC20_NotFactory();\\n\\n  /**\\n   * @notice Reverts when limits are too high\\n   */\\n  error IXERC20_LimitsTooHigh();\\n\\n  /**\\n   * @notice Contains the full minting and burning data for a particular bridge\\n   *\\n   * @param minterParams The minting parameters for the bridge\\n   * @param burnerParams The burning parameters for the bridge\\n   */\\n  struct Bridge {\\n    BridgeParameters minterParams;\\n    BridgeParameters burnerParams;\\n  }\\n\\n  /**\\n   * @notice Contains the mint or burn parameters for a bridge\\n   *\\n   * @param timestamp The timestamp of the last mint/burn\\n   * @param ratePerSecond The rate per second of the bridge\\n   * @param maxLimit The max limit of the bridge\\n   * @param currentLimit The current limit of the bridge\\n   */\\n  struct BridgeParameters {\\n    uint256 timestamp;\\n    uint256 ratePerSecond;\\n    uint256 maxLimit;\\n    uint256 currentLimit;\\n  }\\n\\n  /**\\n   * @notice Sets the lockbox address\\n   *\\n   * @param _lockbox The address of the lockbox\\n   */\\n  function setLockbox(address _lockbox) external;\\n\\n  /**\\n   * @notice Updates the limits of any bridge\\n   * @dev Can only be called by the owner\\n   * @param _mintingLimit The updated minting limit we are setting to the bridge\\n   * @param _burningLimit The updated burning limit we are setting to the bridge\\n   * @param _bridge The address of the bridge we are setting the limits too\\n   */\\n  function setLimits(address _bridge, uint256 _mintingLimit, uint256 _burningLimit) external;\\n\\n  /**\\n   * @notice Returns the max limit of a minter\\n   *\\n   * @param _minter The minter we are viewing the limits of\\n   *  @return _limit The limit the minter has\\n   */\\n  function mintingMaxLimitOf(address _minter) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Returns the max limit of a bridge\\n   *\\n   * @param _bridge the bridge we are viewing the limits of\\n   * @return _limit The limit the bridge has\\n   */\\n  function burningMaxLimitOf(address _bridge) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Returns the current limit of a minter\\n   *\\n   * @param _minter The minter we are viewing the limits of\\n   * @return _limit The limit the minter has\\n   */\\n  function mintingCurrentLimitOf(address _minter) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Returns the current limit of a bridge\\n   *\\n   * @param _bridge the bridge we are viewing the limits of\\n   * @return _limit The limit the bridge has\\n   */\\n  function burningCurrentLimitOf(address _bridge) external view returns (uint256 _limit);\\n\\n  /**\\n   * @notice Mints tokens for a user\\n   * @dev Can only be called by a minter\\n   * @param _user The address of the user who needs tokens minted\\n   * @param _amount The amount of tokens being minted\\n   */\\n  function mint(address _user, uint256 _amount) external;\\n\\n  /**\\n   * @notice Burns tokens for a user\\n   * @dev Can only be called by a minter\\n   * @param _user The address of the user who needs tokens burned\\n   * @param _amount The amount of tokens being burned\\n   */\\n  function burn(address _user, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x1218c022523ab401ac7edca5b441be6da0f9e37b9a7e639e6babde49c743acba\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/connext/IXERC20Lockbox.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\ninterface IXERC20Lockbox {\\n  /**\\n   * @notice Emitted when tokens are deposited into the lockbox\\n   *\\n   * @param _sender The address of the user who deposited\\n   * @param _amount The amount of tokens deposited\\n   */\\n  event Deposit(address _sender, uint256 _amount);\\n\\n  /**\\n   * @notice Emitted when tokens are withdrawn from the lockbox\\n   *\\n   * @param _sender The address of the user who withdrew\\n   * @param _amount The amount of tokens withdrawn\\n   */\\n  event Withdraw(address _sender, uint256 _amount);\\n\\n  /**\\n   * @notice Reverts when a user tries to deposit native tokens on a non-native lockbox\\n   */\\n  error IXERC20Lockbox_NotNative();\\n\\n  /**\\n   * @notice Reverts when a user tries to deposit non-native tokens on a native lockbox\\n   */\\n  error IXERC20Lockbox_Native();\\n\\n  /**\\n   * @notice Reverts when a user tries to withdraw and the call fails\\n   */\\n  error IXERC20Lockbox_WithdrawFailed();\\n\\n  /**\\n   * @notice Deposit ERC20 tokens into the lockbox\\n   *\\n   * @param _amount The amount of tokens to deposit\\n   */\\n  function deposit(uint256 _amount) external;\\n\\n  /**\\n   * @notice Deposit ERC20 tokens into the lockbox, and send the XERC20 to a user\\n   *\\n   * @param _user The user to send the XERC20 to\\n   * @param _amount The amount of tokens to deposit\\n   */\\n  function depositTo(address _user, uint256 _amount) external;\\n\\n  /**\\n   * @notice Deposit the native asset into the lockbox, and send the XERC20 to a user\\n   *\\n   * @param _user The user to send the XERC20 to\\n   */\\n  function depositNativeTo(address _user) external payable;\\n\\n  /**\\n   * @notice Withdraw ERC20 tokens from the lockbox\\n   *\\n   * @param _amount The amount of tokens to withdraw\\n   */\\n  function withdraw(uint256 _amount) external;\\n\\n  /**\\n   * @notice Withdraw ERC20 tokens from the lockbox\\n   *\\n   * @param _user The user to withdraw to\\n   * @param _amount The amount of tokens to withdraw\\n   */\\n  function withdrawTo(address _user, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb60b9ad51fca3a8cf970e10c250ef2626f73149a6545e3771dcecf2affad5aeb\",\"license\":\"GPL-3.0\"},\"contracts/periphery/connext/L1BridgeCollateralConnext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IPegStabilityModule} from \\\"../../interfaces/core/IPegStabilityModule.sol\\\";\\n\\nimport {ConnextErrors} from \\\"../../interfaces/errors/ConnextErrors.sol\\\";\\nimport {ConnextEvents} from \\\"../../interfaces/events/ConnextEvents.sol\\\";\\nimport {IL1Bridge} from \\\"../../interfaces/periphery/IL1Bridge.sol\\\";\\nimport {IXERC20} from \\\"../../interfaces/periphery/connext/IXERC20.sol\\\";\\nimport {IXERC20Lockbox} from \\\"../../interfaces/periphery/connext/IXERC20Lockbox.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract L1BridgeCollateralConnext is IL1Bridge, ReentrancyGuardUpgradeable {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice The xZAI token address\\n  IERC20 public xZAI;\\n\\n  /// @notice The zai token address\\n  IERC20 public zai;\\n\\n  /// @notice The RestakeManager contract - deposits into the protocol are restaked here\\n  IPegStabilityModule public psm;\\n\\n  /// @notice The wETH token address - will be sent via bridge from L2\\n  IERC20 public collateral;\\n\\n  /// @notice The lockbox contract for ZAI - minted ZAI is sent here\\n  IXERC20Lockbox public lockbox;\\n\\n  /// @notice The address of the main Connext contract\\n  address public connext;\\n\\n  /// @dev Initializes the contract with initial vars\\n  function initialize(\\n    IERC20 _zai,\\n    IERC20 _xZai,\\n    IPegStabilityModule _psm,\\n    IERC20 _collateral,\\n    IXERC20Lockbox _lockbox,\\n    address _connext\\n  ) public initializer {\\n    // Verify non-zero addresses on inputs\\n    if (\\n      address(_zai) == address(0) || address(_xZai) == address(0) || address(_psm) == address(0)\\n        || address(_collateral) == address(0) || address(_lockbox) == address(0) || address(_connext) == address(0)\\n    ) {\\n      revert ConnextErrors.InvalidZeroInput();\\n    }\\n\\n    zai = _zai;\\n    xZAI = _xZai;\\n    psm = _psm;\\n    collateral = _collateral;\\n    lockbox = _lockbox;\\n    connext = _connext;\\n\\n    zai.approve(address(lockbox), type(uint256).max);\\n    collateral.approve(address(psm), type(uint256).max);\\n  }\\n\\n  /// @inheritdoc IL1Bridge\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory\\n  ) external nonReentrant returns (bytes memory) {\\n    // Only allow incoming messages from the Connext contract or bridge admin role\\n    if (msg.sender != address(connext)) {\\n      revert ConnextErrors.InvalidSender(address(connext), msg.sender);\\n    }\\n\\n    // Check that the token received is collateral\\n    if (_asset != address(collateral)) revert ConnextErrors.InvalidTokenReceived();\\n\\n    // Check that the amount sent is greater than 0\\n    if (_amount == 0) revert ConnextErrors.InvalidZeroInput();\\n\\n    // Get the amount of collateral\\n    uint256 collateralAmount = collateral.balanceOf(address(this));\\n\\n    // Get the amonut of zai before the deposit\\n    uint256 zaiBalanceBeforeDeposit = zai.balanceOf(address(this));\\n\\n    // Deposit it into psm\\n    psm.mint(address(this), psm.mintAmountIn(collateralAmount));\\n\\n    // Get the amount of zai that was minted\\n    uint256 zaiAmount = zai.balanceOf(address(this)) - zaiBalanceBeforeDeposit;\\n\\n    // Get the xZAI balance before the deposit\\n    uint256 xZaiBalanceBeforeDeposit = xZAI.balanceOf(address(this));\\n\\n    // Send to the lockbox to be wrapped into xZAI\\n    lockbox.deposit(zaiAmount);\\n\\n    // Get the amount of xZAI that was minted\\n    uint256 xZaiAmount = xZAI.balanceOf(address(this)) - xZaiBalanceBeforeDeposit;\\n\\n    // Burn it - it was already minted on the L2\\n    IXERC20(address(xZAI)).burn(address(this), xZaiAmount);\\n\\n    // Emit the event\\n    emit ConnextEvents.ZaiMinted(_transferId, _amount, _origin, _originSender, zaiAmount);\\n\\n    // Return 0 for success\\n    return new bytes(0);\\n  }\\n}\\n\",\"keccak256\":\"0x2eeec4fcda437c551fb48a487ea14be9cd8e298f498989099bbd8b8c8557538d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d2f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063cc2a9a5b1161005b578063cc2a9a5b146100f6578063d8dfeb451461010b578063de4b05481461011e578063fd614f411461013157600080fd5b806304bda2621461008d57806307140b34146100bd5780631d976939146100d057806366cc5702146100e3575b600080fd5b6002546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100a0906001600160a01b031681565b6000546100a0906001600160a01b031681565b6004546100a0906001600160a01b031681565b610109610104366004610aa6565b610151565b005b6003546100a0906001600160a01b031681565b6005546100a0906001600160a01b031681565b61014461013f366004610b3e565b61046d565b6040516100b49190610c42565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff1660008115801561019c5750825b905060008267ffffffffffffffff1660011480156101b95750303b155b9050811580156101c7575080155b156101fe576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561023257845468ff00000000000000001916680100000000000000001785555b6001600160a01b038b16158061024f57506001600160a01b038a16155b8061026157506001600160a01b038916155b8061027357506001600160a01b038816155b8061028557506001600160a01b038716155b8061029757506001600160a01b038616155b156102b55760405163862a606760e01b815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b038e81169182179093556000805483168e85161790556002805483168d85161790556003805483168c85161790556004805483168b8516908117825560058054909416948b169490941790925560405163095ea7b360e01b815291820192909252600019602482015263095ea7b3906044016020604051808303816000875af1158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190610c90565b5060035460025460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104149190610c90565b50831561046057845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6060610477610a2b565b6005546001600160a01b031633146104d4576005546040517fe1130dba0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015233602482015260440160405180910390fd5b6003546001600160a01b0386811691161461051b576040517f6d5f86d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560000361053c5760405163862a606760e01b815260040160405180910390fd5b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a99190610cb9565b6001546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190610cb9565b6002546040517f1f80b95a000000000000000000000000000000000000000000000000000000008152600481018590529192506001600160a01b0316906340c10f199030908390631f80b95a90602401602060405180830381865afa158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610cb9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561070a57600080fd5b505af115801561071e573d6000803e3d6000fd5b50506001546040516370a0823160e01b8152306004820152600093508492506001600160a01b03909116906370a0823190602401602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190610cb9565b61079d9190610cd2565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f9190610cb9565b600480546040517fb6b55f250000000000000000000000000000000000000000000000000000000081529293506001600160a01b03169163b6b55f259161085c9186910190815260200190565b600060405180830381600087803b15801561087657600080fd5b505af115801561088a573d6000803e3d6000fd5b5050600080546040516370a0823160e01b81523060048201529193508492506001600160a01b0316906370a0823190602401602060405180830381865afa1580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190610cb9565b6109079190610cd2565b6000546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152306004820152602481018390529192506001600160a01b031690639dc29fac90604401600060405180830381600087803b15801561096d57600080fd5b505af1158015610981573d6000803e3d6000fd5b5050604080518f8152602081018f905263ffffffff8c16818301526001600160a01b038d1660608201526080810187905290517fb778382b756076f5721b453189e2612ce9954f7eb3eae95c7c2992924985f5d893509081900360a0019150a1505060408051600081526020810190915260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00559350610a2192505050565b9695505050505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610a88576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6001600160a01b0381168114610aa357600080fd5b50565b60008060008060008060c08789031215610abf57600080fd5b8635610aca81610a8e565b95506020870135610ada81610a8e565b94506040870135610aea81610a8e565b93506060870135610afa81610a8e565b92506080870135610b0a81610a8e565b915060a0870135610b1a81610a8e565b809150509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610b5757600080fd5b86359550602087013594506040870135610b7081610a8e565b93506060870135610b8081610a8e565b9250608087013563ffffffff81168114610b9957600080fd5b915060a087013567ffffffffffffffff80821115610bb657600080fd5b818901915089601f830112610bca57600080fd5b813581811115610bdc57610bdc610b28565b604051601f8201601f19908116603f01168101908382118183101715610c0457610c04610b28565b816040528281528c6020848701011115610c1d57600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b600060208083528351808285015260005b81811015610c6f57858101830151858201604001528201610c53565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610ca257600080fd5b81518015158114610cb257600080fd5b9392505050565b600060208284031215610ccb57600080fd5b5051919050565b81810381811115610cf357634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220cf8b15b7fa2a1fb2901552ff9ce9471a3183a42284a972c169f7159e7df0adf464736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063cc2a9a5b1161005b578063cc2a9a5b146100f6578063d8dfeb451461010b578063de4b05481461011e578063fd614f411461013157600080fd5b806304bda2621461008d57806307140b34146100bd5780631d976939146100d057806366cc5702146100e3575b600080fd5b6002546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546100a0906001600160a01b031681565b6000546100a0906001600160a01b031681565b6004546100a0906001600160a01b031681565b610109610104366004610aa6565b610151565b005b6003546100a0906001600160a01b031681565b6005546100a0906001600160a01b031681565b61014461013f366004610b3e565b61046d565b6040516100b49190610c42565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff1660008115801561019c5750825b905060008267ffffffffffffffff1660011480156101b95750303b155b9050811580156101c7575080155b156101fe576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561023257845468ff00000000000000001916680100000000000000001785555b6001600160a01b038b16158061024f57506001600160a01b038a16155b8061026157506001600160a01b038916155b8061027357506001600160a01b038816155b8061028557506001600160a01b038716155b8061029757506001600160a01b038616155b156102b55760405163862a606760e01b815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b038e81169182179093556000805483168e85161790556002805483168d85161790556003805483168c85161790556004805483168b8516908117825560058054909416948b169490941790925560405163095ea7b360e01b815291820192909252600019602482015263095ea7b3906044016020604051808303816000875af1158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190610c90565b5060035460025460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104149190610c90565b50831561046057845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050505050565b6060610477610a2b565b6005546001600160a01b031633146104d4576005546040517fe1130dba0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116600482015233602482015260440160405180910390fd5b6003546001600160a01b0386811691161461051b576040517f6d5f86d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560000361053c5760405163862a606760e01b815260040160405180910390fd5b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a99190610cb9565b6001546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190610cb9565b6002546040517f1f80b95a000000000000000000000000000000000000000000000000000000008152600481018590529192506001600160a01b0316906340c10f199030908390631f80b95a90602401602060405180830381865afa158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610cb9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561070a57600080fd5b505af115801561071e573d6000803e3d6000fd5b50506001546040516370a0823160e01b8152306004820152600093508492506001600160a01b03909116906370a0823190602401602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190610cb9565b61079d9190610cd2565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f9190610cb9565b600480546040517fb6b55f250000000000000000000000000000000000000000000000000000000081529293506001600160a01b03169163b6b55f259161085c9186910190815260200190565b600060405180830381600087803b15801561087657600080fd5b505af115801561088a573d6000803e3d6000fd5b5050600080546040516370a0823160e01b81523060048201529193508492506001600160a01b0316906370a0823190602401602060405180830381865afa1580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190610cb9565b6109079190610cd2565b6000546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152306004820152602481018390529192506001600160a01b031690639dc29fac90604401600060405180830381600087803b15801561096d57600080fd5b505af1158015610981573d6000803e3d6000fd5b5050604080518f8152602081018f905263ffffffff8c16818301526001600160a01b038d1660608201526080810187905290517fb778382b756076f5721b453189e2612ce9954f7eb3eae95c7c2992924985f5d893509081900360a0019150a1505060408051600081526020810190915260017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00559350610a2192505050565b9695505050505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901610a88576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b6001600160a01b0381168114610aa357600080fd5b50565b60008060008060008060c08789031215610abf57600080fd5b8635610aca81610a8e565b95506020870135610ada81610a8e565b94506040870135610aea81610a8e565b93506060870135610afa81610a8e565b92506080870135610b0a81610a8e565b915060a0870135610b1a81610a8e565b809150509295509295509295565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610b5757600080fd5b86359550602087013594506040870135610b7081610a8e565b93506060870135610b8081610a8e565b9250608087013563ffffffff81168114610b9957600080fd5b915060a087013567ffffffffffffffff80821115610bb657600080fd5b818901915089601f830112610bca57600080fd5b813581811115610bdc57610bdc610b28565b604051601f8201601f19908116603f01168101908382118183101715610c0457610c04610b28565b816040528281528c6020848701011115610c1d57600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b600060208083528351808285015260005b81811015610c6f57858101830151858201604001528201610c53565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215610ca257600080fd5b81518015158114610cb257600080fd5b9392505050565b600060208284031215610ccb57600080fd5b5051919050565b81810381811115610cf357634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220cf8b15b7fa2a1fb2901552ff9ce9471a3183a42284a972c169f7159e7df0adf464736f6c63430008150033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidSender(address,address)": [
        {
          "details": "Error when the sender is not expected"
        }
      ],
      "InvalidTokenReceived()": [
        {
          "details": "Error when the token received over the bridge is not the one expected"
        }
      ],
      "InvalidZeroInput()": [
        {
          "details": "Error for 0x0 address inputs"
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "ZaiMinted(bytes32,uint256,uint32,address,uint256)": {
        "details": "Event emitted when bridge triggers mint"
      }
    },
    "kind": "dev",
    "methods": {
      "initialize(address,address,address,address,address,address)": {
        "details": "Initializes the contract with initial vars"
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "details": "This function will take all collateral and deposit it into maha          The ZAI from the deposit will be sent to the lockbox to be wrapped into xZAI          The xZAI will be burned so that the xZAI on the L2 can be unwrapped for ZAI later"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collateral()": {
        "notice": "The wETH token address - will be sent via bridge from L2"
      },
      "connext()": {
        "notice": "The address of the main Connext contract"
      },
      "lockbox()": {
        "notice": "The lockbox contract for ZAI - minted ZAI is sent here"
      },
      "psm()": {
        "notice": "The RestakeManager contract - deposits into the protocol are restaked here"
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "notice": "Accepts collateral from the bridge"
      },
      "xZAI()": {
        "notice": "The xZAI token address"
      },
      "zai()": {
        "notice": "The zai token address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29400,
        "contract": "contracts/periphery/connext/L1BridgeCollateralConnext.sol:L1BridgeCollateralConnext",
        "label": "xZAI",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)10535"
      },
      {
        "astId": 29404,
        "contract": "contracts/periphery/connext/L1BridgeCollateralConnext.sol:L1BridgeCollateralConnext",
        "label": "zai",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)10535"
      },
      {
        "astId": 29408,
        "contract": "contracts/periphery/connext/L1BridgeCollateralConnext.sol:L1BridgeCollateralConnext",
        "label": "psm",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPegStabilityModule)27312"
      },
      {
        "astId": 29412,
        "contract": "contracts/periphery/connext/L1BridgeCollateralConnext.sol:L1BridgeCollateralConnext",
        "label": "collateral",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)10535"
      },
      {
        "astId": 29416,
        "contract": "contracts/periphery/connext/L1BridgeCollateralConnext.sol:L1BridgeCollateralConnext",
        "label": "lockbox",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IXERC20Lockbox)28655"
      },
      {
        "astId": 29419,
        "contract": "contracts/periphery/connext/L1BridgeCollateralConnext.sol:L1BridgeCollateralConnext",
        "label": "connext",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)10535": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPegStabilityModule)27312": {
        "encoding": "inplace",
        "label": "contract IPegStabilityModule",
        "numberOfBytes": "20"
      },
      "t_contract(IXERC20Lockbox)28655": {
        "encoding": "inplace",
        "label": "contract IXERC20Lockbox",
        "numberOfBytes": "20"
      }
    }
  }
}
