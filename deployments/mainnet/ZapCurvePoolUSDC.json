{
  "address": "0x64f629a1dBbBFBc6e8a41440D45ee3223f5d7261",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_psm",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CollateralTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OdosSwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "zaiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStakedAmount",
          "type": "uint256"
        }
      ],
      "name": "Zapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimalOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract ICurveStableSwapNG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "psm",
      "outputs": [
        {
          "internalType": "contract IPegStabilityModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IERC4626",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zai",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLpAmount",
          "type": "uint256"
        }
      ],
      "name": "zapIntoLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zaiAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLpAmount",
          "type": "uint256"
        }
      ],
      "name": "zapWithZaiIntoLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa378276528f180b295d3fee4d125a05e5860114e7cac62d9fda186200fcb8ac9",
  "receipt": {
    "to": null,
    "from": "0x1F09Ec21d7fd0A21879b919bf0f9C46e6b85CA8b",
    "contractAddress": "0x64f629a1dBbBFBc6e8a41440D45ee3223f5d7261",
    "transactionIndex": 48,
    "gasUsed": "1007483",
    "logsBloom": "0x000000000000000000000000000020000000000000000000a0000000000000000000100000000000000000000000000000000000000000000000000000200000000000000000000008000200000000000000000000000000000000000000000800000000000000000000000000000001000000000000000000000000001000000000000000200000000000000000000000000000010000000000000000000000020000008000200000000000000000000000000000000040000000000000000000000000000000000000200000000001000000000000000000000000000010000010000000000000000080000000000000200000001000000000000000000040",
    "blockHash": "0x750c175f00c86037a8d2d1cfd6330d6dbacb734b01ff355ac3e47e44b635fae6",
    "transactionHash": "0xa378276528f180b295d3fee4d125a05e5860114e7cac62d9fda186200fcb8ac9",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 20478512,
        "transactionHash": "0xa378276528f180b295d3fee4d125a05e5860114e7cac62d9fda186200fcb8ac9",
        "address": "0x69000405f9DcE69BD4Cbf4f2865b79144A69BFE0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000064f629a1dbbbfbc6e8a41440d45ee3223f5d7261",
          "0x0000000000000000000000006ee1955afb64146b126162b4ff018db1eb8f08c3"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 182,
        "blockHash": "0x750c175f00c86037a8d2d1cfd6330d6dbacb734b01ff355ac3e47e44b635fae6"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 20478512,
        "transactionHash": "0xa378276528f180b295d3fee4d125a05e5860114e7cac62d9fda186200fcb8ac9",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000064f629a1dbbbfbc6e8a41440d45ee3223f5d7261",
          "0x0000000000000000000000006ee1955afb64146b126162b4ff018db1eb8f08c3"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 183,
        "blockHash": "0x750c175f00c86037a8d2d1cfd6330d6dbacb734b01ff355ac3e47e44b635fae6"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 20478512,
        "transactionHash": "0xa378276528f180b295d3fee4d125a05e5860114e7cac62d9fda186200fcb8ac9",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000064f629a1dbbbfbc6e8a41440d45ee3223f5d7261",
          "0x00000000000000000000000069000052a82e218ccb61fe6e9d7e3f87b9c5916f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 184,
        "blockHash": "0x750c175f00c86037a8d2d1cfd6330d6dbacb734b01ff355ac3e47e44b635fae6"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 20478512,
        "transactionHash": "0xa378276528f180b295d3fee4d125a05e5860114e7cac62d9fda186200fcb8ac9",
        "address": "0x6eE1955afB64146B126162b4fF018db1eb8f08C3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000064f629a1dbbbfbc6e8a41440d45ee3223f5d7261",
          "0x000000000000000000000000154f52b347d8e48b8dbd8d8325fe5bb45aadccda"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 185,
        "blockHash": "0x750c175f00c86037a8d2d1cfd6330d6dbacb734b01ff355ac3e47e44b635fae6"
      }
    ],
    "blockNumber": 20478512,
    "cumulativeGasUsed": "7398698",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x154F52B347D8E48b8DbD8D8325Fe5bb45AAdCCDa",
    "0x69000052a82e218ccb61fe6e9d7e3f87b9c5916f"
  ],
  "numDeployments": 1,
  "solcInputHash": "afd07981a6e7f204d763e3872300d207",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_psm\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CollateralTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OdosSwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"zaiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakedAmount\",\"type\":\"uint256\"}],\"name\":\"Zapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ICurveStableSwapNG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psm\",\"outputs\":[{\"internalType\":\"contract IPegStabilityModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zai\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpAmount\",\"type\":\"uint256\"}],\"name\":\"zapIntoLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zaiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpAmount\",\"type\":\"uint256\"}],\"name\":\"zapWithZaiIntoLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"zapIntoLP(uint256,uint256)\":{\"details\":\"This function is used when the user only has collateral tokens.\",\"params\":{\"collateralAmount\":\"The amount of collateral to zap\",\"minLpAmount\":\"The minimum amount of LP tokens to stake\"}},\"zapWithZaiIntoLP(uint256,uint256,uint256)\":{\"details\":\"This function is used when the user already has ZAI tokens.\",\"params\":{\"collateralAmount\":\"The amount of collateral to zap\",\"minLpAmount\":\"The minimum amount of LP tokens to stake\",\"zaiAmount\":\"The amount of ZAI to zap\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"zapIntoLP(uint256,uint256)\":{\"notice\":\"Zaps collateral into ZAI LP tokens\"},\"zapWithZaiIntoLP(uint256,uint256,uint256)\":{\"notice\":\"Zaps ZAI and collateral into LP tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/zaps/ZapCurvePoolUSDC.sol\":\"ZapCurvePoolUSDC\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x00c23b80f74717a6765b606001c5c633116020d488ee8f53600685b8200e4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"contracts/interfaces/IStablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStablecoin is IERC20 {\\n  /**\\n   * @notice Used to mint ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to mint to\\n   * @param _amount The amount to mint\\n   */\\n  function mint(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Role for minting/burning ZAI\\n   */\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Used to burn ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to burn from\\n   * @param _amount The amount to burn\\n   */\\n  function burn(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Grants the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to grant the role to\\n   */\\n  function grantManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Revokes the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to revoke the role from\\n   */\\n  function revokeManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Checks if an address is an approved manager\\n   * @param _account The address to check\\n   * @return what True iff the address is a manager\\n   */\\n  function isManager(address _account) external view returns (bool what);\\n}\\n\",\"keccak256\":\"0xaadb3432557810d9cddef1be599f06bba520273011d8c0a80f833082fff964f0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/core/IPegStabilityModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IStablecoin} from \\\"../IStablecoin.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title Peg Stability Module\\n * @author maha.xyz\\n * @notice Used to mint ZAI with collateral at a pre-defined rate\\n */\\ninterface IPegStabilityModule {\\n  /**\\n   * @notice Returns the Zai stablecoin\\n   */\\n  function zai() external returns (IStablecoin);\\n\\n  /**\\n   * @notice Returns the collateral token\\n   */\\n  function collateral() external returns (IERC20);\\n\\n  /**\\n   * @notice Returns the supply cap\\n   */\\n  function supplyCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the debt cap\\n   */\\n  function debtCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current debt held in this vault\\n   */\\n  function debt() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current rate of ZAI/Collateral\\n   */\\n  function rate() external returns (uint256);\\n\\n  /**\\n   * @notice The mint fee in BPS\\n   */\\n  function mintFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The address where fees are sent\\n   */\\n  function feeDestination() external returns (address);\\n\\n  /**\\n   * @notice The redeem fee in BPS\\n   */\\n  function redeemFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The maximum fee that can be charged\\n   */\\n  function MAX_FEE_BPS() external returns (uint256);\\n\\n  /**\\n   * @notice Mints ZAI with collateral\\n   * @dev This contract calculates how much collateral should be taken\\n   * @param destination Where the minted ZAI will be sent\\n   * @param shares The amount of zai to mint\\n   */\\n  function mint(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Redeems ZAI for collateral\\n   * @dev This contract calculates how much collateral should be given\\n   * @param destination Where the collateral will be sent\\n   * @param shares The amount of zai to redeem\\n   */\\n  function redeem(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Updates the supply and debt caps\\n   * @dev Only callable by the admin\\n   * @param _supplyCap How much collateral can be taken\\n   * @param _debtCap How much debt can be held\\n   */\\n  function updateCaps(uint256 _supplyCap, uint256 _debtCap) external;\\n\\n  /**\\n   * @notice Updates the rate of ZAI/Collateral\\n   * @dev Only callable by the admin\\n   * @param _newRate The new rate of ZAI/Collateral\\n   */\\n  function updateRate(uint256 _newRate) external;\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral\\n   * @param _amount The amount of ZAI\\n   * @return collateralAmount The amount of collateral\\n   */\\n  function toCollateralAmount(uint256 _amount) external view returns (uint256 collateralAmount);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee added\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS + fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFee(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee removed\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS - fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFeeInverse(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be minted for a given amount of collateral\\n   * @param amountAssetsIn The amount of collateral\\n   */\\n  function mintAmountIn(uint256 amountAssetsIn) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be redeemed for a given amount of collateral\\n   * @param amountAssetsOut The amount of collateral\\n   */\\n  function redeemAmountOut(uint256 amountAssetsOut) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice How much fees has been collected by the protocol\\n   * @return fees The amount of fees collected in ZAI\\n   */\\n  function feesCollected() external view returns (uint256 fees);\\n\\n  /**\\n   * @notice Updates the mint and redeem fees\\n   * @param _mintFeeBps The new mint fee in BPS\\n   * @param _redeemFeeBps The new redeem fee in BPS\\n   */\\n  function updateFees(uint256 _mintFeeBps, uint256 _redeemFeeBps) external;\\n\\n  /**\\n   * @notice Updates the fee destination\\n   * @param _feeDestination The new fee destination\\n   * @dev Only callable by the admin\\n   */\\n  function updateFeeDestination(address _feeDestination) external;\\n\\n  /**\\n   * @notice Initializes the contract\\n   * @param _zai The ZAI stablecoin\\n   * @param _collateral The collateral token\\n   * @param _governance Governance address\\n   * @param _newRate The new rate of ZAI/Collateral\\n   * @param _supplyCap The supply cap\\n   * @param _debtCap The debt cap\\n   * @param _mintFeeBps The mint fee in BPS\\n   * @param _redeemFeeBps The redeem fee in BPS\\n   * @param _feeDestination The address where fees are sent\\n   */\\n  function initialize(\\n    address _zai,\\n    address _collateral,\\n    address _governance,\\n    uint256 _newRate,\\n    uint256 _supplyCap,\\n    uint256 _debtCap,\\n    uint256 _mintFeeBps,\\n    uint256 _redeemFeeBps,\\n    address _feeDestination\\n  ) external;\\n}\\n\",\"keccak256\":\"0x67738e38566b982a71c6364c11176342f2a358922f165e1c68a5618ea95321a0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/ICurveStableSwapNG.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface ICurveStableSwapNG is IERC20 {\\n  function add_liquidity(\\n    uint256[] memory _amounts,\\n    uint256 _min_mint_amount,\\n    address _receiver\\n  ) external returns (uint256);\\n\\n  function calc_token_amount(uint256[] memory _amounts, bool _is_deposit) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x16b0a81ee5d0b11d1eb4e474ab030284d9647eff457a77eb79991900c0e498a5\",\"license\":\"GPL-3.0\"},\"contracts/periphery/zaps/ZapCurvePoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IPegStabilityModule} from \\\"../../interfaces/core/IPegStabilityModule.sol\\\";\\nimport {ICurveStableSwapNG} from \\\"../../interfaces/periphery/ICurveStableSwapNG.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\n/**\\n * @title ZapCurvePool\\n * @dev This contract allows users to perform a Zap operation by swapping collateral for zai tokens, adding liquidity to\\n * curve LP, and staking the LP tokens.\\n */\\nabstract contract ZapCurvePoolBase {\\n  IERC4626 public staking;\\n\\n  ICurveStableSwapNG public pool;\\n\\n  IERC20Metadata public zai;\\n\\n  IERC20Metadata public collateral;\\n\\n  IPegStabilityModule public psm;\\n\\n  uint256 public decimalOffset;\\n\\n  address internal me;\\n\\n  error OdosSwapFailed();\\n  error CollateralTransferFailed();\\n  error TokenTransferFailed();\\n\\n  event Zapped(\\n    address indexed user, uint256 indexed collateralAmount, uint256 indexed zaiAmount, uint256 newStakedAmount\\n  );\\n\\n  /**\\n   * @dev Initializes the contract with the required contracts\\n   */\\n  constructor(address _staking, address _psm) {\\n    staking = IERC4626(_staking);\\n    psm = IPegStabilityModule(_psm);\\n\\n    pool = ICurveStableSwapNG(staking.asset());\\n    zai = IERC20Metadata(address(psm.zai()));\\n    collateral = IERC20Metadata(address(psm.collateral()));\\n\\n    decimalOffset = 10 ** (18 - collateral.decimals());\\n\\n    // give approvals\\n    zai.approve(address(pool), type(uint256).max);\\n    collateral.approve(address(pool), type(uint256).max);\\n    collateral.approve(address(psm), type(uint256).max);\\n    pool.approve(_staking, type(uint256).max);\\n\\n    me = address(this);\\n  }\\n\\n  /**\\n   * @notice Zaps ZAI and collateral into LP tokens\\n   * @dev This function is used when the user already has ZAI tokens.\\n   * @param zaiAmount The amount of ZAI to zap\\n   * @param collateralAmount The amount of collateral to zap\\n   * @param minLpAmount The minimum amount of LP tokens to stake\\n   */\\n  function zapWithZaiIntoLP(uint256 zaiAmount, uint256 collateralAmount, uint256 minLpAmount) external {\\n    // fetch tokens\\n    if (zaiAmount > 0) zai.transferFrom(msg.sender, me, zaiAmount);\\n    if (collateralAmount > 0) collateral.transferFrom(msg.sender, me, collateralAmount);\\n\\n    // add liquidity\\n    uint256[] memory amounts = new uint256[](2);\\n    amounts[0] = zaiAmount;\\n    amounts[1] = collateralAmount;\\n    pool.add_liquidity(amounts, minLpAmount, address(this));\\n\\n    // we now have LP tokens; deposit into staking contract for the user\\n    staking.deposit(pool.balanceOf(address(this)), msg.sender);\\n\\n    // sweep any dust\\n    _sweep(zai);\\n    _sweep(collateral);\\n\\n    emit Zapped(msg.sender, collateralAmount, zaiAmount, pool.balanceOf(msg.sender));\\n  }\\n\\n  function _sweep(IERC20Metadata token) internal {\\n    uint256 tokenB = token.balanceOf(address(this));\\n    if (tokenB > 0 && !token.transfer(msg.sender, tokenB)) {\\n      revert TokenTransferFailed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xffb08d62818e5f26a9d75c23276f877d8d8d96fc814fd8e51e06ac459150eeaa\",\"license\":\"GPL-3.0\"},\"contracts/periphery/zaps/ZapCurvePoolUSDC.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {ZapCurvePoolBase} from \\\"./ZapCurvePoolBase.sol\\\";\\n\\ncontract ZapCurvePoolUSDC is ZapCurvePoolBase {\\n  constructor(address _staking, address _psm) ZapCurvePoolBase(_staking, _psm) {\\n    // nothing\\n  }\\n\\n  /**\\n   * @notice Zaps collateral into ZAI LP tokens\\n   * @dev This function is used when the user only has collateral tokens.\\n   * @param collateralAmount The amount of collateral to zap\\n   * @param minLpAmount The minimum amount of LP tokens to stake\\n   */\\n  function zapIntoLP(uint256 collateralAmount, uint256 minLpAmount) external {\\n    // fetch tokens\\n    collateral.transferFrom(msg.sender, me, collateralAmount);\\n\\n    // convert 50% collateral for zai\\n    uint256 zaiAmount = collateralAmount * decimalOffset / 2;\\n    psm.mint(address(this), zaiAmount);\\n\\n    // add liquidity\\n    uint256[] memory amounts = new uint256[](2);\\n    amounts[0] = collateralAmount / 2;\\n    amounts[1] = zaiAmount;\\n    pool.add_liquidity(amounts, minLpAmount, me);\\n\\n    // we now have LP tokens; deposit into staking contract for the user\\n    staking.deposit(pool.balanceOf(address(this)), msg.sender);\\n\\n    // sweep any dust\\n    _sweep(zai);\\n    _sweep(collateral);\\n\\n    emit Zapped(msg.sender, collateralAmount / 2, zaiAmount, pool.balanceOf(msg.sender));\\n  }\\n}\\n\",\"keccak256\":\"0x329e7415637663aaab793543e5ce41da4a193fe74a62243a7631dfbe352a5a34\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001201380380620012018339810160408190526200003491620004a1565b600080546001600160a01b038085166001600160a01b031992831681179093556004805491851691909216178155604080516338d52e0f60e01b815290518593859390926338d52e0f92818301926020928290030181865afa1580156200009f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c59190620004e0565b600180546001600160a01b0319166001600160a01b0392831617905560048054604080516301c502cd60e21b8152905191909316926307140b34928181019260209290919082900301816000875af115801562000126573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014c9190620004e0565b600280546001600160a01b0319166001600160a01b03928316179055600480546040805163d8dfeb4560e01b81529051919093169263d8dfeb45928181019260209290919082900301816000875af1158015620001ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d39190620004e0565b600380546001600160a01b0319166001600160a01b039290921691821790556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156200022e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000254919062000507565b6200026190601262000542565b6200026e90600a62000661565b60055560025460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015620002c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ee919062000672565b5060035460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000346573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200036c919062000672565b506003546004805460405163095ea7b360e01b81526001600160a01b039182169281019290925260001960248301529091169063095ea7b3906044016020604051808303816000875af1158015620003c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ee919062000672565b5060015460405163095ea7b360e01b81526001600160a01b03848116600483015260001960248301529091169063095ea7b3906044016020604051808303816000875af115801562000444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200046a919062000672565b5050600680546001600160a01b031916301790555062000696915050565b6001600160a01b03811681146200049e57600080fd5b50565b60008060408385031215620004b557600080fd5b8251620004c28162000488565b6020840151909250620004d58162000488565b809150509250929050565b600060208284031215620004f357600080fd5b8151620005008162000488565b9392505050565b6000602082840312156200051a57600080fd5b815160ff811681146200050057600080fd5b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156200055e576200055e6200052c565b92915050565b600181815b80851115620005a55781600019048211156200058957620005896200052c565b808516156200059757918102915b93841c939080029062000569565b509250929050565b600082620005be575060016200055e565b81620005cd575060006200055e565b8160018114620005e65760028114620005f15762000611565b60019150506200055e565b60ff8411156200060557620006056200052c565b50506001821b6200055e565b5060208310610133831016604e8410600b841016171562000636575081810a6200055e565b62000642838362000564565b80600019048211156200065957620006596200052c565b029392505050565b60006200050060ff841683620005ad565b6000602082840312156200068557600080fd5b815180151581146200050057600080fd5b610b5b80620006a66000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806352d8e34f1161005b57806352d8e34f146100f6578063d1b39ae51461010b578063d8dfeb4514610122578063fbbe5a331461013557600080fd5b806304bda2621461008d57806307140b34146100bd57806316f0115b146100d05780634cf088d9146100e3575b600080fd5b6004546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6002546100a0906001600160a01b031681565b6001546100a0906001600160a01b031681565b6000546100a0906001600160a01b031681565b6101096101043660046109d7565b610148565b005b61011460055481565b6040519081526020016100b4565b6003546100a0906001600160a01b031681565b610109610143366004610a03565b6104fa565b82156101cf576002546006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018690529116906323b872dd906064016020604051808303816000875af11580156101a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cd9190610a25565b505b8115610256576003546006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018590529116906323b872dd906064016020604051808303816000875af1158015610230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102549190610a25565b505b604080516002808252606082018352600092602083019080368337019050509050838160008151811061028b5761028b610a4e565b60200260200101818152505082816001815181106102ab576102ab610a4e565b602090810291909101015260015460405163a7256d0960e01b81526001600160a01b039091169063a7256d09906102ea90849086903090600401610a64565b6020604051808303816000875af1158015610309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032d9190610abf565b506000546001546040516370a0823160e01b81523060048201526001600160a01b0392831692636e553f659216906370a0823190602401602060405180830381865afa158015610381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a59190610abf565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610abf565b5060025461043b906001600160a01b0316610898565b600354610450906001600160a01b0316610898565b6001546040516370a0823160e01b81523360048201819052869286927f8254cb1554a3a4f342e4d6bc29ea29f483d72ec4183e94e4a83410c93af84341916001600160a01b0316906370a08231906024015b602060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190610abf565b60405190815260200160405180910390a450505050565b6003546006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018590529116906323b872dd906064016020604051808303816000875af1158015610555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105799190610a25565b50600060026005548461058c9190610ad8565b6105969190610b03565b600480546040517f40c10f190000000000000000000000000000000000000000000000000000000081523092810192909252602482018390529192506001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561060157600080fd5b505af1158015610615573d6000803e3d6000fd5b5060009250600291506106259050565b60405190808252806020026020018201604052801561064e578160200160208202803683370190505b50905061065c600285610b03565b8160008151811061066f5761066f610a4e565b602002602001018181525050818160018151811061068f5761068f610a4e565b602090810291909101015260015460065460405163a7256d0960e01b81526001600160a01b039283169263a7256d09926106d192869289921690600401610a64565b6020604051808303816000875af11580156106f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107149190610abf565b506000546001546040516370a0823160e01b81523060048201526001600160a01b0392831692636e553f659216906370a0823190602401602060405180830381865afa158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190610abf565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260048101919091523360248201526044016020604051808303816000875af11580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190610abf565b50600254610822906001600160a01b0316610898565b600354610837906001600160a01b0316610898565b81610843600286610b03565b6001546040516370a0823160e01b81523360048201819052917f8254cb1554a3a4f342e4d6bc29ea29f483d72ec4183e94e4a83410c93af84341916001600160a01b03909116906370a08231906024016104a2565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156108df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109039190610abf565b905060008111801561099c57506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a9190610a25565b155b156109d3576040517f045c4b0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000806000606084860312156109ec57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610a1657600080fd5b50508035926020909101359150565b600060208284031215610a3757600080fd5b81518015158114610a4757600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b606080825284519082018190526000906020906080840190828801845b82811015610a9d57815184529284019290840190600101610a81565b50505090830194909452506001600160a01b0391909116604090910152919050565b600060208284031215610ad157600080fd5b5051919050565b8082028115828204841417610afd57634e487b7160e01b600052601160045260246000fd5b92915050565b600082610b2057634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212209daf3a33971ba6251fec2d92ca0d827eb096c3c5c876eaa3d3a3ca05dbffe5a864736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806352d8e34f1161005b57806352d8e34f146100f6578063d1b39ae51461010b578063d8dfeb4514610122578063fbbe5a331461013557600080fd5b806304bda2621461008d57806307140b34146100bd57806316f0115b146100d05780634cf088d9146100e3575b600080fd5b6004546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6002546100a0906001600160a01b031681565b6001546100a0906001600160a01b031681565b6000546100a0906001600160a01b031681565b6101096101043660046109d7565b610148565b005b61011460055481565b6040519081526020016100b4565b6003546100a0906001600160a01b031681565b610109610143366004610a03565b6104fa565b82156101cf576002546006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018690529116906323b872dd906064016020604051808303816000875af11580156101a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cd9190610a25565b505b8115610256576003546006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018590529116906323b872dd906064016020604051808303816000875af1158015610230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102549190610a25565b505b604080516002808252606082018352600092602083019080368337019050509050838160008151811061028b5761028b610a4e565b60200260200101818152505082816001815181106102ab576102ab610a4e565b602090810291909101015260015460405163a7256d0960e01b81526001600160a01b039091169063a7256d09906102ea90849086903090600401610a64565b6020604051808303816000875af1158015610309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032d9190610abf565b506000546001546040516370a0823160e01b81523060048201526001600160a01b0392831692636e553f659216906370a0823190602401602060405180830381865afa158015610381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a59190610abf565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260048101919091523360248201526044016020604051808303816000875af1158015610401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104259190610abf565b5060025461043b906001600160a01b0316610898565b600354610450906001600160a01b0316610898565b6001546040516370a0823160e01b81523360048201819052869286927f8254cb1554a3a4f342e4d6bc29ea29f483d72ec4183e94e4a83410c93af84341916001600160a01b0316906370a08231906024015b602060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190610abf565b60405190815260200160405180910390a450505050565b6003546006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018590529116906323b872dd906064016020604051808303816000875af1158015610555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105799190610a25565b50600060026005548461058c9190610ad8565b6105969190610b03565b600480546040517f40c10f190000000000000000000000000000000000000000000000000000000081523092810192909252602482018390529192506001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561060157600080fd5b505af1158015610615573d6000803e3d6000fd5b5060009250600291506106259050565b60405190808252806020026020018201604052801561064e578160200160208202803683370190505b50905061065c600285610b03565b8160008151811061066f5761066f610a4e565b602002602001018181525050818160018151811061068f5761068f610a4e565b602090810291909101015260015460065460405163a7256d0960e01b81526001600160a01b039283169263a7256d09926106d192869289921690600401610a64565b6020604051808303816000875af11580156106f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107149190610abf565b506000546001546040516370a0823160e01b81523060048201526001600160a01b0392831692636e553f659216906370a0823190602401602060405180830381865afa158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190610abf565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815260048101919091523360248201526044016020604051808303816000875af11580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190610abf565b50600254610822906001600160a01b0316610898565b600354610837906001600160a01b0316610898565b81610843600286610b03565b6001546040516370a0823160e01b81523360048201819052917f8254cb1554a3a4f342e4d6bc29ea29f483d72ec4183e94e4a83410c93af84341916001600160a01b03909116906370a08231906024016104a2565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156108df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109039190610abf565b905060008111801561099c57506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610976573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099a9190610a25565b155b156109d3576040517f045c4b0200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000806000606084860312156109ec57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610a1657600080fd5b50508035926020909101359150565b600060208284031215610a3757600080fd5b81518015158114610a4757600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b606080825284519082018190526000906020906080840190828801845b82811015610a9d57815184529284019290840190600101610a81565b50505090830194909452506001600160a01b0391909116604090910152919050565b600060208284031215610ad157600080fd5b5051919050565b8082028115828204841417610afd57634e487b7160e01b600052601160045260246000fd5b92915050565b600082610b2057634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212209daf3a33971ba6251fec2d92ca0d827eb096c3c5c876eaa3d3a3ca05dbffe5a864736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "zapIntoLP(uint256,uint256)": {
        "details": "This function is used when the user only has collateral tokens.",
        "params": {
          "collateralAmount": "The amount of collateral to zap",
          "minLpAmount": "The minimum amount of LP tokens to stake"
        }
      },
      "zapWithZaiIntoLP(uint256,uint256,uint256)": {
        "details": "This function is used when the user already has ZAI tokens.",
        "params": {
          "collateralAmount": "The amount of collateral to zap",
          "minLpAmount": "The minimum amount of LP tokens to stake",
          "zaiAmount": "The amount of ZAI to zap"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "zapIntoLP(uint256,uint256)": {
        "notice": "Zaps collateral into ZAI LP tokens"
      },
      "zapWithZaiIntoLP(uint256,uint256,uint256)": {
        "notice": "Zaps ZAI and collateral into LP tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32036,
        "contract": "contracts/periphery/zaps/ZapCurvePoolUSDC.sol:ZapCurvePoolUSDC",
        "label": "staking",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC4626)8797"
      },
      {
        "astId": 32039,
        "contract": "contracts/periphery/zaps/ZapCurvePoolUSDC.sol:ZapCurvePoolUSDC",
        "label": "pool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICurveStableSwapNG)28280"
      },
      {
        "astId": 32042,
        "contract": "contracts/periphery/zaps/ZapCurvePoolUSDC.sol:ZapCurvePoolUSDC",
        "label": "zai",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20Metadata)11005"
      },
      {
        "astId": 32045,
        "contract": "contracts/periphery/zaps/ZapCurvePoolUSDC.sol:ZapCurvePoolUSDC",
        "label": "collateral",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20Metadata)11005"
      },
      {
        "astId": 32048,
        "contract": "contracts/periphery/zaps/ZapCurvePoolUSDC.sol:ZapCurvePoolUSDC",
        "label": "psm",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPegStabilityModule)27312"
      },
      {
        "astId": 32050,
        "contract": "contracts/periphery/zaps/ZapCurvePoolUSDC.sol:ZapCurvePoolUSDC",
        "label": "decimalOffset",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 32052,
        "contract": "contracts/periphery/zaps/ZapCurvePoolUSDC.sol:ZapCurvePoolUSDC",
        "label": "me",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveStableSwapNG)28280": {
        "encoding": "inplace",
        "label": "contract ICurveStableSwapNG",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)11005": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IERC4626)8797": {
        "encoding": "inplace",
        "label": "contract IERC4626",
        "numberOfBytes": "20"
      },
      "t_contract(IPegStabilityModule)27312": {
        "encoding": "inplace",
        "label": "contract IPegStabilityModule",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}