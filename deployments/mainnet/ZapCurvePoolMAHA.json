{
  "address": "0x915fD4C30cc3BC61f21C2C7585a68e26a10fe526",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_psm",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_maha",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_odos",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OdosSwapFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "zaiAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newStakedAmount",
          "type": "uint256"
        }
      ],
      "name": "Zapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimalOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maha",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "me",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "odos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "psm",
      "outputs": [
        {
          "internalType": "contract IPegStabilityModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IERC4626",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zai",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "swapAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLpAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "odosCallData",
          "type": "bytes"
        }
      ],
      "name": "zapWithOdos",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "zaiAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLpAmount",
          "type": "uint256"
        }
      ],
      "name": "zapWithZaiIntoLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42aaca93d8a212339748b51d1a28d5d4e96ea34786cc6f80847e849014b54060",
  "receipt": {
    "to": null,
    "from": "0x1F09Ec21d7fd0A21879b919bf0f9C46e6b85CA8b",
    "contractAddress": "0x915fD4C30cc3BC61f21C2C7585a68e26a10fe526",
    "transactionIndex": 86,
    "gasUsed": "1400718",
    "logsBloom": "0x
    "blockHash": "0x7ca9f53df60dd86fc329794ecff155b45cca8c4cf5292be60b0585bd24c028bf",
    "transactionHash": "0x42aaca93d8a212339748b51d1a28d5d4e96ea34786cc6f80847e849014b54060",
    "logs": [
      {
        "transactionIndex": 86,
        "blockNumber": 21403509,
        "transactionHash": "0x42aaca93d8a212339748b51d1a28d5d4e96ea34786cc6f80847e849014b54060",
        "address": "0x7D2dFfa9e903b8377c96196dA424C7965b06BCc3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000915fd4c30cc3bc61f21c2c7585a68e26a10fe526",
          "0x000000000000000000000000e2ebbf803d0199a5a26108ba36fbac366b201be1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 334,
        "blockHash": "0x7ca9f53df60dd86fc329794ecff155b45cca8c4cf5292be60b0585bd24c028bf"
      },
      {
        "transactionIndex": 86,
        "blockNumber": 21403509,
        "transactionHash": "0x42aaca93d8a212339748b51d1a28d5d4e96ea34786cc6f80847e849014b54060",
        "address": "0x69000dFD5025E82f48Eb28325A2B88a241182CEd",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000915fd4c30cc3bc61f21c2c7585a68e26a10fe526",
          "0x0000000000000000000000007d2dffa9e903b8377c96196da424c7965b06bcc3"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 335,
        "blockHash": "0x7ca9f53df60dd86fc329794ecff155b45cca8c4cf5292be60b0585bd24c028bf"
      },
      {
        "transactionIndex": 86,
        "blockNumber": 21403509,
        "transactionHash": "0x42aaca93d8a212339748b51d1a28d5d4e96ea34786cc6f80847e849014b54060",
        "address": "0x9D39A5DE30e57443BfF2A8307A4256c8797A3497",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000915fd4c30cc3bc61f21c2c7585a68e26a10fe526",
          "0x0000000000000000000000007d2dffa9e903b8377c96196da424c7965b06bcc3"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 336,
        "blockHash": "0x7ca9f53df60dd86fc329794ecff155b45cca8c4cf5292be60b0585bd24c028bf"
      },
      {
        "transactionIndex": 86,
        "blockNumber": 21403509,
        "transactionHash": "0x42aaca93d8a212339748b51d1a28d5d4e96ea34786cc6f80847e849014b54060",
        "address": "0x9D39A5DE30e57443BfF2A8307A4256c8797A3497",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000915fd4c30cc3bc61f21c2c7585a68e26a10fe526",
          "0x0000000000000000000000007dcde153e4cace9ca852590d9654c7694388db54"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 337,
        "blockHash": "0x7ca9f53df60dd86fc329794ecff155b45cca8c4cf5292be60b0585bd24c028bf"
      },
      {
        "transactionIndex": 86,
        "blockNumber": 21403509,
        "transactionHash": "0x42aaca93d8a212339748b51d1a28d5d4e96ea34786cc6f80847e849014b54060",
        "address": "0x745407c86DF8DB893011912d3aB28e68B62E49B0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000915fd4c30cc3bc61f21c2c7585a68e26a10fe526",
          "0x0000000000000000000000007d2dffa9e903b8377c96196da424c7965b06bcc3"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 338,
        "blockHash": "0x7ca9f53df60dd86fc329794ecff155b45cca8c4cf5292be60b0585bd24c028bf"
      },
      {
        "transactionIndex": 86,
        "blockNumber": 21403509,
        "transactionHash": "0x42aaca93d8a212339748b51d1a28d5d4e96ea34786cc6f80847e849014b54060",
        "address": "0x69000dFD5025E82f48Eb28325A2B88a241182CEd",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000915fd4c30cc3bc61f21c2c7585a68e26a10fe526",
          "0x0000000000000000000000007d2dffa9e903b8377c96196da424c7965b06bcc3"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 339,
        "blockHash": "0x7ca9f53df60dd86fc329794ecff155b45cca8c4cf5292be60b0585bd24c028bf"
      }
    ],
    "blockNumber": 21403509,
    "cumulativeGasUsed": "11844807",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE2EbBf803d0199A5A26108bA36FBAc366b201Be1",
    "0x7DCdE153e4cACe9Ca852590d9654c7694388Db54",
    "0x745407c86df8db893011912d3ab28e68b62e49b0",
    "0xcf5540fffcdc3d510b18bfca6d2b9987b0772559"
  ],
  "numDeployments": 1,
  "solcInputHash": "e244380effbce41892f700a14f2cc79c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_psm\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_maha\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_odos\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OdosSwapFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"zaiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStakedAmount\",\"type\":\"uint256\"}],\"name\":\"Zapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maha\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"me\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"odos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psm\",\"outputs\":[{\"internalType\":\"contract IPegStabilityModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zai\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"swapAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"odosCallData\",\"type\":\"bytes\"}],\"name\":\"zapWithOdos\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"zaiAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpAmount\",\"type\":\"uint256\"}],\"name\":\"zapWithZaiIntoLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"zapWithZaiIntoLP(uint256,uint256,uint256)\":{\"details\":\"This function is used when the user already has ZAI tokens.\",\"params\":{\"collateralAmount\":\"The amount of collateral to zap\",\"minLpAmount\":\"The minimum amount of LP tokens to stake\",\"zaiAmount\":\"The amount of ZAI to zap\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"zapWithZaiIntoLP(uint256,uint256,uint256)\":{\"notice\":\"Zaps ZAI and collateral into LP tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol\":\"ZapCurvePoolMAHA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x00c23b80f74717a6765b606001c5c633116020d488ee8f53600685b8200e4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/interfaces/IStablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStablecoin is IERC20 {\\n  /**\\n   * @notice Used to mint ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to mint to\\n   * @param _amount The amount to mint\\n   */\\n  function mint(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Role for minting/burning ZAI\\n   */\\n  function MANAGER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Used to burn ZAI\\n   * @dev This is only callable by verified managers approved by governance\\n   * @param _account The address to burn from\\n   * @param _amount The amount to burn\\n   */\\n  function burn(address _account, uint256 _amount) external;\\n\\n  /**\\n   * @notice Grants the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to grant the role to\\n   */\\n  function grantManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Revokes the manager role to an account\\n   * @dev Can only be called by governance\\n   * @param _account The account to revoke the role from\\n   */\\n  function revokeManagerRole(address _account) external;\\n\\n  /**\\n   * @notice Checks if an address is an approved manager\\n   * @param _account The address to check\\n   * @return what True iff the address is a manager\\n   */\\n  function isManager(address _account) external view returns (bool what);\\n}\\n\",\"keccak256\":\"0xaadb3432557810d9cddef1be599f06bba520273011d8c0a80f833082fff964f0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/core/IPegStabilityModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IStablecoin} from \\\"../IStablecoin.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title Peg Stability Module\\n * @author maha.xyz\\n * @notice Used to mint ZAI with collateral at a pre-defined rate\\n */\\ninterface IPegStabilityModule {\\n  /**\\n   * @notice Returns the Zai stablecoin\\n   */\\n  function zai() external returns (IStablecoin);\\n\\n  /**\\n   * @notice Returns the collateral token\\n   */\\n  function collateral() external returns (IERC20);\\n\\n  /**\\n   * @notice Returns the supply cap\\n   */\\n  function supplyCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the debt cap\\n   */\\n  function debtCap() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current debt held in this vault\\n   */\\n  function debt() external returns (uint256);\\n\\n  /**\\n   * @notice Returns the current rate of ZAI/Collateral\\n   */\\n  function rate() external returns (uint256);\\n\\n  /**\\n   * @notice The mint fee in BPS\\n   */\\n  function mintFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The address where fees are sent\\n   */\\n  function feeDestination() external returns (address);\\n\\n  /**\\n   * @notice The redeem fee in BPS\\n   */\\n  function redeemFeeBps() external returns (uint256);\\n\\n  /**\\n   * @notice The maximum fee that can be charged\\n   */\\n  function MAX_FEE_BPS() external returns (uint256);\\n\\n  /**\\n   * @notice Mints ZAI with collateral\\n   * @dev This contract calculates how much collateral should be taken\\n   * @param destination Where the minted ZAI will be sent\\n   * @param shares The amount of zai to mint\\n   */\\n  function mint(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Redeems ZAI for collateral\\n   * @dev This contract calculates how much collateral should be given\\n   * @param destination Where the collateral will be sent\\n   * @param shares The amount of zai to redeem\\n   */\\n  function redeem(address destination, uint256 shares) external;\\n\\n  /**\\n   * @notice Updates the supply and debt caps\\n   * @dev Only callable by the admin\\n   * @param _supplyCap How much collateral can be taken\\n   * @param _debtCap How much debt can be held\\n   */\\n  function updateCaps(uint256 _supplyCap, uint256 _debtCap) external;\\n\\n  // /**\\n  //  * @notice Updates the rate of ZAI/Collateral\\n  //  * @dev Only callable by the admin\\n  //  * @param _newRate The new rate of ZAI/Collateral\\n  //  */\\n  // function updateRate(uint256 _newRate) external;\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral\\n   * @param _amount The amount of ZAI\\n   * @return collateralAmount The amount of collateral\\n   */\\n  function toCollateralAmount(uint256 _amount) external view returns (uint256 collateralAmount);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee added\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS + fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFee(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Converts ZAI amount to collateral with fee removed\\n   * @dev Fee is calculated as (amount * (MAX_FEE_BPS - fee)) / MAX_FEE_BPS\\n   * @param _amount The amount of ZAI\\n   * @param _fee The fee to be charged in BPS\\n   */\\n  function toCollateralAmountWithFeeInverse(uint256 _amount, uint256 _fee) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be minted for a given amount of collateral\\n   * @param amountAssetsIn The amount of collateral\\n   */\\n  function mintAmountIn(uint256 amountAssetsIn) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Calculates how much ZAI should be redeemed for a given amount of collateral\\n   * @param amountAssetsOut The amount of collateral\\n   */\\n  function redeemAmountOut(uint256 amountAssetsOut) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice How much fees has been collected by the protocol\\n   * @return fees The amount of fees collected in ZAI\\n   */\\n  function feesCollected() external view returns (uint256 fees);\\n\\n  /**\\n   * @notice Updates the mint and redeem fees\\n   * @param _mintFeeBps The new mint fee in BPS\\n   * @param _redeemFeeBps The new redeem fee in BPS\\n   */\\n  function updateFees(uint256 _mintFeeBps, uint256 _redeemFeeBps) external;\\n\\n  /**\\n   * @notice Updates the fee destination\\n   * @param _feeDestination The new fee destination\\n   * @dev Only callable by the admin\\n   */\\n  function updateFeeDestination(address _feeDestination) external;\\n\\n  // /**\\n  //  * @notice Initializes the contract\\n  //  * @param _zai The ZAI stablecoin\\n  //  * @param _collateral The collateral token\\n  //  * @param _governance Governance address\\n  //  * @param _newRate The new rate of ZAI/Collateral\\n  //  * @param _supplyCap The supply cap\\n  //  * @param _debtCap The debt cap\\n  //  * @param _mintFeeBps The mint fee in BPS\\n  //  * @param _redeemFeeBps The redeem fee in BPS\\n  //  * @param _feeDestination The address where fees are sent\\n  //  */\\n  // function initialize(\\n  //   address _zai,\\n  //   address _collateral,\\n  //   address _governance,\\n  //   uint256 _newRate,\\n  //   uint256 _supplyCap,\\n  //   uint256 _debtCap,\\n  //   uint256 _mintFeeBps,\\n  //   uint256 _redeemFeeBps,\\n  //   address _feeDestination\\n  // ) external;\\n}\\n\",\"keccak256\":\"0x2dbe99751d3ecc0a33d9d3d1a4895c8894741325013de98dabcabbe017d71b60\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/periphery/curve/ICurveTwoCrypto.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface ICurveTwoCrypto is IERC20 {\\n  function add_liquidity(uint256[2] memory amounts, uint256 minLp) external returns (uint256);\\n\\n  function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xea4e17bde132753861f1ba6c0ad9bbb1ad112603bd798267cda5305aefaca620\",\"license\":\"GPL-3.0\"},\"contracts/periphery/zaps/ZapBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport {IERC20, IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\n/**\\n * @title ZapBase\\n * @dev This contract allows users to perform a Zap operation by swapping collateral for zai tokens, adding liquidity to\\n * curve LP, and staking the LP tokens.\\n */\\nabstract contract ZapBase {\\n  IERC4626 public staking;\\n\\n  IERC20Metadata public pool;\\n\\n  IERC20Metadata public zai;\\n\\n  IERC20Metadata public collateral;\\n\\n  uint256 public decimalOffset;\\n\\n  address public me;\\n\\n  error OdosSwapFailed();\\n  error CollateralTransferFailed();\\n  error TokenTransferFailed();\\n\\n  event Zapped(\\n    address indexed user, uint256 indexed collateralAmount, uint256 indexed zaiAmount, uint256 newStakedAmount\\n  );\\n\\n  /**\\n   * @dev Initializes the contract with the required contracts\\n   */\\n  constructor(address _staking) {\\n    staking = IERC4626(_staking);\\n    pool = IERC20Metadata(staking.asset());\\n    pool.approve(_staking, type(uint256).max);\\n    me = address(this);\\n  }\\n\\n  function _sweep(IERC20 token) internal {\\n    if (token == IERC20(address(0))) {\\n      if (address(this).balance == 0) return;\\n      (bool success,) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n      if (!success) revert TokenTransferFailed();\\n      return;\\n    }\\n    uint256 tokenB = token.balanceOf(address(this));\\n    if (tokenB > 0 && !token.transfer(msg.sender, tokenB)) {\\n      revert TokenTransferFailed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6b494af46df2686a36c414830a75a07a6547a7c36e985b4bcaf5c1059e11d716\",\"license\":\"GPL-3.0\"},\"contracts/periphery/zaps/implementations/ethereum/ZapBaseEthereum.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {IPegStabilityModule} from \\\"../../../../interfaces/core/IPegStabilityModule.sol\\\";\\nimport {ZapBase} from \\\"../../ZapBase.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\nabstract contract ZapBaseEthereum is ZapBase {\\n  IPegStabilityModule public psm;\\n\\n  constructor(address _staking, address _psm) ZapBase(_staking) {\\n    psm = IPegStabilityModule(_psm);\\n\\n    zai = IERC20Metadata(address(psm.zai()));\\n    collateral = IERC20Metadata(address(psm.collateral()));\\n\\n    decimalOffset = 10 ** (18 - collateral.decimals());\\n\\n    // give approvals\\n    zai.approve(address(pool), type(uint256).max);\\n    collateral.approve(address(pool), type(uint256).max);\\n    collateral.approve(address(psm), type(uint256).max);\\n  }\\n}\\n\",\"keccak256\":\"0xefd4f90901f1d4a986b1228b84955097b3a70afd6ba6e35c8571df53d39e129c\",\"license\":\"GPL-3.0\"},\"contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {ZapBaseEthereum} from \\\"./ZapBaseEthereum.sol\\\";\\n\\n/**\\n * @title ZapCurvePool\\n * @dev This contract allows users to perform a Zap operation by swapping collateral for zai tokens, adding liquidity to\\n * curve LP, and staking the LP tokens.\\n */\\nabstract contract ZapCurvePoolBase is ZapBaseEthereum {\\n  /**\\n   * @notice Zaps ZAI and collateral into LP tokens\\n   * @dev This function is used when the user already has ZAI tokens.\\n   * @param zaiAmount The amount of ZAI to zap\\n   * @param collateralAmount The amount of collateral to zap\\n   * @param minLpAmount The minimum amount of LP tokens to stake\\n   */\\n  function zapWithZaiIntoLP(uint256 zaiAmount, uint256 collateralAmount, uint256 minLpAmount) external {\\n    // fetch tokens\\n    if (zaiAmount > 0) zai.transferFrom(msg.sender, me, zaiAmount);\\n    if (collateralAmount > 0) collateral.transferFrom(msg.sender, me, collateralAmount);\\n\\n    // add liquidity\\n    _addLiquidity(zaiAmount, collateralAmount, minLpAmount);\\n\\n    // we now have LP tokens; deposit into staking contract for the user\\n    staking.deposit(pool.balanceOf(address(this)), msg.sender);\\n\\n    // sweep any dust\\n    _sweep(zai);\\n    _sweep(collateral);\\n\\n    emit Zapped(msg.sender, collateralAmount, zaiAmount, pool.balanceOf(msg.sender));\\n  }\\n\\n  function _addLiquidity(uint256 zaiAmt, uint256 collatAmt, uint256 minLp) internal virtual;\\n}\\n\",\"keccak256\":\"0x1f964639d12a7a5bfa8eafcd56d38bbab0dbffdad5efce68e80896c472b6edd8\",\"license\":\"GPL-3.0\"},\"contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n// Website: https://maha.xyz\\n// Discord: https://discord.gg/mahadao\\n// Twitter: https://twitter.com/mahaxyz_\\n\\npragma solidity 0.8.21;\\n\\nimport {ICurveTwoCrypto} from \\\"../../../../interfaces/periphery/curve/ICurveTwoCrypto.sol\\\";\\nimport {ZapBaseEthereum, ZapCurvePoolBase} from \\\"./ZapCurvePoolBase.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ZapCurvePoolMAHA is ZapCurvePoolBase {\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  IERC20 public maha;\\n  address public odos;\\n\\n  constructor(address _staking, address _psm, IERC20 _maha, address _odos) ZapBaseEthereum(_staking, _psm) {\\n    maha = IERC20(_maha);\\n    odos = _odos;\\n    maha.approve(address(pool), type(uint256).max);\\n    zai.approve(address(pool), type(uint256).max);\\n  }\\n\\n  function zapWithOdos(\\n    IERC20 swapAsset,\\n    uint256 swapAmount,\\n    uint256 minLpAmount,\\n    bytes memory odosCallData\\n  ) external payable {\\n    if (swapAsset != IERC20(address(0))) {\\n      swapAsset.safeTransferFrom(msg.sender, me, swapAmount);\\n      swapAsset.forceApprove(odos, swapAmount);\\n    }\\n\\n    // swap on odos to 50-50 collateral and maha\\n    (bool success,) = odos.call{value: msg.value}(odosCallData);\\n    require(success, \\\"odos call failed\\\");\\n\\n    // convert collateral for zai\\n    uint256 zaiToMint = psm.mintAmountIn(collateral.balanceOf(me));\\n    psm.mint(address(this), zaiToMint);\\n\\n    // add liquidity with maha and ZAI\\n    uint256 mahaAmount = maha.balanceOf(me);\\n    _addLiquidity(zaiToMint, mahaAmount, minLpAmount);\\n\\n    // we now have LP tokens; deposit into staking contract for the user\\n    staking.deposit(pool.balanceOf(address(this)), msg.sender);\\n\\n    // sweep any dust\\n    _sweep(zai);\\n    _sweep(collateral);\\n    _sweep(swapAsset);\\n    _sweep(maha);\\n\\n    emit Zapped(msg.sender, mahaAmount, zaiToMint, pool.balanceOf(msg.sender));\\n  }\\n\\n  function _addLiquidity(uint256 zaiAmt, uint256 collatAmt, uint256 minLp) internal virtual override {\\n    uint256[2] memory amounts; // = new uint256[2]();\\n    amounts[0] = zaiAmt;\\n    amounts[1] = collatAmt;\\n    ICurveTwoCrypto(address(pool)).add_liquidity(amounts, minLp);\\n  }\\n}\\n\",\"keccak256\":\"0x9cd2fb0419e08774f81e766a7ce12bbba5c9b42543e458b217623ee4f6214b2b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001919380380620019198339810160408190526200003491620005b9565b600080546001600160a01b0319166001600160a01b038616908117909155604080516338d52e0f60e01b815290518692869284926338d52e0f916004808201926020929091908290030181865afa15801562000094573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ba919062000621565b600180546001600160a01b0319166001600160a01b0392831690811790915560405163095ea7b360e01b8152918316600483015260001960248301529063095ea7b3906044016020604051808303816000875af115801562000120573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000146919062000648565b5050600580546001600160a01b03199081163017909155600680546001600160a01b038416921682179055604080516301c502cd60e21b815290516307140b349160048082019260209290919082900301816000875af1158015620001af573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d5919062000621565b600280546001600160a01b0319166001600160a01b039283161790556006546040805163d8dfeb4560e01b81529051919092169163d8dfeb4591600480830192602092919082900301816000875af115801562000236573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025c919062000621565b600380546001600160a01b0319166001600160a01b039290921691821790556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa158015620002b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002dd91906200066c565b620002ea906012620006a7565b620002f790600a620007c6565b600490815560025460015460405163095ea7b360e01b81526001600160a01b03918216938101939093526000196024840152169063095ea7b3906044016020604051808303816000875af115801562000354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200037a919062000648565b5060035460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015620003d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f8919062000648565b5060035460065460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000450573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000476919062000648565b5050600780546001600160a01b03199081166001600160a01b03868116918217909355600880549092168584161790915560015460405163095ea7b360e01b8152921660048301526000196024830152915063095ea7b3906044016020604051808303816000875af1158015620004f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000517919062000648565b5060025460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156200056f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000595919062000648565b5050505050620007d7565b6001600160a01b0381168114620005b657600080fd5b50565b60008060008060808587031215620005d057600080fd5b8451620005dd81620005a0565b6020860151909450620005f081620005a0565b60408601519093506200060381620005a0565b60608601519092506200061681620005a0565b939692955090935050565b6000602082840312156200063457600080fd5b81516200064181620005a0565b9392505050565b6000602082840312156200065b57600080fd5b815180151581146200064157600080fd5b6000602082840312156200067f57600080fd5b815160ff811681146200064157600080fd5b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115620006c357620006c362000691565b92915050565b600181815b808511156200070a578160001904821115620006ee57620006ee62000691565b80851615620006fc57918102915b93841c9390800290620006ce565b509250929050565b6000826200072357506001620006c3565b816200073257506000620006c3565b81600181146200074b5760028114620007565762000776565b6001915050620006c3565b60ff8411156200076a576200076a62000691565b50506001821b620006c3565b5060208310610133831016604e8410600b84101617156200079b575081810a620006c3565b620007a78383620006c9565b8060001904821115620007be57620007be62000691565b029392505050565b60006200064160ff84168362000712565b61113280620007e76000396000f3fe60806040526004361061009c5760003560e01c80634cf088d9116100645780634cf088d91461015757806350805a711461017757806352d8e34f1461018c578063cb12b48f146101ac578063d1b39ae5146101cc578063d8dfeb45146101f057600080fd5b806304bda262146100a157806307140b34146100d757806316f0115b146100f75780631eba02ec146101175780633de00c3614610137575b600080fd5b3480156100ad57600080fd5b506006546100c1906001600160a01b031681565b6040516100ce9190610ee4565b60405180910390f35b3480156100e357600080fd5b506002546100c1906001600160a01b031681565b34801561010357600080fd5b506001546100c1906001600160a01b031681565b34801561012357600080fd5b506008546100c1906001600160a01b031681565b34801561014357600080fd5b506007546100c1906001600160a01b031681565b34801561016357600080fd5b506000546100c1906001600160a01b031681565b61018a610185366004610f0e565b610210565b005b34801561019857600080fd5b5061018a6101a7366004610ff1565b6106ac565b3480156101b857600080fd5b506005546100c1906001600160a01b031681565b3480156101d857600080fd5b506101e260045481565b6040519081526020016100ce565b3480156101fc57600080fd5b506003546100c1906001600160a01b031681565b6001600160a01b038416156102555760055461023b906001600160a01b03868116913391168661097d565b600854610255906001600160a01b038681169116856109dd565b6008546040516000916001600160a01b031690349061027590859061101d565b60006040518083038185875af1925050503d80600081146102b2576040519150601f19603f3d011682016040523d82523d6000602084013e6102b7565b606091505b50509050806103005760405162461bcd60e51b815260206004820152601060248201526f1bd91bdcc818d85b1b0819985a5b195960821b60448201526064015b60405180910390fd5b6006546003546005546040516370a0823160e01b81526000936001600160a01b0390811693631f80b95a93908216926370a0823192610343921690600401610ee4565b602060405180830381865afa158015610360573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610384919061104c565b6040518263ffffffff1660e01b81526004016103a291815260200190565b602060405180830381865afa1580156103bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e3919061104c565b6006546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906104169030908590600401611065565b600060405180830381600087803b15801561043057600080fd5b505af1158015610444573d6000803e3d6000fd5b50506007546005546040516370a0823160e01b8152600094506001600160a01b0392831693506370a082319261047e921690600401610ee4565b602060405180830381865afa15801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf919061104c565b90506104cc828287610a6f565b6000546001546040516370a0823160e01b81526001600160a01b0392831692636e553f659216906370a0823190610507903090600401610ee4565b602060405180830381865afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610548919061104c565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af115801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b0919061104c565b506002546105c6906001600160a01b0316610afd565b6003546105db906001600160a01b0316610afd565b6105e487610afd565b6007546105f9906001600160a01b0316610afd565b6001546040516370a0823160e01b81528391839133917f8254cb1554a3a4f342e4d6bc29ea29f483d72ec4183e94e4a83410c93af84341916001600160a01b03909116906370a0823190610651908590600401610ee4565b602060405180830381865afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610692919061104c565b60405190815260200160405180910390a450505050505050565b8215610730576002546005546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926106eb92339290911690889060040161107e565b6020604051808303816000875af115801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e91906110a2565b505b81156107b4576003546005546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261076f92339290911690879060040161107e565b6020604051808303816000875af115801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b291906110a2565b505b6107bf838383610a6f565b6000546001546040516370a0823160e01b81526001600160a01b0392831692636e553f659216906370a08231906107fa903090600401610ee4565b602060405180830381865afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b919061104c565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af115801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a3919061104c565b506002546108b9906001600160a01b0316610afd565b6003546108ce906001600160a01b0316610afd565b6001546040516370a0823160e01b81528491849133917f8254cb1554a3a4f342e4d6bc29ea29f483d72ec4183e94e4a83410c93af84341916001600160a01b03909116906370a0823190610926908590600401610ee4565b602060405180830381865afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610967919061104c565b60405190815260200160405180910390a4505050565b6109d784856001600160a01b03166323b872dd8686866040516024016109a59392919061107e565b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610c91565b50505050565b6000836001600160a01b031663095ea7b38484604051602401610a01929190611065565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050509050610a3a8482610cf0565b6109d757610a6584856001600160a01b031663095ea7b38660006040516024016109a5929190611065565b6109d78482610c91565b610a77610ec6565b83815260208101839052600154604051630b4c7e4d60e01b81526001600160a01b0390911690630b4c7e4d90610ab390849086906004016110c4565b6020604051808303816000875af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af6919061104c565b5050505050565b6001600160a01b038116610b835747600003610b165750565b604051600090339047908381818185875af1925050503d8060008114610b58576040519150601f19603f3d011682016040523d82523d6000602084013e610b5d565b606091505b5050905080610b7f5760405163022e258160e11b815260040160405180910390fd5b5050565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610bb2903090600401610ee4565b602060405180830381865afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf3919061104c565b9050600081118015610c73575060405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610c2e9033908590600401611065565b6020604051808303816000875af1158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7191906110a2565b155b15610b7f5760405163022e258160e11b815260040160405180910390fd5b6000610ca66001600160a01b03841683610d98565b90508051600014158015610ccb575080806020019051810190610cc991906110a2565b155b15610ceb5782604051635274afe760e01b81526004016102f79190610ee4565b505050565b6000806000846001600160a01b031684604051610d0d919061101d565b6000604051808303816000865af19150503d8060008114610d4a576040519150601f19603f3d011682016040523d82523d6000602084013e610d4f565b606091505b5091509150818015610d79575080511580610d79575080806020019051810190610d7991906110a2565b8015610d8f57506000856001600160a01b03163b115b95945050505050565b6060610da683836000610dad565b9392505050565b606081471015610dd2573060405163cd78605960e01b81526004016102f79190610ee4565b600080856001600160a01b03168486604051610dee919061101d565b60006040518083038185875af1925050503d8060008114610e2b576040519150601f19603f3d011682016040523d82523d6000602084013e610e30565b606091505b5091509150610e40868383610e4a565b9695505050505050565b606082610e5f57610e5a82610e9d565b610da6565b8151158015610e7657506001600160a01b0384163b155b15610e965783604051639996b31560e01b81526004016102f79190610ee4565b5080610da6565b805115610ead5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180604001604052806002906020820280368337509192915050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610f2457600080fd5b84356001600160a01b0381168114610f3b57600080fd5b93506020850135925060408501359150606085013567ffffffffffffffff80821115610f6657600080fd5b818701915087601f830112610f7a57600080fd5b813581811115610f8c57610f8c610ef8565b604051601f8201601f19908116603f01168101908382118183101715610fb457610fb4610ef8565b816040528281528a6020848701011115610fcd57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561100657600080fd5b505081359360208301359350604090920135919050565b6000825160005b8181101561103e5760208186018101518583015201611024565b506000920191825250919050565b60006020828403121561105e57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156110b457600080fd5b81518015158114610da657600080fd5b60608101818460005b60028110156110ec5781518352602092830192909101906001016110cd565b505050826040830152939250505056fea264697066735822122070544e12928bd00d7aea2daeba6af3f4aaa360ed00261ef5734e0bf689de9eb464736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80634cf088d9116100645780634cf088d91461015757806350805a711461017757806352d8e34f1461018c578063cb12b48f146101ac578063d1b39ae5146101cc578063d8dfeb45146101f057600080fd5b806304bda262146100a157806307140b34146100d757806316f0115b146100f75780631eba02ec146101175780633de00c3614610137575b600080fd5b3480156100ad57600080fd5b506006546100c1906001600160a01b031681565b6040516100ce9190610ee4565b60405180910390f35b3480156100e357600080fd5b506002546100c1906001600160a01b031681565b34801561010357600080fd5b506001546100c1906001600160a01b031681565b34801561012357600080fd5b506008546100c1906001600160a01b031681565b34801561014357600080fd5b506007546100c1906001600160a01b031681565b34801561016357600080fd5b506000546100c1906001600160a01b031681565b61018a610185366004610f0e565b610210565b005b34801561019857600080fd5b5061018a6101a7366004610ff1565b6106ac565b3480156101b857600080fd5b506005546100c1906001600160a01b031681565b3480156101d857600080fd5b506101e260045481565b6040519081526020016100ce565b3480156101fc57600080fd5b506003546100c1906001600160a01b031681565b6001600160a01b038416156102555760055461023b906001600160a01b03868116913391168661097d565b600854610255906001600160a01b038681169116856109dd565b6008546040516000916001600160a01b031690349061027590859061101d565b60006040518083038185875af1925050503d80600081146102b2576040519150601f19603f3d011682016040523d82523d6000602084013e6102b7565b606091505b50509050806103005760405162461bcd60e51b815260206004820152601060248201526f1bd91bdcc818d85b1b0819985a5b195960821b60448201526064015b60405180910390fd5b6006546003546005546040516370a0823160e01b81526000936001600160a01b0390811693631f80b95a93908216926370a0823192610343921690600401610ee4565b602060405180830381865afa158015610360573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610384919061104c565b6040518263ffffffff1660e01b81526004016103a291815260200190565b602060405180830381865afa1580156103bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e3919061104c565b6006546040516340c10f1960e01b81529192506001600160a01b0316906340c10f19906104169030908590600401611065565b600060405180830381600087803b15801561043057600080fd5b505af1158015610444573d6000803e3d6000fd5b50506007546005546040516370a0823160e01b8152600094506001600160a01b0392831693506370a082319261047e921690600401610ee4565b602060405180830381865afa15801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf919061104c565b90506104cc828287610a6f565b6000546001546040516370a0823160e01b81526001600160a01b0392831692636e553f659216906370a0823190610507903090600401610ee4565b602060405180830381865afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610548919061104c565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af115801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b0919061104c565b506002546105c6906001600160a01b0316610afd565b6003546105db906001600160a01b0316610afd565b6105e487610afd565b6007546105f9906001600160a01b0316610afd565b6001546040516370a0823160e01b81528391839133917f8254cb1554a3a4f342e4d6bc29ea29f483d72ec4183e94e4a83410c93af84341916001600160a01b03909116906370a0823190610651908590600401610ee4565b602060405180830381865afa15801561066e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610692919061104c565b60405190815260200160405180910390a450505050505050565b8215610730576002546005546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926106eb92339290911690889060040161107e565b6020604051808303816000875af115801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e91906110a2565b505b81156107b4576003546005546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261076f92339290911690879060040161107e565b6020604051808303816000875af115801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b291906110a2565b505b6107bf838383610a6f565b6000546001546040516370a0823160e01b81526001600160a01b0392831692636e553f659216906370a08231906107fa903090600401610ee4565b602060405180830381865afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b919061104c565b6040516001600160e01b031960e084901b16815260048101919091523360248201526044016020604051808303816000875af115801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a3919061104c565b506002546108b9906001600160a01b0316610afd565b6003546108ce906001600160a01b0316610afd565b6001546040516370a0823160e01b81528491849133917f8254cb1554a3a4f342e4d6bc29ea29f483d72ec4183e94e4a83410c93af84341916001600160a01b03909116906370a0823190610926908590600401610ee4565b602060405180830381865afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610967919061104c565b60405190815260200160405180910390a4505050565b6109d784856001600160a01b03166323b872dd8686866040516024016109a59392919061107e565b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610c91565b50505050565b6000836001600160a01b031663095ea7b38484604051602401610a01929190611065565b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050509050610a3a8482610cf0565b6109d757610a6584856001600160a01b031663095ea7b38660006040516024016109a5929190611065565b6109d78482610c91565b610a77610ec6565b83815260208101839052600154604051630b4c7e4d60e01b81526001600160a01b0390911690630b4c7e4d90610ab390849086906004016110c4565b6020604051808303816000875af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af6919061104c565b5050505050565b6001600160a01b038116610b835747600003610b165750565b604051600090339047908381818185875af1925050503d8060008114610b58576040519150601f19603f3d011682016040523d82523d6000602084013e610b5d565b606091505b5050905080610b7f5760405163022e258160e11b815260040160405180910390fd5b5050565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610bb2903090600401610ee4565b602060405180830381865afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf3919061104c565b9050600081118015610c73575060405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610c2e9033908590600401611065565b6020604051808303816000875af1158015610c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7191906110a2565b155b15610b7f5760405163022e258160e11b815260040160405180910390fd5b6000610ca66001600160a01b03841683610d98565b90508051600014158015610ccb575080806020019051810190610cc991906110a2565b155b15610ceb5782604051635274afe760e01b81526004016102f79190610ee4565b505050565b6000806000846001600160a01b031684604051610d0d919061101d565b6000604051808303816000865af19150503d8060008114610d4a576040519150601f19603f3d011682016040523d82523d6000602084013e610d4f565b606091505b5091509150818015610d79575080511580610d79575080806020019051810190610d7991906110a2565b8015610d8f57506000856001600160a01b03163b115b95945050505050565b6060610da683836000610dad565b9392505050565b606081471015610dd2573060405163cd78605960e01b81526004016102f79190610ee4565b600080856001600160a01b03168486604051610dee919061101d565b60006040518083038185875af1925050503d8060008114610e2b576040519150601f19603f3d011682016040523d82523d6000602084013e610e30565b606091505b5091509150610e40868383610e4a565b9695505050505050565b606082610e5f57610e5a82610e9d565b610da6565b8151158015610e7657506001600160a01b0384163b155b15610e965783604051639996b31560e01b81526004016102f79190610ee4565b5080610da6565b805115610ead5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180604001604052806002906020820280368337509192915050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610f2457600080fd5b84356001600160a01b0381168114610f3b57600080fd5b93506020850135925060408501359150606085013567ffffffffffffffff80821115610f6657600080fd5b818701915087601f830112610f7a57600080fd5b813581811115610f8c57610f8c610ef8565b604051601f8201601f19908116603f01168101908382118183101715610fb457610fb4610ef8565b816040528281528a6020848701011115610fcd57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060006060848603121561100657600080fd5b505081359360208301359350604090920135919050565b6000825160005b8181101561103e5760208186018101518583015201611024565b506000920191825250919050565b60006020828403121561105e57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156110b457600080fd5b81518015158114610da657600080fd5b60608101818460005b60028110156110ec5781518352602092830192909101906001016110cd565b505050826040830152939250505056fea264697066735822122070544e12928bd00d7aea2daeba6af3f4aaa360ed00261ef5734e0bf689de9eb464736f6c63430008150033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "zapWithZaiIntoLP(uint256,uint256,uint256)": {
        "details": "This function is used when the user already has ZAI tokens.",
        "params": {
          "collateralAmount": "The amount of collateral to zap",
          "minLpAmount": "The minimum amount of LP tokens to stake",
          "zaiAmount": "The amount of ZAI to zap"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "zapWithZaiIntoLP(uint256,uint256,uint256)": {
        "notice": "Zaps ZAI and collateral into LP tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1107,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol:ZapCurvePoolMAHA",
        "label": "staking",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC4626)177"
      },
      {
        "astId": 1110,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol:ZapCurvePoolMAHA",
        "label": "pool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20Metadata)281"
      },
      {
        "astId": 1113,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol:ZapCurvePoolMAHA",
        "label": "zai",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20Metadata)281"
      },
      {
        "astId": 1116,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol:ZapCurvePoolMAHA",
        "label": "collateral",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20Metadata)281"
      },
      {
        "astId": 1118,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol:ZapCurvePoolMAHA",
        "label": "decimalOffset",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1120,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol:ZapCurvePoolMAHA",
        "label": "me",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1262,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol:ZapCurvePoolMAHA",
        "label": "psm",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IPegStabilityModule)1067"
      },
      {
        "astId": 1474,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol:ZapCurvePoolMAHA",
        "label": "maha",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)255"
      },
      {
        "astId": 1476,
        "contract": "contracts/periphery/zaps/implementations/ethereum/ZapCurvePoolMAHA.sol:ZapCurvePoolMAHA",
        "label": "odos",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)255": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)281": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IERC4626)177": {
        "encoding": "inplace",
        "label": "contract IERC4626",
        "numberOfBytes": "20"
      },
      "t_contract(IPegStabilityModule)1067": {
        "encoding": "inplace",
        "label": "contract IPegStabilityModule",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}